################################################################################
#                                                                              #
#              STEPS model of Cerebellar Long-Term Depression                  #
#                                                                              #
#              Project supervision: Erik De Schutter (2009-2016)               #
#                                                                              #
#                           Scripts Authors:                                   #
#                                                                              #
#  Original development (2008-2012): Gabriela Antunes                          #
#  Modified for STEPS 1.3 (2013):    Iain Hepburn and Cory Simon               #
#  Addition of RKIP, improved calcium dynamics, and other                      #
#      modifications (2014-2016):    Anant Jain, Iain Hepburn, Himanshu Gangal #
#                                                                              #
#                                                                              #
################################################################################


# Example command-line usage:
# python LTD_STEPS_2.1.py ./data LTDsim 50 15 7 55 1 AMPAR Ca ERK MEK PKC

########################################################################     

import sys
import os

###################### Command line arguments ##########################

# The path to store data
path=sys.argv[1]

# ID of the data (e.g. 'LTDsim')
dataid=sys.argv[2]

# Ca pulse peak (uM)
ca_peak=sys.argv[3]

# Ca pulse width (s)
ca_width=sys.argv[4]

# Raf number
raf_number = sys.argv[5]

# PKC number
pkc_number = sys.argv[6]

# Index of the data (to be converted to int, e.g. '7'). 
# This will also control the random number seed
idx = sys.argv[7]

# Data to save. Species names to be given as a subset of:
# 'AMPAR', 'Ca', 'AA', 'PKC', 'ERK', 'MEK', 'PLA2', 'Raf', 'RKIP'
# Activites of those species will be recorded over time
data_record = sys.argv[8:]

if len(data_record) == 0: 
    print("WARNING: Will not record any data")

datapath = os.path.join(path, f'{dataid}_{ca_peak}_{ca_width}_{raf_number}_{pkc_number}', f'{idx}')

# Create storage locations if necessary.
os.makedirs(datapath, exist_ok=True)

# Automatically plot some figures or not. Basically plots activity
# over time for any species recorded
plotfigs = True

########################################################################

import steps.interface

from steps.model import *
from steps.geom import *
from steps.rng import *
from steps.sim import *
from steps.saving import *
from steps.utils import *

import datetime
import math
import numpy
from pylab import *
import pickle

# Simualation data recording time step (s)
DT = 0.05 

# Final time (s) simulated
INT = 3600

# Number of runs used to calculate the mean
# To see individual runs this should be set to 1
NITER = 1 

# Initial time that will be discharged (s). 
# The initial 10 minutes of all simulations should be discharged to allow the model to reach equilibrium.
tinit = 600 

# Avogadro constant
Na = 6.02214129e23

########################################################################

def square_pulse_ica(t,max_molar=float(ca_peak)*1e-6, duration=float(ca_width), start=1200.0):
    """
    # Ca2+ pulse. 
    # The duration and amplitude of the pulse should be checked directly in the Ca2+ concentration
    # The changes in [Ca2+] generated by the pulses are sensitive to stochasticity
    # max_molar is the molar concentration per second injection (M/s)
    # start defines the time the pulse starts (s)
    # duration defines the duration of the pulse(s)

    # start and duration are taken from command line arguments
    """
    return max_molar if start <= t <= start + duration else 0
    

######################################################################## 

def gen_model(): 
    r = ReactionManager()

    mdl = Model()
    with mdl:
        ###########
        # Species #
        ###########
        Ca, PMCA, Ca1PMCA, NCX, Ca1NCX, Ca2NCX, SERCA, Ca1SERCA, Ca2SERCA, PV, MgPV, CaPV, Mg2PV, \
        Ca2PV, CBf, CaCBf, Ca2CBf, CBs, CaCBs, Ca2CBs, PKC, Ca1PKC, Ca3PKC, AAPKC, AACa1PKC, AACa3PKC, \
        PKCstar, PKCstar2, PKCstar4, PKCstar3, Raf, Rafstar, PP5, PP5Rafstar, MEK, RafstarMEK, MEKp, PP2A, \
        PP2AMEKp, RafstarMEKp, MEKstar, PP2AMEKstar, ERK, MEKstarERK, ERKp, MKP, MKPERKp, MEKstarERKp, \
        ERKstar, MKPERKstar, PLA2, Ca1PLA2, Ca2PLA2, PLA2memb, Ca1PLA2memb, PLA2star1, ERKstarPLA2, PLA2star2, \
        Ca1PLA2star2, Ca2PLA2star2, PLA2star2memb, Ca1PLA2star2memb, Ca2PLA2star2memb, PLA2star1APC, \
        ERKstarCa1PLA2, ERKstarCa2PLA2, PP2ACa1PLA2star2, PP2ACa2PLA2star2, PP1Ca1PLA2star2, PP1Ca2PLA2star2, \
        PLA2star2membAPC, Ca1PLA2star2membAPC, Ca2PLA2star2membAPC, PP1, PP1PLA2star2, PP2APLA2star2, AA, AMPAR, \
        PKCstarAMPAR, PKCstar2AMPAR, PKCstar4AMPAR, PKCstar3AMPAR, PKCstarGRIPAMPAR, PKCstar2GRIPAMPAR, \
        PKCstar4GRIPAMPAR, PKCstar3GRIPAMPAR, AMPAR_P, PP2AAMPAR_P, PP2AGRIPAMPAR_P, AMPARextra, AMPARextra_P, \
        PP2AAMPARextra_P, GRIP, GRIPAMPAR, GRIPAMPAR_P, AMPARdend, AMPARdend_P, PP2AAMPARdend_P, AMPARcyt, \
        AMPARcyt_P, PP2AAMPARcyt_P, RKIP, RafRKIP, RKIPstar, RP, RKIPstarRP, RafRKIPPKCstar, RafRKIPPKCstar2, \
        RafRKIPPKCstar3, RafRKIPPKCstar4, MEKRKIP, MEKRKIPPKCstar, MEKRKIPPKCstar2, MEKRKIPPKCstar3, \
        MEKRKIPPKCstar4 = Species.Create()

        ##############################
        # Volume and Surface Systems #
        ##############################
        extrasys, vsys, cytERsys = VolumeSystem.Create()
        memb, ERmemb = SurfaceSystem.Create()

    ########################################################################
    ########################################################################

        #############
        # Reactions #
        #############
        with vsys:

            # Ca influx (Ca = calcium)
            None >r['Cainflux']> Ca
            r['Cainflux'].K = 0.0

            # Leak
            None >r[1]> Ca
            r[1].K = 150/(Na*0.08e-15)

            ((PKC + Ca <r[1]> Ca1PKC) + 2*Ca <r[2]> Ca3PKC) + AA <r[3]> AACa3PKC <r[4]> AACa1PKC + 2*Ca
            r[1].K = 13.3e6, 12
            r[2].K = 1.e12 , 12
            r[3].K = 1e6 , 10
            r[4].K = 12, 1.0e12 

            ((PLA2 + Ca <r[1]> Ca1PLA2) + Ca <r[2]> Ca2PLA2) + ERKstar <r[3]> ERKstarCa2PLA2 >r[4]> Ca2PLA2star2 + ERKstar
            r[1].K = 1.93e6, 108
            r[2].K = 10.8e6 , 108
            r[3].K = 4e6 , 1
            r[4].K = 14

            # PV + Mg <-> MgPV <-> Mg2PV, apparent rate constants, [Mg] = 590uM 
            PV <r[1]> MgPV <r[2]> Mg2PV 
            r[1].K = 472, 25
            r[2].K = 472, 25

            (PV + Ca <r[1]> CaPV) + Ca <r[2]> Ca2PV
            r[1].K = 107e6 , 0.95
            r[2].K = 107e6 , 0.95

            ((Ca + PLA2star2 <r[1]> Ca1PLA2star2) + Ca <r[2]> Ca2PLA2star2) + PP2A <r[3]> PP2ACa2PLA2star2 >r[4]> Ca2PLA2 + PP2A
            r[1].K = 1.93e6 , 108
            r[2].K = 10.8e6 , 108
            r[3].K = 1.4e6, 1.5 
            r[4].K = 2.5    

            (CBs + Ca <r[1]> CaCBs) + Ca <r[2]> Ca2CBs
            r[1].K = 5.5e6, 2.6
            r[2].K = 5.5e6 , 2.6

            (CBf + Ca <r[1]> CaCBf) + Ca <r[2]> Ca2CBf
            r[1].K = 43.5e6 , 35.8
            r[2].K = 43.5e6 , 35.8

            (AA + PKC <r[1]> AAPKC) + Ca <r[2]> AACa1PKC <r[3]> AA + Ca1PKC
            r[1].K = 1e6 , 10
            r[2].K = 13.3e6, 12
            r[3].K = 10, 1e6 

            MEK + Rafstar <r[1]> RafstarMEK >r[2]> MEKp + Rafstar <r[3]> RafstarMEKp >r[4]> MEKstar + Rafstar
            r[1].K = 0.65e6 , 0.065
            r[2].K = 1.0
            r[3].K = 0.65e6 , 0.065
            r[4].K = 1.0

            MEKstar + PP2A <r[1]> PP2AMEKstar >r[2]> MEKp + PP2A <r[3]> PP2AMEKp >r[4]> MEK + PP2A
            r[1].K = 0.75e6 , 2
            r[2].K = 0.5
            r[3].K = 0.75e6 , 2
            r[4].K = 0.5

            ERK + MEKstar <r[1]> MEKstarERK >r[2]> ERKp + MEKstar <r[3]> MEKstarERKp >r[4]> ERKstar + MEKstar
            r[1].K = 16.2e6 , 0.6
            r[2].K = 0.15
            r[3].K = 16.2e6 , 0.6
            r[4].K = 0.3 

            ERKstar + MKP <r[1]> MKPERKstar >r[2]> ERKp + MKP <r[3]> MKPERKp >r[4]> ERK + MKP
            r[1].K = 13e6 , 0.396
            r[2].K = 0.099 
            r[3].K = 28e6 , 0.56
            r[4].K = 0.14 

            RKIPstar + RP <r[1]> RKIPstarRP >r[2]> RKIP + RP
            r[1].K = 0.92e6, 0.00122
            r[2].K = 0.87

            PP5 + Rafstar <r[1]> PP5Rafstar >r[2]> PP5 + Raf
            r[1].K = .55e6 , 2
            r[2].K = 0.5

            ERKstar + PLA2 <r[1]> ERKstarPLA2 >r[2]> ERKstar + PLA2star2
            r[1].K = 4e6 , 1
            r[2].K = 14

            Ca1PLA2 + ERKstar <r[1]> ERKstarCa1PLA2 >r[2]> Ca1PLA2star2 + ERKstar
            r[1].K = 4e6 , 1
            r[2].K = 14

            PLA2star2 + PP2A <r[1]> PP2APLA2star2 >r[2]> PLA2 + PP2A
            r[1].K = 1.4e6, 1.5
            r[2].K = 2.5

            Ca1PLA2star2 + PP2A <r[1]> PP2ACa1PLA2star2 >r[2]> Ca1PLA2 + PP2A
            r[1].K = 1.4e6, 1.5 
            r[2].K = 2.5

            PLA2star2 + PP1 <r[1]> PP1PLA2star2 >r[2]> PLA2 + PP1
            r[1].K = 1.4e6, 1.5
            r[2].K = 2.5

            Ca1PLA2star2 + PP1 <r[1]> PP1Ca1PLA2star2 >r[2]> Ca1PLA2 + PP1
            r[1].K = 1.4e6, 1.5
            r[2].K = 2.5

            Ca2PLA2star2 + PP1 <r[1]> PP1Ca2PLA2star2 >r[2]> Ca2PLA2 + PP1
            r[1].K = 1.4e6, 1.5
            r[2].K = 2.5

            AMPARcyt_P + PP2A <r[1]> PP2AAMPARcyt_P >r[2]> AMPARcyt + PP2A
            r[1].K = 0.6e6, 0.17
            r[2].K = 0.25

            RKIP + Raf <r[1]> RafRKIP
            r[1].K = 0.53e6, 0.072

            MEK + RKIP <r[1]> MEKRKIP
            r[1].K = 0.53e6, 0.072

        with memb:
            ((AMPARcyt_P.i <r[1]> AMPARdend_P.s <r[2]> AMPARextra_P.s <r[3]> AMPAR_P.s) + GRIP.s <r[4]> GRIPAMPAR_P.s) + PP2A.i <r[5]> PP2AGRIPAMPAR_P.s >r[6]> GRIPAMPAR.s + PP2A.i
            r[1].K = 0.002, 0.003
            r[2].K = 0.00025, 0.02
            r[3].K = 0.02, 0.1
            r[4].K = 1e6*(1.02e-12/1.87e-19), 70
            r[5].K = 0.6e6, 0.17
            r[6].K = 0.25 

            ((AMPARdend.s <r[1]> AMPARextra.s <r[2]> AMPAR.s) + GRIP.s <r[3]> GRIPAMPAR.s) + PKCstar.s <r[4]> PKCstarGRIPAMPAR.s >r[5]> GRIPAMPAR_P.s + PKCstar.s
            r[1].K = 0.00025, 0.02
            r[2].K = 0.02, 0.1
            r[3].K = 1e6*(1.02e-12/1.87e-19), 7
            r[4].K = 0.4e6*(1.02e-12/1.87e-19), 0.8
            r[5].K = 0.3

            ((Ca3PKC.i <r[1]> PKCstar.s) + AA.i <r[2]> PKCstar4.s) + RafRKIP.i <r[3]> RafRKIPPKCstar4.s >r[4]> PKCstar4.s + RKIPstar.i + Rafstar.i
            r[1].K = 11.3  , 0.23 
            r[2].K = 1e6 , 10
            r[3].K = 0.625e6  , 0.00245
            r[4].K = 0.0315

            (AAPKC.i <r[1]> PKCstar2.s) + Ca.i <r[2]> PKCstar3.s <r[3]> AACa1PKC.i
            r[1].K = 0.017 , 0.0055
            r[2].K = 13.3e6, 12
            r[3].K = 0.0055, 0.017 

            PLA2star1.i >r[1]> Ca.i + Ca1PLA2memb.s >r[2]> PLA2star1.s <r[3]> PLA2star1APC.s >r[4]> AA.i + PLA2star1.s
            r[1].K = 2.5
            r[2].K = 10.8e6 
            r[3].K = 43  , 600
            r[4].K = 450

            Ca1PLA2star2memb.i >r[1]> Ca.i + PLA2star2memb.s >r[2]> Ca1PLA2star2memb.s <r[3]> Ca1PLA2star2membAPC.s >r[4]> AA.i + Ca1PLA2star2memb.s
            r[1].K = 0.41
            r[2].K = 1.93e6 
            r[3].K = 43 , 600
            r[4].K = 3600

            Ca2PLA2star2memb.i >r[1]> Ca.i + Ca1PLA2star2memb.s >r[2]> Ca2PLA2star2memb.s <r[3]> Ca2PLA2star2membAPC.s >r[4]> AA.i + Ca2PLA2star2memb.s
            r[1].K = 2.5
            r[2].K = 10.8e6
            r[3].K = 43 , 600
            r[4].K = 3600

            Ca1PLA2memb.i >r[1]> Ca.i + PLA2memb.s >r[2]> Ca1PLA2memb.s <r[3]> Ca1PLA2.i
            r[1].K = 0.41
            r[2].K = 1.93e6
            r[3].K = 15, 30

            PLA2star2.i <r[1]> PLA2star2memb.s <r[2]> PLA2star2membAPC.s >r[3]> AA.i + PLA2star2memb.s
            r[1].K = 50, 15
            r[2].K = 43 , 600
            r[3].K = 3600 

            Ca.i + PMCA.s <r['pump2_f']> Ca1PMCA.s >r[2]> PMCA.s
            r['pump2_f'].K = 2500e6, 200 
            r[2].K = 50

            2*Ca.i + NCX.s <r[1]> Ca2NCX.s >r[2]> NCX.s
            r[1].K = 93.827e12  , 4000.0
            r[2].K = 1000

            2*Ca.i + PKCstar3.s <r[1]> PKCstar4.s <r[2]> AACa3PKC.i
            r[1].K = 1.0e12, 12
            r[2].K = 0.23 , 11.3 

            PKCstar.s + RafRKIP.i <r[1]> RafRKIPPKCstar.s >r[2]> PKCstar.s + RKIPstar.i + Rafstar.i
            r[1].K = 0.625e6, 0.00245
            r[2].K = 0.0315

            PKCstar2.s + RafRKIP.i <r[1]> RafRKIPPKCstar2.s >r[2]> PKCstar2.s + RKIPstar.i + Rafstar.i
            r[1].K = 0.625e6  , 0.00245
            r[2].K = 0.0315

            PKCstar3.s + RafRKIP.i <r[1]> RafRKIPPKCstar3.s >r[2]> PKCstar3.s + RKIPstar.i + Rafstar.i
            r[1].K = 0.625e6  , 0.00245
            r[2].K = 0.0315

            MEKRKIP.i + PKCstar.s <r[1]> MEKRKIPPKCstar.s >r[2]> MEKp.i + PKCstar.s + RKIPstar.i
            r[1].K = 0.625e6, 0.00245
            r[2].K = 0.0315

            MEKRKIP.i + PKCstar2.s <r[1]> MEKRKIPPKCstar2.s >r[2]> MEKp.i + PKCstar2.s + RKIPstar.i
            r[1].K = 0.625e6  , 0.00245
            r[2].K = 0.0315

            MEKRKIP.i + PKCstar3.s <r[1]> MEKRKIPPKCstar3.s >r[2]> MEKp.i + PKCstar3.s + RKIPstar.i
            r[1].K = 0.625e6  , 0.00245
            r[2].K = 0.0315

            MEKRKIP.i + PKCstar4.s <r[1]> MEKRKIPPKCstar4.s >r[2]> MEKp.i + PKCstar4.s + RKIPstar.i
            r[1].K = 0.625e6  , 0.00245
            r[2].K = 0.0315

            AMPAR.s + PKCstar.s <r[1]> PKCstarAMPAR.s >r[2]> AMPAR_P.s + PKCstar.s
            r[1].K = 0.4e6*(1.02e-12/1.87e-19), 0.8
            r[2].K = 0.3

            AMPAR.s + PKCstar2.s <r[1]> PKCstar2AMPAR.s >r[2]> AMPAR_P.s + PKCstar2.s
            r[1].K = 0.4e6*(1.02e-12/1.87e-19), 0.8
            r[2].K = 0.3

            AMPAR.s + PKCstar3.s <r[1]> PKCstar3AMPAR.s >r[2]> AMPAR_P.s + PKCstar3.s
            r[1].K = 0.4e6*(1.02e-12/1.87e-19)   , 0.8
            r[2].K = 0.3

            AMPAR.s + PKCstar4.s <r[1]> PKCstar4AMPAR.s >r[2]> AMPAR_P.s + PKCstar4.s
            r[1].K = 0.4e6*(1.02e-12/1.87e-19)  , 0.8 
            r[2].K = 0.3

            AMPAR_P.s + PP2A.i <r[1]> PP2AAMPAR_P.s >r[2]> AMPAR.s + PP2A.i
            r[1].K = 0.6e6, 0.17
            r[2].K = 0.25 

            GRIPAMPAR.s + PKCstar2.s <r[1]> PKCstar2GRIPAMPAR.s >r[2]> GRIPAMPAR_P.s + PKCstar2.s
            r[1].K = 0.4e6*(1.02e-12/1.87e-19), 0.8
            r[2].K = 0.3

            GRIPAMPAR.s + PKCstar3.s <r[1]> PKCstar3GRIPAMPAR.s >r[2]> GRIPAMPAR_P.s + PKCstar3.s
            r[1].K = 0.4e6*(1.02e-12/1.87e-19)   , 0.8
            r[2].K = 0.3

            GRIPAMPAR.s + PKCstar4.s <r[1]> PKCstar4GRIPAMPAR.s >r[2]> GRIPAMPAR_P.s + PKCstar4.s
            r[1].K = 0.4e6*(1.02e-12/1.87e-19)  , 0.8 
            r[2].K = 0.3

            AMPARextra_P.s + PP2A.i <r[1]> PP2AAMPARextra_P.s >r[2]> AMPARextra.s + PP2A.i
            r[1].K = 0.6e6, 0.17
            r[2].K = 0.25

            AMPARdend_P.s + PP2A.i <r[1]> PP2AAMPARdend_P.s >r[2]> AMPARdend.s + PP2A.i
            r[1].K = 0.6e6, 0.17
            r[2].K = 0.25

            PLA2star1.s <r[1]> Ca2PLA2.i
            r[1].K = 15, 300 

            Ca1PLA2star2memb.s <r[1]> Ca1PLA2star2.i
            r[1].K = 15, 30

            Ca2PLA2star2memb.s <r[1]> Ca2PLA2star2.i
            r[1].K = 15   , 300

            AA.i >r[1]> None
            r[1].K = .4

            PLA2.i <r[1]> PLA2memb.s
            r[1].K = 3, 15

        with ERmemb:
            2*Ca.o + SERCA.s <r[1]> Ca2SERCA.s >r[2]> 2*Ca.i + SERCA.s
            r[1].K = 3428.7485714376226e12 , 199.95577085780272
            r[2].K = 50
    
    return mdl

########################################################################

# Geometric properties of the model: To change the size of the model, 
# all volumetric compartments must be altered by the same ratio
# and all the areas must be scaled considering a spherical shape.
# Alterations in the size of the compartments will change automatically the population
# of species given in concentration (initial condition), but the species 
# given in number of molecules must be altered manually by the same ratio
# to keep the balance among all the components of the model. 

def gen_geom(mdl):    
    geom = Geometry()
    with geom:

        cytER, extra, cyto = Compartment.Create(
            Params(mdl.cytERsys, 0.017e-18),
            Params(mdl.extrasys, 1.87e-22), 
            Params(mdl.vsys, 0.08e-18)
        )

        memb, ERmemb = Patch.Create(
            Params(cyto, extra, mdl.memb, 1.02e-12), 
            Params(cytER, cyto, mdl.ERmemb, 0.32e-12)
        )
    
    return geom

######################################################################

def run_simulation():

    mdl = gen_model() 
    geom= gen_geom(mdl) 

    tpnts=numpy.arange(0.0,INT,DT)
    ntpnts=tpnts.shape[0]
    
    rng = RNG('mt19937', 512, int(idx)*100)

    sim = Simulation('Wmdirect', mdl, geom, rng)

    rs = ResultSelector(sim)

    # Data saving
    savers = {}
    if 'AMPAR' in data_record:
        savers['AMPAR'] = rs.ALL().MATCH('^.*AMPAR[^edc]*$').Count
    if 'Ca' in data_record:
        savers['Ca'] = rs.cyto.Ca.Conc
    if 'AA' in data_record:
        savers['AA'] = rs.ALL().MATCH('^AA(PKC|Ca1PKC|Ca3PKC)?$').Count
    if 'PKC' in data_record:
        savers['PKC'] = rs.ALL().MATCH('^.*PKCstar.*$').Count
    if 'ERK' in data_record:
        savers['ERK'] = rs.ALL().MATCH('^.*ERK(star|p).*$').Count
    if 'MEK' in data_record:
        savers['MEK'] = rs.ALL().MATCH('^.*MEK(star|p).*$').Count
    if 'PLA2' in data_record:
        savers['PLA2'] = rs.ALL().MATCH('^.*PLA2star.*$').Count
    if 'Raf' in data_record:
        savers['Raf'] = rs.ALL().MATCH('^.*Rafstar.*$').Count
    if 'RKIP' in data_record:
        savers['RKIP'] = rs.ALL().MATCH('^.*RKIPstar.*$').Count

    sim.toSave(*[sav for name, sav in savers.items()], dt=DT)

    # Save data to files
    for name, sav in savers.items():
        sav.toFile(os.path.join(datapath, f'{name}.dat'))

    # Simulation loop

    for j in arange(NITER): 
        print("Run number {0}".format(j))
        sim.newRun()

        # initial conditions
        sim.cyto.Ca.Conc = 0.045e-6
        sim.cyto.CBf.Conc = 37.775e-6
        sim.cyto.CaCBf.Conc = 2.1e-6
        sim.cyto.Ca2CBf.Conc = 0.125e-6
        sim.cyto.CBs.Conc = 36.25e-6
        sim.cyto.CaCBs.Conc = 3.4e-6
        sim.cyto.Ca2CBs.Conc = 0.125e-6
        sim.cyto.PV.Conc = 1.15e-6
        sim.cyto.CaPV.Conc = 8.4e-6
        sim.cyto.MgPV.Conc = 30.45e-6
        sim.cyto.PKC.Count = int(pkc_number)
        sim.cyto.Raf.Count = int(raf_number)
        sim.cyto.RKIP.Conc = 1.0e-6
        sim.cyto.MEK.Conc = 1.5e-6
        sim.cyto.RP.Conc = 3e-6
        sim.cyto.ERK.Conc = 1.0e-6
        sim.cyto.MKP.Conc = 0.26e-6
        sim.cyto.PP5.Conc = 1.0e-6
        sim.cyto.PP2A.Count = 35
        sim.cyto.PLA2.Conc = 0.4e-6
        sim.cyto.PP1.Count = 30
        sim.memb.PMCA.Count = 10
        sim.memb.NCX.Count = 3
        sim.ERmemb.SERCA.Count = 5
        sim.cytER.Ca.Conc = 150e-6
        sim.cytER.Ca.Clamped = True
        sim.memb.AMPAR.Count = 3
        sim.memb.AMPARextra.Count = 16
        sim.memb.GRIP.Count = 22
        sim.memb.GRIPAMPAR.Count = 72
        sim.memb.AMPARdend.Count = 1600
        
        for i in range(ntpnts):
            
            sim.run(tpnts[i]) 
            if not i%1000: print("idx:", idx, " percent done", (tpnts[i]/INT*100))

            sim.cyto.Cainflux.K = square_pulse_ica(tpnts[i])
            
#############################################################################

    if plotfigs:
        settings = {
            'Ca': {
                'plot': {'color': 'k'},
                'ylabel': 'Calcium (uM)',
                'xlim': (1190, 1260),
            },
            'AMPAR': {
                'plot': {'color': 'g'},
                'ylabel': 'Synaptic AMPAR (#)',
            },
            'AA': {
                'plot': {'color': 'b'},
                'ylabel': 'Arachidonic acid #',
            },
            'PKC': {
                'plot': {'color': 'r'},
                'ylabel': 'PKC (#)',
            },
            'ERK': {
                'plot': {'color': 'k'},
                'ylabel': 'ERK (#)',
            },
            'MEK': {
                'plot': {'color': 'k'},
                'ylabel': 'MEK (#)',
            },
            'PLA2': {
                'plot': {'color': 'y'},
                'ylabel': 'cPLA2 (#)',
            },
            'Raf': {
                'plot': {'color': 'm'},
                'ylabel': 'Raf (#)',
            },
            'RKIP': {
                'plot': {'color': 'r'},
                'ylabel': 'RKIP (#)',
            },
        }

        for name, sav in savers.items():
            data = numpy.sum(numpy.mean(sav.data, axis=0), axis=1)

            # Convert concentrations to uM if necessary
            if all([lbl.endswith('Conc') for lbl in sav.labels]):
                data *= 1e6

            plot(sav.time[0], data, **settings[name]['plot'])

            if 'xlim' in settings[name]:
                xlim(*settings[name]['xlim'])
            ylim(ymin=0.0)

            xlabel('Time [s]')
            ylabel(settings[name]['ylabel'])

            savefig(os.path.join(datapath, f'{name}_mean.png'))
            close()  


run_simulation()


