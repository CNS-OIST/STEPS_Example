{"get": {"Wmdirect": {"Compartment": {"Species": {"Count": {"@code": ["cnt = sim.comp.spec.Count"], "@doc": "<p> DEPRECATED Returns the number of molecules of a species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined count from all tetrahedral elements in the compartment.</p>"}, "Conc": {"@code": ["conc = sim.comp.spec.Conc"], "@doc": "<p> DEPRECATED Returns the concentration (in Molar units) of species with identifier string spec in compartment with identifier string comp.</p><p>Note: in a mesh-based simulation this is calculated from the combined number of molecules from all tetrahedral elements in the compartment and the total volume of the tetrahedrons.</p>"}, "Amount": {"@code": ["val = sim.comp.spec.Amount"], "@doc": "<p> DEPRECATED Returns the amount (in mols) of species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined amount from all tetrahedral elements in the compartment.</p>"}, "Clamped": {"@code": ["clamped = sim.comp.spec.Clamped"], "@doc": "<p> DEPRECATED Returns True if species with identifier string spec in compartment with identifier string comp is clamped, which means the concentration remains the same regardless of reactions that consume or produce molecules of this species. Returns False if not.</p><p>Note: in a mesh-based simulation it returns True only if the species is clamped in all tetrahedral elements of the compartment.</p>"}}, "Reaction": {"K": {"@code": ["val = sim.comp.reac['fwd'].K", "val = sim.comp.reac['bkw'].K"], "@doc": "<p> Returns the macroscopic reaction constant of reaction with identifier string reac in compartment with identifier string comp. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based simulation the value for the compartment is returned, although individual tetrahedral elements may have different values (set with setTetReacK).</p>"}, "Active": {"@code": ["active = sim.comp.reac['fwd'].Active", "active = sim.comp.reac['bkw'].Active"], "@doc": "<p> Returns whether a reaction with identifier string reac in compartment with identifier string comp is active (True) or not (False). If it's not active this means that a reaction will never occur regardless of whether the reactants are present in sufficient numbers or not.</p><p>Note: In a mesh-based simulation this method will return True only if the reaction is active in all tetrahedral elements in the compartment.</p>"}, "C": {"@code": ["val = sim.comp.reac['fwd'].C", "val = sim.comp.reac['bkw'].C"], "@doc": "<p> Returns the 'stochastic reaction constant' (or 'specific probability rate constant') of reaction with identifier string reac in compartment with identifier string comp.</p><p>The 'stochastic reaction constant' multiplied by infinitesimal time interval dt gives the average probability that one reaction channel of this reaction type will react accordingly in dt.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), the stochastic reaction constant is computed as the weighted mean of the stochastic reaction constants in all tetrahedral elements of the compartment.</p>"}, "H": {"@code": ["val = sim.comp.reac['fwd'].H", "val = sim.comp.reac['bkw'].H"], "@doc": "<p> Returns h_mu, the distinct number of ways in which reaction with identifier string reac can occur in compartment with identifier string comp, by computing the product of its reactants. Note: in a mesh-based simulation (i.e. Tetexact), returns the sum of the h_mu's over all tetrahedral elements in the compartment.</p>"}, "A": {"@code": ["val = sim.comp.reac['fwd'].A", "val = sim.comp.reac['bkw'].A"], "@doc": "<p> Returns the propensity of reaction with identifier string reac in compartment with identifier string comp.</p><p>The propensity of a reaction is a function of state and is defined as the function whose product with infinitesimal time dt gives the probability that the reaction will occur in the next dt. It is the 'stochastic reaction constant' multiplied by 'h_mu'.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), the propensity of a reaction in a compartment is computed as the sum of the propensities in all tetrahedral elements of the compartment.</p>"}, "Extent": {"@code": ["val = sim.comp.reac['fwd'].Extent", "val = sim.comp.reac['bkw'].Extent"], "@doc": "<p> Return the extent of reaction with identifier string reac in compartment with identifier string comp, that is the number of times the reaction has occurred up to the current simulation time.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), returns the sum of the reaction extents in all tetrahedral elements of the compartment.</p>"}}, "Vol": {"@code": ["val = sim.comp.Vol"], "@doc": "<p> Returns the volume of compartment with identifier string comp (in m^3).</p>"}}, "Patch": {"Species": {"Count": {"@code": ["cnt = sim.patch.spec.Count"], "@doc": "<p> DEPRECATED Returns the number of molecules of species with identifier string spec in patch with identifier string patch.Note: in a mesh-based simulation this is the combined count from all triangular elements in the patch.</p>"}, "Amount": {"@code": ["val = sim.patch.spec.Amount"], "@doc": "<p> DEPRECATED Returns the amount (in mols) of species with identifier string spec in patch with identifier string patch.</p><p>Note: in a mesh-based simulation this is the combined amount from all triangular elements in the patch.</p>"}, "Clamped": {"@code": ["clamped = sim.patch.spec.Clamped"], "@doc": "<p> DEPRECATED Sets the amount (in mols) of species with identifier string spec in patch with identifier string patch to a. In a discrete solver, such as Wmdirect and Tetexact, this continuous value is converted internally into a discrete number of molecules by multiplication with Avogadro's number.</p><p>Note: in a mesh-based simulation the molecules are divided as equally as possible over all triangular elements in the patch (i.e. a uniform distribution).</p>"}}, "Reaction": {"K": {"@code": ["val = sim.patch.sreac['fwd'].K", "val = sim.patch.sreac['bkw'].K"], "@doc": "<p> Returns the macroscopic reaction constant of surface reaction with identifier string sreac in patch with identifier string patch. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based solver the value for the patch is returned, although individual triangle elements may have different values (set with setTriSReacK).</p>"}, "Active": {"@code": ["active = sim.patch.sreac['fwd'].Active", "active = sim.patch.sreac['bkw'].Active"], "@doc": "<p> Returns whether a surface reaction with identifier string sreac in patch with identifier string patch is active (True) or not (False). If it's not active this means that a surface reaction will never occur regardless of whether the reactants are present in sufficient numbers or not.</p><p>Note: In a mesh-based simulation this method will return True only if the surface reaction is active in all triangular elements in the patch.</p>"}, "C": {"@code": ["val = sim.patch.sreac['fwd'].C", "val = sim.patch.sreac['bkw'].C"], "@doc": "<p> Returns the 'stochastic reaction constant' (or 'specific probability rate constant') of surface reaction with identifier string sreac in patch with identifier string patch.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), the stochastic reaction constant is computed as the weighted mean of the stochastic reaction constants in all triangular elements of the patch.</p>"}, "H": {"@code": ["val = sim.patch.sreac['fwd'].H", "val = sim.patch.sreac['bkw'].H"], "@doc": "<p> Returns h_mu, the distinct number of ways in which surface reaction with identifier string sreac can occur in patch with identifier string patch, by computing the product of its reactants. Note: in a mesh-based simulation (i.e. Tetexact), returns the sum of the h_mu's over all triangular elements in the patch.</p>"}, "A": {"@code": ["val = sim.patch.sreac['fwd'].A", "val = sim.patch.sreac['bkw'].A"], "@doc": "<p> Returns the propensity of surface reaction with identifier string sreac in patch with identifier string patch. Note: in a mesh-based simulation (i.e. Tetexact), the propensity of a surface reaction in a patch is computed as the sum of the propensities in all triangular elements of the patch.</p>"}, "Extent": {"@code": ["val = sim.patch.sreac['fwd'].Extent", "val = sim.patch.sreac['bkw'].Extent"], "@doc": "<p> Returns the extent of surface reaction with identifier string sreac in patch with identifier string patch, that is the number of times the surface reaction has occurred up to the current simulation time.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), returns the sum of the reaction extents in all triangular elements of the patch.</p>"}}, "Area": {"@code": ["val = sim.patch.Area"], "@doc": "<p> Returns the area of patch with identifier string patch (in m^2).</p>"}}}, "Wmrssa": {"Compartment": {"Species": {"Count": {"@code": ["cnt = sim.comp.spec.Count"], "@doc": "<p> DEPRECATED Returns the number of molecules of a species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined count from all tetrahedral elements in the compartment.</p>"}, "Conc": {"@code": ["conc = sim.comp.spec.Conc"], "@doc": "<p> DEPRECATED Returns the concentration (in Molar units) of species with identifier string spec in compartment with identifier string comp.</p><p>Note: in a mesh-based simulation this is calculated from the combined number of molecules from all tetrahedral elements in the compartment and the total volume of the tetrahedrons.</p>"}, "Amount": {"@code": ["val = sim.comp.spec.Amount"], "@doc": "<p> DEPRECATED Returns the amount (in mols) of species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined amount from all tetrahedral elements in the compartment.</p>"}, "Clamped": {"@code": ["clamped = sim.comp.spec.Clamped"], "@doc": "<p> DEPRECATED Returns True if species with identifier string spec in compartment with identifier string comp is clamped, which means the concentration remains the same regardless of reactions that consume or produce molecules of this species. Returns False if not.</p><p>Note: in a mesh-based simulation it returns True only if the species is clamped in all tetrahedral elements of the compartment.</p>"}}, "Reaction": {"K": {"@code": ["val = sim.comp.reac['fwd'].K", "val = sim.comp.reac['bkw'].K"], "@doc": "<p> Returns the macroscopic reaction constant of reaction with identifier string reac in compartment with identifier string comp. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based simulation the value for the compartment is returned, although individual tetrahedral elements may have different values (set with setTetReacK).</p>"}, "Active": {"@code": ["active = sim.comp.reac['fwd'].Active", "active = sim.comp.reac['bkw'].Active"], "@doc": "<p> Returns whether a reaction with identifier string reac in compartment with identifier string comp is active (True) or not (False). If it's not active this means that a reaction will never occur regardless of whether the reactants are present in sufficient numbers or not.</p><p>Note: In a mesh-based simulation this method will return True only if the reaction is active in all tetrahedral elements in the compartment.</p>"}, "C": {"@code": ["val = sim.comp.reac['fwd'].C", "val = sim.comp.reac['bkw'].C"], "@doc": "<p> Returns the 'stochastic reaction constant' (or 'specific probability rate constant') of reaction with identifier string reac in compartment with identifier string comp.</p><p>The 'stochastic reaction constant' multiplied by infinitesimal time interval dt gives the average probability that one reaction channel of this reaction type will react accordingly in dt.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), the stochastic reaction constant is computed as the weighted mean of the stochastic reaction constants in all tetrahedral elements of the compartment.</p>"}, "H": {"@code": ["val = sim.comp.reac['fwd'].H", "val = sim.comp.reac['bkw'].H"], "@doc": "<p> Returns h_mu, the distinct number of ways in which reaction with identifier string reac can occur in compartment with identifier string comp, by computing the product of its reactants. Note: in a mesh-based simulation (i.e. Tetexact), returns the sum of the h_mu's over all tetrahedral elements in the compartment.</p>"}, "A": {"@code": ["val = sim.comp.reac['fwd'].A", "val = sim.comp.reac['bkw'].A"], "@doc": "<p> Returns the propensity of reaction with identifier string reac in compartment with identifier string comp.</p><p>The propensity of a reaction is a function of state and is defined as the function whose product with infinitesimal time dt gives the probability that the reaction will occur in the next dt. It is the 'stochastic reaction constant' multiplied by 'h_mu'.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), the propensity of a reaction in a compartment is computed as the sum of the propensities in all tetrahedral elements of the compartment.</p>"}, "Extent": {"@code": ["val = sim.comp.reac['fwd'].Extent", "val = sim.comp.reac['bkw'].Extent"], "@doc": "<p> Return the extent of reaction with identifier string reac in compartment with identifier string comp, that is the number of times the reaction has occurred up to the current simulation time.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), returns the sum of the reaction extents in all tetrahedral elements of the compartment.</p>"}}, "Vol": {"@code": ["val = sim.comp.Vol"], "@doc": "<p> Returns the volume of compartment with identifier string comp (in m^3).</p>"}}, "Patch": {"Species": {"Count": {"@code": ["cnt = sim.patch.spec.Count"], "@doc": "<p> DEPRECATED Returns the number of molecules of species with identifier string spec in patch with identifier string patch.Note: in a mesh-based simulation this is the combined count from all triangular elements in the patch.</p>"}, "Amount": {"@code": ["val = sim.patch.spec.Amount"], "@doc": "<p> DEPRECATED Returns the amount (in mols) of species with identifier string spec in patch with identifier string patch.</p><p>Note: in a mesh-based simulation this is the combined amount from all triangular elements in the patch.</p>"}, "Clamped": {"@code": ["clamped = sim.patch.spec.Clamped"], "@doc": "<p> DEPRECATED Sets the amount (in mols) of species with identifier string spec in patch with identifier string patch to a. In a discrete solver, such as Wmdirect and Tetexact, this continuous value is converted internally into a discrete number of molecules by multiplication with Avogadro's number.</p><p>Note: in a mesh-based simulation the molecules are divided as equally as possible over all triangular elements in the patch (i.e. a uniform distribution).</p>"}}, "Reaction": {"K": {"@code": ["val = sim.patch.sreac['fwd'].K", "val = sim.patch.sreac['bkw'].K"], "@doc": "<p> Returns the macroscopic reaction constant of surface reaction with identifier string sreac in patch with identifier string patch. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based solver the value for the patch is returned, although individual triangle elements may have different values (set with setTriSReacK).</p>"}, "Active": {"@code": ["active = sim.patch.sreac['fwd'].Active", "active = sim.patch.sreac['bkw'].Active"], "@doc": "<p> Returns whether a surface reaction with identifier string sreac in patch with identifier string patch is active (True) or not (False). If it's not active this means that a surface reaction will never occur regardless of whether the reactants are present in sufficient numbers or not.</p><p>Note: In a mesh-based simulation this method will return True only if the surface reaction is active in all triangular elements in the patch.</p>"}, "C": {"@code": ["val = sim.patch.sreac['fwd'].C", "val = sim.patch.sreac['bkw'].C"], "@doc": "<p> Returns the 'stochastic reaction constant' (or 'specific probability rate constant') of surface reaction with identifier string sreac in patch with identifier string patch.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), the stochastic reaction constant is computed as the weighted mean of the stochastic reaction constants in all triangular elements of the patch.</p>"}, "H": {"@code": ["val = sim.patch.sreac['fwd'].H", "val = sim.patch.sreac['bkw'].H"], "@doc": "<p> Returns h_mu, the distinct number of ways in which surface reaction with identifier string sreac can occur in patch with identifier string patch, by computing the product of its reactants. Note: in a mesh-based simulation (i.e. Tetexact), returns the sum of the h_mu's over all triangular elements in the patch.</p>"}, "A": {"@code": ["val = sim.patch.sreac['fwd'].A", "val = sim.patch.sreac['bkw'].A"], "@doc": "<p> Returns the propensity of surface reaction with identifier string sreac in patch with identifier string patch. Note: in a mesh-based simulation (i.e. Tetexact), the propensity of a surface reaction in a patch is computed as the sum of the propensities in all triangular elements of the patch.</p>"}, "Extent": {"@code": ["val = sim.patch.sreac['fwd'].Extent", "val = sim.patch.sreac['bkw'].Extent"], "@doc": "<p> Returns the extent of surface reaction with identifier string sreac in patch with identifier string patch, that is the number of times the surface reaction has occurred up to the current simulation time.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), returns the sum of the reaction extents in all triangular elements of the patch.</p>"}}, "Area": {"@code": ["val = sim.patch.Area"], "@doc": "<p> Returns the area of patch with identifier string patch (in m^2).</p>"}}}, "Wmrk4": {"Compartment": {"Species": {"Count": {"@code": ["cnt = sim.comp.spec.Count"], "@doc": "<p> DEPRECATED Returns the number of molecules of a species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined count from all tetrahedral elements in the compartment.</p>"}, "Conc": {"@code": ["conc = sim.comp.spec.Conc"], "@doc": "<p> DEPRECATED Returns the concentration (in Molar units) of species with identifier string spec in compartment with identifier string comp.</p><p>Note: in a mesh-based simulation this is calculated from the combined number of molecules from all tetrahedral elements in the compartment and the total volume of the tetrahedrons.</p>"}, "Amount": {"@code": ["val = sim.comp.spec.Amount"], "@doc": "<p> DEPRECATED Returns the amount (in mols) of species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined amount from all tetrahedral elements in the compartment.</p>"}, "Clamped": {"@code": ["clamped = sim.comp.spec.Clamped"], "@doc": "<p> DEPRECATED Returns True if species with identifier string spec in compartment with identifier string comp is clamped, which means the concentration remains the same regardless of reactions that consume or produce molecules of this species. Returns False if not.</p><p>Note: in a mesh-based simulation it returns True only if the species is clamped in all tetrahedral elements of the compartment.</p>"}}, "Reaction": {"K": {"@code": ["val = sim.comp.reac['fwd'].K", "val = sim.comp.reac['bkw'].K"], "@doc": "<p> Returns the macroscopic reaction constant of reaction with identifier string reac in compartment with identifier string comp. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based simulation the value for the compartment is returned, although individual tetrahedral elements may have different values (set with setTetReacK).</p>"}, "Active": {"@code": ["active = sim.comp.reac['fwd'].Active", "active = sim.comp.reac['bkw'].Active"], "@doc": "<p> Returns whether a reaction with identifier string reac in compartment with identifier string comp is active (True) or not (False). If it's not active this means that a reaction will never occur regardless of whether the reactants are present in sufficient numbers or not.</p><p>Note: In a mesh-based simulation this method will return True only if the reaction is active in all tetrahedral elements in the compartment.</p>"}, "C": {"@code": ["val = sim.comp.reac['fwd'].C", "val = sim.comp.reac['bkw'].C"], "@doc": "<p> Returns the 'stochastic reaction constant' (or 'specific probability rate constant') of reaction with identifier string reac in compartment with identifier string comp.</p><p>The 'stochastic reaction constant' multiplied by infinitesimal time interval dt gives the average probability that one reaction channel of this reaction type will react accordingly in dt.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), the stochastic reaction constant is computed as the weighted mean of the stochastic reaction constants in all tetrahedral elements of the compartment.</p>"}, "H": {"@code": ["val = sim.comp.reac['fwd'].H", "val = sim.comp.reac['bkw'].H"], "@doc": "<p> Returns h_mu, the distinct number of ways in which reaction with identifier string reac can occur in compartment with identifier string comp, by computing the product of its reactants. Note: in a mesh-based simulation (i.e. Tetexact), returns the sum of the h_mu's over all tetrahedral elements in the compartment.</p>"}, "A": {"@code": ["val = sim.comp.reac['fwd'].A", "val = sim.comp.reac['bkw'].A"], "@doc": "<p> Returns the propensity of reaction with identifier string reac in compartment with identifier string comp.</p><p>The propensity of a reaction is a function of state and is defined as the function whose product with infinitesimal time dt gives the probability that the reaction will occur in the next dt. It is the 'stochastic reaction constant' multiplied by 'h_mu'.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), the propensity of a reaction in a compartment is computed as the sum of the propensities in all tetrahedral elements of the compartment.</p>"}, "Extent": {"@code": ["val = sim.comp.reac['fwd'].Extent", "val = sim.comp.reac['bkw'].Extent"], "@doc": "<p> Return the extent of reaction with identifier string reac in compartment with identifier string comp, that is the number of times the reaction has occurred up to the current simulation time.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), returns the sum of the reaction extents in all tetrahedral elements of the compartment.</p>"}}, "Vol": {"@code": ["val = sim.comp.Vol"], "@doc": "<p> Returns the volume of compartment with identifier string comp (in m^3).</p>"}}, "Patch": {"Species": {"Count": {"@code": ["cnt = sim.patch.spec.Count"], "@doc": "<p> DEPRECATED Returns the number of molecules of species with identifier string spec in patch with identifier string patch.Note: in a mesh-based simulation this is the combined count from all triangular elements in the patch.</p>"}, "Amount": {"@code": ["val = sim.patch.spec.Amount"], "@doc": "<p> DEPRECATED Returns the amount (in mols) of species with identifier string spec in patch with identifier string patch.</p><p>Note: in a mesh-based simulation this is the combined amount from all triangular elements in the patch.</p>"}, "Clamped": {"@code": ["clamped = sim.patch.spec.Clamped"], "@doc": "<p> DEPRECATED Sets the amount (in mols) of species with identifier string spec in patch with identifier string patch to a. In a discrete solver, such as Wmdirect and Tetexact, this continuous value is converted internally into a discrete number of molecules by multiplication with Avogadro's number.</p><p>Note: in a mesh-based simulation the molecules are divided as equally as possible over all triangular elements in the patch (i.e. a uniform distribution).</p>"}}, "Reaction": {"K": {"@code": ["val = sim.patch.sreac['fwd'].K", "val = sim.patch.sreac['bkw'].K"], "@doc": "<p> Returns the macroscopic reaction constant of surface reaction with identifier string sreac in patch with identifier string patch. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based solver the value for the patch is returned, although individual triangle elements may have different values (set with setTriSReacK).</p>"}, "Active": {"@code": ["active = sim.patch.sreac['fwd'].Active", "active = sim.patch.sreac['bkw'].Active"], "@doc": "<p> Returns whether a surface reaction with identifier string sreac in patch with identifier string patch is active (True) or not (False). If it's not active this means that a surface reaction will never occur regardless of whether the reactants are present in sufficient numbers or not.</p><p>Note: In a mesh-based simulation this method will return True only if the surface reaction is active in all triangular elements in the patch.</p>"}, "C": {"@code": ["val = sim.patch.sreac['fwd'].C", "val = sim.patch.sreac['bkw'].C"], "@doc": "<p> Returns the 'stochastic reaction constant' (or 'specific probability rate constant') of surface reaction with identifier string sreac in patch with identifier string patch.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), the stochastic reaction constant is computed as the weighted mean of the stochastic reaction constants in all triangular elements of the patch.</p>"}, "H": {"@code": ["val = sim.patch.sreac['fwd'].H", "val = sim.patch.sreac['bkw'].H"], "@doc": "<p> Returns h_mu, the distinct number of ways in which surface reaction with identifier string sreac can occur in patch with identifier string patch, by computing the product of its reactants. Note: in a mesh-based simulation (i.e. Tetexact), returns the sum of the h_mu's over all triangular elements in the patch.</p>"}, "A": {"@code": ["val = sim.patch.sreac['fwd'].A", "val = sim.patch.sreac['bkw'].A"], "@doc": "<p> Returns the propensity of surface reaction with identifier string sreac in patch with identifier string patch. Note: in a mesh-based simulation (i.e. Tetexact), the propensity of a surface reaction in a patch is computed as the sum of the propensities in all triangular elements of the patch.</p>"}, "Extent": {"@code": ["val = sim.patch.sreac['fwd'].Extent", "val = sim.patch.sreac['bkw'].Extent"], "@doc": "<p> Returns the extent of surface reaction with identifier string sreac in patch with identifier string patch, that is the number of times the surface reaction has occurred up to the current simulation time.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), returns the sum of the reaction extents in all triangular elements of the patch.</p>"}}, "Area": {"@code": ["val = sim.patch.Area"], "@doc": "<p> Returns the area of patch with identifier string patch (in m^2).</p>"}}}, "Tetexact": {"Compartment": {"Species": {"Count": {"@code": ["cnt = sim.comp.spec.Count"], "@doc": "<p> DEPRECATED Returns the number of molecules of a species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined count from all tetrahedral elements in the compartment.</p>"}, "Conc": {"@code": ["conc = sim.comp.spec.Conc"], "@doc": "<p> DEPRECATED Returns the concentration (in Molar units) of species with identifier string spec in compartment with identifier string comp.</p><p>Note: in a mesh-based simulation this is calculated from the combined number of molecules from all tetrahedral elements in the compartment and the total volume of the tetrahedrons.</p>"}, "Amount": {"@code": ["val = sim.comp.spec.Amount"], "@doc": "<p> DEPRECATED Returns the amount (in mols) of species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined amount from all tetrahedral elements in the compartment.</p>"}, "Clamped": {"@code": ["clamped = sim.comp.spec.Clamped"], "@doc": "<p> DEPRECATED Returns True if species with identifier string spec in compartment with identifier string comp is clamped, which means the concentration remains the same regardless of reactions that consume or produce molecules of this species. Returns False if not.</p><p>Note: in a mesh-based simulation it returns True only if the species is clamped in all tetrahedral elements of the compartment.</p>"}}, "Reaction": {"K": {"@code": ["val = sim.comp.reac['fwd'].K", "val = sim.comp.reac['bkw'].K"], "@doc": "<p> Returns the macroscopic reaction constant of reaction with identifier string reac in compartment with identifier string comp. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based simulation the value for the compartment is returned, although individual tetrahedral elements may have different values (set with setTetReacK).</p>"}, "Active": {"@code": ["active = sim.comp.reac['fwd'].Active", "active = sim.comp.reac['bkw'].Active"], "@doc": "<p> Returns whether a reaction with identifier string reac in compartment with identifier string comp is active (True) or not (False). If it's not active this means that a reaction will never occur regardless of whether the reactants are present in sufficient numbers or not.</p><p>Note: In a mesh-based simulation this method will return True only if the reaction is active in all tetrahedral elements in the compartment.</p>"}, "C": {"@code": ["val = sim.comp.reac['fwd'].C", "val = sim.comp.reac['bkw'].C"], "@doc": "<p> Returns the 'stochastic reaction constant' (or 'specific probability rate constant') of reaction with identifier string reac in compartment with identifier string comp.</p><p>The 'stochastic reaction constant' multiplied by infinitesimal time interval dt gives the average probability that one reaction channel of this reaction type will react accordingly in dt.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), the stochastic reaction constant is computed as the weighted mean of the stochastic reaction constants in all tetrahedral elements of the compartment.</p>"}, "H": {"@code": ["val = sim.comp.reac['fwd'].H", "val = sim.comp.reac['bkw'].H"], "@doc": "<p> Returns h_mu, the distinct number of ways in which reaction with identifier string reac can occur in compartment with identifier string comp, by computing the product of its reactants. Note: in a mesh-based simulation (i.e. Tetexact), returns the sum of the h_mu's over all tetrahedral elements in the compartment.</p>"}, "A": {"@code": ["val = sim.comp.reac['fwd'].A", "val = sim.comp.reac['bkw'].A"], "@doc": "<p> Returns the propensity of reaction with identifier string reac in compartment with identifier string comp.</p><p>The propensity of a reaction is a function of state and is defined as the function whose product with infinitesimal time dt gives the probability that the reaction will occur in the next dt. It is the 'stochastic reaction constant' multiplied by 'h_mu'.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), the propensity of a reaction in a compartment is computed as the sum of the propensities in all tetrahedral elements of the compartment.</p>"}, "Extent": {"@code": ["val = sim.comp.reac['fwd'].Extent", "val = sim.comp.reac['bkw'].Extent"], "@doc": "<p> Return the extent of reaction with identifier string reac in compartment with identifier string comp, that is the number of times the reaction has occurred up to the current simulation time.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), returns the sum of the reaction extents in all tetrahedral elements of the compartment.</p>"}}, "Diffusion": {"Active": {"@code": ["active = sim.comp.diff.Active"], "@doc": "<p> Returns whether a diffusion rule with identifier string diff in compartment with identifier string comp is active (True) or not (False). If diffusion of a species is inactive this means the molecules will remain in place and has the same effect as a diffusion constant of zero.</p>"}, "D": {"@code": ["dcst = sim.comp.diff.D"], "@doc": "<p> Returns the diffusion constant of diffusion rule with identifier string diff in compartment with identifier string comp. This constant is in units m^2/s.</p><p>Note: In a mesh-based solver the value for the compartment is returned, although individual or groups of tetrahedral elements may have different values (set with setTetDiffD).</p>"}}, "Vol": {"@code": ["val = sim.comp.Vol"], "@doc": "<p> Returns the volume of compartment with identifier string comp (in m^3).</p>"}}, "Patch": {"Species": {"Count": {"@code": ["cnt = sim.patch.spec.Count"], "@doc": "<p> DEPRECATED Returns the number of molecules of species with identifier string spec in patch with identifier string patch.Note: in a mesh-based simulation this is the combined count from all triangular elements in the patch.</p>"}, "Amount": {"@code": ["val = sim.patch.spec.Amount"], "@doc": "<p> DEPRECATED Returns the amount (in mols) of species with identifier string spec in patch with identifier string patch.</p><p>Note: in a mesh-based simulation this is the combined amount from all triangular elements in the patch.</p>"}, "Clamped": {"@code": ["clamped = sim.patch.spec.Clamped"], "@doc": "<p> DEPRECATED Sets the amount (in mols) of species with identifier string spec in patch with identifier string patch to a. In a discrete solver, such as Wmdirect and Tetexact, this continuous value is converted internally into a discrete number of molecules by multiplication with Avogadro's number.</p><p>Note: in a mesh-based simulation the molecules are divided as equally as possible over all triangular elements in the patch (i.e. a uniform distribution).</p>"}}, "Reaction": {"K": {"@code": ["val = sim.patch.sreac['fwd'].K", "val = sim.patch.sreac['bkw'].K"], "@doc": "<p> Returns the macroscopic reaction constant of surface reaction with identifier string sreac in patch with identifier string patch. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based solver the value for the patch is returned, although individual triangle elements may have different values (set with setTriSReacK).</p>"}, "Active": {"@code": ["active = sim.patch.sreac['fwd'].Active", "active = sim.patch.sreac['bkw'].Active"], "@doc": "<p> Returns whether a surface reaction with identifier string sreac in patch with identifier string patch is active (True) or not (False). If it's not active this means that a surface reaction will never occur regardless of whether the reactants are present in sufficient numbers or not.</p><p>Note: In a mesh-based simulation this method will return True only if the surface reaction is active in all triangular elements in the patch.</p>"}, "C": {"@code": ["val = sim.patch.sreac['fwd'].C", "val = sim.patch.sreac['bkw'].C"], "@doc": "<p> Returns the 'stochastic reaction constant' (or 'specific probability rate constant') of surface reaction with identifier string sreac in patch with identifier string patch.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), the stochastic reaction constant is computed as the weighted mean of the stochastic reaction constants in all triangular elements of the patch.</p>"}, "H": {"@code": ["val = sim.patch.sreac['fwd'].H", "val = sim.patch.sreac['bkw'].H"], "@doc": "<p> Returns h_mu, the distinct number of ways in which surface reaction with identifier string sreac can occur in patch with identifier string patch, by computing the product of its reactants. Note: in a mesh-based simulation (i.e. Tetexact), returns the sum of the h_mu's over all triangular elements in the patch.</p>"}, "A": {"@code": ["val = sim.patch.sreac['fwd'].A", "val = sim.patch.sreac['bkw'].A"], "@doc": "<p> Returns the propensity of surface reaction with identifier string sreac in patch with identifier string patch. Note: in a mesh-based simulation (i.e. Tetexact), the propensity of a surface reaction in a patch is computed as the sum of the propensities in all triangular elements of the patch.</p>"}, "Extent": {"@code": ["val = sim.patch.sreac['fwd'].Extent", "val = sim.patch.sreac['bkw'].Extent"], "@doc": "<p> Returns the extent of surface reaction with identifier string sreac in patch with identifier string patch, that is the number of times the surface reaction has occurred up to the current simulation time.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), returns the sum of the reaction extents in all triangular elements of the patch.</p>"}}, "Area": {"@code": ["val = sim.patch.Area"], "@doc": "<p> Returns the area of patch with identifier string patch (in m^2).</p>"}}, "Diff. Boundary": {"Species": {"DiffusionActive": {"@code": ["val = sim.diffb.spec.DiffusionActive"], "@doc": "<p> DEPRECATED Returns whether diffusion is active across a diffusion boundary for a species.</p>"}}}, "Surf. Diff. Boundary": {"Species": {"DiffusionActive": {"@code": ["val = sim.sdiffb.spec.DiffusionActive"], "@doc": "<p> DEPRECATED Returns whether diffusion is active across a surface diffusion boundary for a species.</p>"}}}, "Region of Interest": {"Species": {"Count": {"@code": ["cnt = sim.roi.spec.Count"], "@doc": "<p> DEPRECATED Get the count of a species in a ROI.</p>"}, "Conc": {"@code": ["conc = sim.roi.spec.Conc"], "@doc": "<p> DEPRECATED Get the concentration of a species in a ROI.</p>"}, "Amount": {"@code": ["val = sim.roi.spec.Amount"], "@doc": "<p> DEPRECATED Get the amount of a species in a ROI.</p>"}}, "Reaction": {"Extent": {"@code": ["val = sim.roi.reac['fwd'].Extent", "val = sim.roi.reac['bkw'].Extent"], "@doc": "<p> Return the extent of reaction with identifier string reac in ROI with identifier string roi, that is the number of times the reaction has occurred up to the current simulation time.</p>"}}, "Diffusion": {"Extent": {"@code": ["val = sim.roi.diff.Extent"], "@doc": "<p> Return the extent of diffusion with identifier string diff in ROI with identifier string roi, that is the number of times the diffusion has occurred up to the current simulation time.</p>"}}, "Area": {"@code": ["val = sim.roi.Area"], "@doc": "<p> Get the area of a ROI.</p>"}, "Vol": {"@code": ["val = sim.roi.Vol"], "@doc": "<p> Get the volume of a ROI.</p>"}}, "Tetrahedron": {"Species": {"Count": {"@code": ["cnt = sim.TET(tet).spec.Count", "cnt = sim.TETS(tetLst).spec.Count"], "@doc": "<p> DEPRECATED Returns the number of molecules of species with identifier string spec in the tetrahedral element tet.</p>"}, "Conc": {"@code": ["conc = sim.TET(tet).spec.Conc", "conc = sim.TETS(tetLst).spec.Conc"], "@doc": "<p> DEPRECATED Returns the concentration (in Molar units) of species with identifier string spec in a tetrahedral element tet.</p>"}, "Amount": {"@code": ["val = sim.TET(tet).spec.Amount", "val = sim.TETS(tetLst).spec.Amount"], "@doc": "<p> DEPRECATED Returns the amount (in mols) of species with identifier string spec in tetrahedral element tet.</p>"}, "Clamped": {"@code": ["clamped = sim.TET(tet).spec.Clamped", "clamped = sim.TETS(tetLst).spec.Clamped"], "@doc": "<p> DEPRECATED Returns True if concentration of species with identifier string spec in tetrahedral element tet is clamped, which means the concentration stays the same regardless of reactions that consume or produce molecules of this species or diffusion of this species into or out of the tetrahedral element. Returns False if not.</p>"}}, "Reaction": {"K": {"@code": ["val = sim.TET(tet).reac['fwd'].K", "val = sim.TET(tet).reac['bkw'].K", "val = sim.TETS(tetLst).reac['fwd'].K", "val = sim.TETS(tetLst).reac['bkw'].K"], "@doc": "<p> Returns the macroscopic reaction constant of reaction with identifier string reac in tetrahedral element tet. The unit of the reaction constant depends on the order of the reaction.</p>"}, "Active": {"@code": ["active = sim.TET(tet).reac['fwd'].Active", "active = sim.TET(tet).reac['bkw'].Active", "active = sim.TETS(tetLst).reac['fwd'].Active", "active = sim.TETS(tetLst).reac['bkw'].Active"], "@doc": "<p> Returns whether reaction with identifier string reac in tetrahedral element tet is active (True) or not (False). If it's not active this means that the reaction will never occur regardless of whether reactants are present in sufficient numbers or not.</p>"}, "C": {"@code": ["val = sim.TET(tet).reac['fwd'].C", "val = sim.TET(tet).reac['bkw'].C", "val = sim.TETS(tetLst).reac['fwd'].C", "val = sim.TETS(tetLst).reac['bkw'].C"], "@doc": "<p> Returns the 'stochastic reaction constant' (or 'specific probability rate constant') of reaction with identifier string reac in tetrahedral element tet.</p>"}, "H": {"@code": ["val = sim.TET(tet).reac['fwd'].H", "val = sim.TET(tet).reac['bkw'].H", "val = sim.TETS(tetLst).reac['fwd'].H", "val = sim.TETS(tetLst).reac['bkw'].H"], "@doc": "<p> Returns h_mu, the distinct number of ways in which reaction with identifier string reac can occur in tetrahedral element tet, by computing the product of its reactants.</p>"}, "A": {"@code": ["val = sim.TET(tet).reac['fwd'].A", "val = sim.TET(tet).reac['bkw'].A", "val = sim.TETS(tetLst).reac['fwd'].A", "val = sim.TETS(tetLst).reac['bkw'].A"], "@doc": "<p> Returns the propensity of reaction with identifier string reac in tetrahedral element tet.</p>"}}, "Diffusion": {"Active": {"@code": ["active = sim.TET(tet).diff.Active", "active = sim.TETS(tetLst).diff.Active"], "@doc": "<p> Returns whether diffusion with identifier string diff in tetrahedral element tet is active (True) or not (False). If diffusion of a species is inactive this means the molecules will never diffuse out of the tetrahedron and has the same effect as a diffusion constant of zero.</p>"}, "D": {"@code": ["dcst = sim.TET(tet).diff.D", "dcst = sim.TET(tet).diff(direc=tet2).D", "dcst = sim.TETS(tetLst).diff.D"], "@doc": "<p> Returns the diffusion constant of diffusion rule with identifier string diff in tetrahedral element tet. This constant is in units m^2/s. If direc is specified, return the diffusion constant towards that direction.</p>"}, "A": {"@code": ["val = sim.TET(tet).diff.A", "val = sim.TETS(tetLst).diff.A"], "@doc": "<p> Returns the propensity of diffusion rule with identifier string diff in tetrahedral element tet.</p>"}}, "Vol": {"@code": ["val = sim.TET(tet).Vol", "val = sim.TETS(tetLst).Vol"], "@doc": "<p> Returns the volume (in m^3) of the tetrahedral element tet.</p>"}, "V": {"@code": ["val = sim.TET(tet).V", "val = sim.TETS(tetLst).V"], "@doc": "<p> Returns the potential (in volts) of tetrahedral element tet, taken at the barycenter.</p>"}, "VClamped": {"@code": ["clamped = sim.TET(tet).VClamped", "clamped = sim.TETS(tetLst).VClamped"], "@doc": "<p> Returns true if the potential of tetrahedral element tet is clamped to some voltage.</p>"}}, "Triangle": {"Species": {"Count": {"@code": ["cnt = sim.TRI(tri).spec.Count", "cnt = sim.TRIS(triLst).spec.Count"], "@doc": "<p> DEPRECATED Returns the number of molecules of species with identifier string spec in the triangular element tri.</p>"}, "Amount": {"@code": ["val = sim.TRI(tri).spec.Amount", "val = sim.TRIS(triLst).spec.Amount"], "@doc": "<p> DEPRECATED Returns the amount (in mols) of species with identifier string spec in triangular element tri.</p>"}, "Clamped": {"@code": ["clamped = sim.TRI(tri).spec.Clamped", "clamped = sim.TRIS(triLst).spec.Clamped"], "@doc": "<p> DEPRECATED Returns True if the species with identifier string spec in triangular element tri is clamped, which means the number of molecules stays the same regardless of reactions that consume or produce molecules of this species. Returns False if not.</p>"}}, "I": {"@code": ["val = sim.TRI(tri).I", "val = sim.TRIS(triLst).I"], "@doc": "<p> Returns the current of triangle element tri, in amps, at the last EField calculation step.</p>"}, "Reaction": {"K": {"@code": ["val = sim.TRI(tri).sreac['fwd'].K", "val = sim.TRI(tri).sreac['bkw'].K", "val = sim.TRIS(triLst).sreac['fwd'].K", "val = sim.TRIS(triLst).sreac['bkw'].K"], "@doc": "<p> Returns the macroscopic reaction constant of surface reaction with identifier string sreac in triangular element tri. The units of the reaction constant depends on the order of the reaction.</p>"}, "Active": {"@code": ["active = sim.TRI(tri).sreac['fwd'].Active", "active = sim.TRI(tri).sreac['bkw'].Active", "active = sim.TRIS(triLst).sreac['fwd'].Active", "active = sim.TRIS(triLst).sreac['bkw'].Active"], "@doc": "<p> Returns whether surface reaction with identifier string sreac in triangular element tri is active (True) or not (False). If it's not active this means that the surface reaction will never occur regardless of whether reactants are present in sufficient numbers or not.</p>"}, "C": {"@code": ["val = sim.TRI(tri).sreac['fwd'].C", "val = sim.TRI(tri).sreac['bkw'].C", "val = sim.TRIS(triLst).sreac['fwd'].C", "val = sim.TRIS(triLst).sreac['bkw'].C"], "@doc": "<p> Returns the 'stochastic reaction constant' (or 'specific probability rate constant') of surface reaction with identifier string sreac in triangular element tri.</p>"}, "H": {"@code": ["val = sim.TRI(tri).sreac['fwd'].H", "val = sim.TRI(tri).sreac['bkw'].H", "val = sim.TRIS(triLst).sreac['fwd'].H", "val = sim.TRIS(triLst).sreac['bkw'].H"], "@doc": "<p> Returns h_mu, the distinct number of ways in which surface reaction with identifier string sreac can occur in triangular element tri, by computing the product of its reactants.</p>"}, "A": {"@code": ["val = sim.TRI(tri).sreac['fwd'].A", "val = sim.TRI(tri).sreac['bkw'].A", "val = sim.TRIS(triLst).sreac['fwd'].A", "val = sim.TRIS(triLst).sreac['bkw'].A"], "@doc": "<p> Returns the propensity of surface reaction with identifier string sreac in triangular element tri.</p>"}}, "Diffusion": {"D": {"@code": ["dcst = sim.TRI(tri).sdiff.D", "dcst = sim.TRI(tri).sdiff(direc=tri2).D", "dcst = sim.TRIS(triLst).sdiff.D"], "@doc": "<p> Returns the diffusion constant of diffusion rule with identifier string diff in triangle element tri. If direc is specified, return the diffusion constant towards that direction.</p>"}}, "Current": {"I": {"@code": ["val = sim.TRI(tri).curr.I", "val = sim.TRIS(triLst).curr.I"], "@doc": "<p> Returns the ohmic or GHK current with string identifier curr of triangle element tri, in amps.</p>"}}, "Area": {"@code": ["val = sim.TRI(tri).Area", "val = sim.TRIS(triLst).Area"], "@doc": "<p> Returns the area (in m^2) of the triangular element tri.</p>"}, "V": {"@code": ["val = sim.TRI(tri).V", "val = sim.TRIS(triLst).V"], "@doc": "<p> Returns the potential (in volts) of triangle element tri, taken at the barycenter.</p>"}, "VClamped": {"@code": ["clamped = sim.TRI(tri).VClamped", "clamped = sim.TRIS(triLst).VClamped"], "@doc": "<p> Returns true if the potential of triangle element tri is clamped to some voltage.</p>"}, "IClamp": {"@code": ["val = sim.TRI(tri).IClamp", "val = sim.TRIS(triLst).IClamp"], "@doc": "<p> Get current clamp to triangle element tri. NOTE: Convention is maintained that a positive current clamp is depolarizing, a negative current clamp is hyperpolarizing.</p>"}}, "Membrane": {"Res": {"@code": ["ro, vrev = sim.memb.Res"], "@doc": "<p> Gets the surface electrical resistivity (ro) in ohm.m^2 of the membrane with string identifier memb, and the reversal potential (vrev) in Volts.</p>"}}, "Vertex": {"V": {"@code": ["val = sim.VERT(vert).V", "val = sim.VERTS(vertLst).V"], "@doc": "<p> Returns the potential (in volts) of vertex element vert.</p>"}, "VClamped": {"@code": ["clamped = sim.VERT(vert).VClamped", "clamped = sim.VERTS(vertLst).VClamped"], "@doc": "<p> Returns true if the potential of vertex element vert is clamped to some voltage.</p>"}, "IClamp": {"@code": ["val = sim.VERT(vert).IClamp", "val = sim.VERTS(vertLst).IClamp"], "@doc": "<p> Get current clamp to vertex element with index vidx (Amps). NOTE: Convention is maintained that a positive current clamp is depolarizing, a negative current clamp is hyperpolarizing.</p>"}}}, "TetODE": {"Compartment": {"Species": {"Count": {"@code": ["cnt = sim.comp.spec.Count"], "@doc": "<p> DEPRECATED Returns the number of molecules of a species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined count from all tetrahedral elements in the compartment.</p>"}, "Conc": {"@code": ["conc = sim.comp.spec.Conc"], "@doc": "<p> DEPRECATED Returns the concentration (in Molar units) of species with identifier string spec in compartment with identifier string comp.</p><p>Note: in a mesh-based simulation this is calculated from the combined number of molecules from all tetrahedral elements in the compartment and the total volume of the tetrahedrons.</p>"}, "Amount": {"@code": ["val = sim.comp.spec.Amount"], "@doc": "<p> DEPRECATED Returns the amount (in mols) of species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined amount from all tetrahedral elements in the compartment.</p>"}, "Clamped": {"@code": ["clamped = sim.comp.spec.Clamped"], "@doc": "<p> DEPRECATED Returns True if species with identifier string spec in compartment with identifier string comp is clamped, which means the concentration remains the same regardless of reactions that consume or produce molecules of this species. Returns False if not.</p><p>Note: in a mesh-based simulation it returns True only if the species is clamped in all tetrahedral elements of the compartment.</p>"}}, "Reaction": {"K": {"@code": ["val = sim.comp.reac['fwd'].K", "val = sim.comp.reac['bkw'].K"], "@doc": "<p> Returns the macroscopic reaction constant of reaction with identifier string reac in compartment with identifier string comp. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based simulation the value for the compartment is returned, although individual tetrahedral elements may have different values (set with setTetReacK).</p>"}, "Active": {"@code": ["active = sim.comp.reac['fwd'].Active", "active = sim.comp.reac['bkw'].Active"], "@doc": "<p> Returns whether a reaction with identifier string reac in compartment with identifier string comp is active (True) or not (False). If it's not active this means that a reaction will never occur regardless of whether the reactants are present in sufficient numbers or not.</p><p>Note: In a mesh-based simulation this method will return True only if the reaction is active in all tetrahedral elements in the compartment.</p>"}, "C": {"@code": ["val = sim.comp.reac['fwd'].C", "val = sim.comp.reac['bkw'].C"], "@doc": "<p> Returns the 'stochastic reaction constant' (or 'specific probability rate constant') of reaction with identifier string reac in compartment with identifier string comp.</p><p>The 'stochastic reaction constant' multiplied by infinitesimal time interval dt gives the average probability that one reaction channel of this reaction type will react accordingly in dt.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), the stochastic reaction constant is computed as the weighted mean of the stochastic reaction constants in all tetrahedral elements of the compartment.</p>"}, "H": {"@code": ["val = sim.comp.reac['fwd'].H", "val = sim.comp.reac['bkw'].H"], "@doc": "<p> Returns h_mu, the distinct number of ways in which reaction with identifier string reac can occur in compartment with identifier string comp, by computing the product of its reactants. Note: in a mesh-based simulation (i.e. Tetexact), returns the sum of the h_mu's over all tetrahedral elements in the compartment.</p>"}, "A": {"@code": ["val = sim.comp.reac['fwd'].A", "val = sim.comp.reac['bkw'].A"], "@doc": "<p> Returns the propensity of reaction with identifier string reac in compartment with identifier string comp.</p><p>The propensity of a reaction is a function of state and is defined as the function whose product with infinitesimal time dt gives the probability that the reaction will occur in the next dt. It is the 'stochastic reaction constant' multiplied by 'h_mu'.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), the propensity of a reaction in a compartment is computed as the sum of the propensities in all tetrahedral elements of the compartment.</p>"}, "Extent": {"@code": ["val = sim.comp.reac['fwd'].Extent", "val = sim.comp.reac['bkw'].Extent"], "@doc": "<p> Return the extent of reaction with identifier string reac in compartment with identifier string comp, that is the number of times the reaction has occurred up to the current simulation time.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), returns the sum of the reaction extents in all tetrahedral elements of the compartment.</p>"}}, "Diffusion": {"Active": {"@code": ["active = sim.comp.diff.Active"], "@doc": "<p> Returns whether a diffusion rule with identifier string diff in compartment with identifier string comp is active (True) or not (False). If diffusion of a species is inactive this means the molecules will remain in place and has the same effect as a diffusion constant of zero.</p>"}, "D": {"@code": ["dcst = sim.comp.diff.D"], "@doc": "<p> Returns the diffusion constant of diffusion rule with identifier string diff in compartment with identifier string comp. This constant is in units m^2/s.</p><p>Note: In a mesh-based solver the value for the compartment is returned, although individual or groups of tetrahedral elements may have different values (set with setTetDiffD).</p>"}}, "Vol": {"@code": ["val = sim.comp.Vol"], "@doc": "<p> Returns the volume of compartment with identifier string comp (in m^3).</p>"}}, "Patch": {"Species": {"Count": {"@code": ["cnt = sim.patch.spec.Count"], "@doc": "<p> DEPRECATED Returns the number of molecules of species with identifier string spec in patch with identifier string patch.Note: in a mesh-based simulation this is the combined count from all triangular elements in the patch.</p>"}, "Amount": {"@code": ["val = sim.patch.spec.Amount"], "@doc": "<p> DEPRECATED Returns the amount (in mols) of species with identifier string spec in patch with identifier string patch.</p><p>Note: in a mesh-based simulation this is the combined amount from all triangular elements in the patch.</p>"}, "Clamped": {"@code": ["clamped = sim.patch.spec.Clamped"], "@doc": "<p> DEPRECATED Sets the amount (in mols) of species with identifier string spec in patch with identifier string patch to a. In a discrete solver, such as Wmdirect and Tetexact, this continuous value is converted internally into a discrete number of molecules by multiplication with Avogadro's number.</p><p>Note: in a mesh-based simulation the molecules are divided as equally as possible over all triangular elements in the patch (i.e. a uniform distribution).</p>"}}, "Reaction": {"K": {"@code": ["val = sim.patch.sreac['fwd'].K", "val = sim.patch.sreac['bkw'].K"], "@doc": "<p> Returns the macroscopic reaction constant of surface reaction with identifier string sreac in patch with identifier string patch. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based solver the value for the patch is returned, although individual triangle elements may have different values (set with setTriSReacK).</p>"}, "Active": {"@code": ["active = sim.patch.sreac['fwd'].Active", "active = sim.patch.sreac['bkw'].Active"], "@doc": "<p> Returns whether a surface reaction with identifier string sreac in patch with identifier string patch is active (True) or not (False). If it's not active this means that a surface reaction will never occur regardless of whether the reactants are present in sufficient numbers or not.</p><p>Note: In a mesh-based simulation this method will return True only if the surface reaction is active in all triangular elements in the patch.</p>"}, "C": {"@code": ["val = sim.patch.sreac['fwd'].C", "val = sim.patch.sreac['bkw'].C"], "@doc": "<p> Returns the 'stochastic reaction constant' (or 'specific probability rate constant') of surface reaction with identifier string sreac in patch with identifier string patch.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), the stochastic reaction constant is computed as the weighted mean of the stochastic reaction constants in all triangular elements of the patch.</p>"}, "H": {"@code": ["val = sim.patch.sreac['fwd'].H", "val = sim.patch.sreac['bkw'].H"], "@doc": "<p> Returns h_mu, the distinct number of ways in which surface reaction with identifier string sreac can occur in patch with identifier string patch, by computing the product of its reactants. Note: in a mesh-based simulation (i.e. Tetexact), returns the sum of the h_mu's over all triangular elements in the patch.</p>"}, "A": {"@code": ["val = sim.patch.sreac['fwd'].A", "val = sim.patch.sreac['bkw'].A"], "@doc": "<p> Returns the propensity of surface reaction with identifier string sreac in patch with identifier string patch. Note: in a mesh-based simulation (i.e. Tetexact), the propensity of a surface reaction in a patch is computed as the sum of the propensities in all triangular elements of the patch.</p>"}, "Extent": {"@code": ["val = sim.patch.sreac['fwd'].Extent", "val = sim.patch.sreac['bkw'].Extent"], "@doc": "<p> Returns the extent of surface reaction with identifier string sreac in patch with identifier string patch, that is the number of times the surface reaction has occurred up to the current simulation time.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), returns the sum of the reaction extents in all triangular elements of the patch.</p>"}}, "Area": {"@code": ["val = sim.patch.Area"], "@doc": "<p> Returns the area of patch with identifier string patch (in m^2).</p>"}}, "Diff. Boundary": {"Species": {"DiffusionActive": {"@code": ["val = sim.diffb.spec.DiffusionActive"], "@doc": "<p> DEPRECATED Returns whether diffusion is active across a diffusion boundary for a species.</p>"}}}, "Surf. Diff. Boundary": {"Species": {"DiffusionActive": {"@code": ["val = sim.sdiffb.spec.DiffusionActive"], "@doc": "<p> DEPRECATED Returns whether diffusion is active across a surface diffusion boundary for a species.</p>"}}}, "Region of Interest": {"Species": {"Count": {"@code": ["cnt = sim.roi.spec.Count"], "@doc": "<p> DEPRECATED Get the count of a species in a ROI.</p>"}, "Conc": {"@code": ["conc = sim.roi.spec.Conc"], "@doc": "<p> DEPRECATED Get the concentration of a species in a ROI.</p>"}, "Amount": {"@code": ["val = sim.roi.spec.Amount"], "@doc": "<p> DEPRECATED Get the amount of a species in a ROI.</p>"}}}, "Tetrahedron": {"Species": {"Count": {"@code": ["cnt = sim.TET(tet).spec.Count", "cnt = sim.TETS(tetLst).spec.Count"], "@doc": "<p> DEPRECATED Returns the number of molecules of species with identifier string spec in the tetrahedral element tet.</p>"}, "Conc": {"@code": ["conc = sim.TET(tet).spec.Conc", "conc = sim.TETS(tetLst).spec.Conc"], "@doc": "<p> DEPRECATED Returns the concentration (in Molar units) of species with identifier string spec in a tetrahedral element tet.</p>"}, "Amount": {"@code": ["val = sim.TET(tet).spec.Amount", "val = sim.TETS(tetLst).spec.Amount"], "@doc": "<p> DEPRECATED Returns the amount (in mols) of species with identifier string spec in tetrahedral element tet.</p>"}, "Clamped": {"@code": ["clamped = sim.TET(tet).spec.Clamped", "clamped = sim.TETS(tetLst).spec.Clamped"], "@doc": "<p> DEPRECATED Returns True if concentration of species with identifier string spec in tetrahedral element tet is clamped, which means the concentration stays the same regardless of reactions that consume or produce molecules of this species or diffusion of this species into or out of the tetrahedral element. Returns False if not.</p>"}}, "Reaction": {"K": {"@code": ["val = sim.TET(tet).reac['fwd'].K", "val = sim.TET(tet).reac['bkw'].K", "val = sim.TETS(tetLst).reac['fwd'].K", "val = sim.TETS(tetLst).reac['bkw'].K"], "@doc": "<p> Returns the macroscopic reaction constant of reaction with identifier string reac in tetrahedral element tet. The unit of the reaction constant depends on the order of the reaction.</p>"}, "Active": {"@code": ["active = sim.TET(tet).reac['fwd'].Active", "active = sim.TET(tet).reac['bkw'].Active", "active = sim.TETS(tetLst).reac['fwd'].Active", "active = sim.TETS(tetLst).reac['bkw'].Active"], "@doc": "<p> Returns whether reaction with identifier string reac in tetrahedral element tet is active (True) or not (False). If it's not active this means that the reaction will never occur regardless of whether reactants are present in sufficient numbers or not.</p>"}, "C": {"@code": ["val = sim.TET(tet).reac['fwd'].C", "val = sim.TET(tet).reac['bkw'].C", "val = sim.TETS(tetLst).reac['fwd'].C", "val = sim.TETS(tetLst).reac['bkw'].C"], "@doc": "<p> Returns the 'stochastic reaction constant' (or 'specific probability rate constant') of reaction with identifier string reac in tetrahedral element tet.</p>"}, "H": {"@code": ["val = sim.TET(tet).reac['fwd'].H", "val = sim.TET(tet).reac['bkw'].H", "val = sim.TETS(tetLst).reac['fwd'].H", "val = sim.TETS(tetLst).reac['bkw'].H"], "@doc": "<p> Returns h_mu, the distinct number of ways in which reaction with identifier string reac can occur in tetrahedral element tet, by computing the product of its reactants.</p>"}, "A": {"@code": ["val = sim.TET(tet).reac['fwd'].A", "val = sim.TET(tet).reac['bkw'].A", "val = sim.TETS(tetLst).reac['fwd'].A", "val = sim.TETS(tetLst).reac['bkw'].A"], "@doc": "<p> Returns the propensity of reaction with identifier string reac in tetrahedral element tet.</p>"}}, "Diffusion": {"Active": {"@code": ["active = sim.TET(tet).diff.Active", "active = sim.TETS(tetLst).diff.Active"], "@doc": "<p> Returns whether diffusion with identifier string diff in tetrahedral element tet is active (True) or not (False). If diffusion of a species is inactive this means the molecules will never diffuse out of the tetrahedron and has the same effect as a diffusion constant of zero.</p>"}, "D": {"@code": ["dcst = sim.TET(tet).diff.D", "dcst = sim.TET(tet).diff(direc=tet2).D", "dcst = sim.TETS(tetLst).diff.D"], "@doc": "<p> Returns the diffusion constant of diffusion rule with identifier string diff in tetrahedral element tet. This constant is in units m^2/s. If direc is specified, return the diffusion constant towards that direction.</p>"}, "A": {"@code": ["val = sim.TET(tet).diff.A", "val = sim.TETS(tetLst).diff.A"], "@doc": "<p> Returns the propensity of diffusion rule with identifier string diff in tetrahedral element tet.</p>"}}, "Vol": {"@code": ["val = sim.TET(tet).Vol", "val = sim.TETS(tetLst).Vol"], "@doc": "<p> Returns the volume (in m^3) of the tetrahedral element tet.</p>"}, "V": {"@code": ["val = sim.TET(tet).V", "val = sim.TETS(tetLst).V"], "@doc": "<p> Returns the potential (in volts) of tetrahedral element tet, taken at the barycenter.</p>"}, "VClamped": {"@code": ["clamped = sim.TET(tet).VClamped", "clamped = sim.TETS(tetLst).VClamped"], "@doc": "<p> Returns true if the potential of tetrahedral element tet is clamped to some voltage.</p>"}}, "Triangle": {"Species": {"Count": {"@code": ["cnt = sim.TRI(tri).spec.Count", "cnt = sim.TRIS(triLst).spec.Count"], "@doc": "<p> DEPRECATED Returns the number of molecules of species with identifier string spec in the triangular element tri.</p>"}, "Amount": {"@code": ["val = sim.TRI(tri).spec.Amount", "val = sim.TRIS(triLst).spec.Amount"], "@doc": "<p> DEPRECATED Returns the amount (in mols) of species with identifier string spec in triangular element tri.</p>"}, "Clamped": {"@code": ["clamped = sim.TRI(tri).spec.Clamped", "clamped = sim.TRIS(triLst).spec.Clamped"], "@doc": "<p> DEPRECATED Returns True if the species with identifier string spec in triangular element tri is clamped, which means the number of molecules stays the same regardless of reactions that consume or produce molecules of this species. Returns False if not.</p>"}}, "I": {"@code": ["val = sim.TRI(tri).I", "val = sim.TRIS(triLst).I"], "@doc": "<p> Returns the current of triangle element tri, in amps, at the last EField calculation step.</p>"}, "Reaction": {"K": {"@code": ["val = sim.TRI(tri).sreac['fwd'].K", "val = sim.TRI(tri).sreac['bkw'].K", "val = sim.TRIS(triLst).sreac['fwd'].K", "val = sim.TRIS(triLst).sreac['bkw'].K"], "@doc": "<p> Returns the macroscopic reaction constant of surface reaction with identifier string sreac in triangular element tri. The units of the reaction constant depends on the order of the reaction.</p>"}, "Active": {"@code": ["active = sim.TRI(tri).sreac['fwd'].Active", "active = sim.TRI(tri).sreac['bkw'].Active", "active = sim.TRIS(triLst).sreac['fwd'].Active", "active = sim.TRIS(triLst).sreac['bkw'].Active"], "@doc": "<p> Returns whether surface reaction with identifier string sreac in triangular element tri is active (True) or not (False). If it's not active this means that the surface reaction will never occur regardless of whether reactants are present in sufficient numbers or not.</p>"}, "C": {"@code": ["val = sim.TRI(tri).sreac['fwd'].C", "val = sim.TRI(tri).sreac['bkw'].C", "val = sim.TRIS(triLst).sreac['fwd'].C", "val = sim.TRIS(triLst).sreac['bkw'].C"], "@doc": "<p> Returns the 'stochastic reaction constant' (or 'specific probability rate constant') of surface reaction with identifier string sreac in triangular element tri.</p>"}, "H": {"@code": ["val = sim.TRI(tri).sreac['fwd'].H", "val = sim.TRI(tri).sreac['bkw'].H", "val = sim.TRIS(triLst).sreac['fwd'].H", "val = sim.TRIS(triLst).sreac['bkw'].H"], "@doc": "<p> Returns h_mu, the distinct number of ways in which surface reaction with identifier string sreac can occur in triangular element tri, by computing the product of its reactants.</p>"}, "A": {"@code": ["val = sim.TRI(tri).sreac['fwd'].A", "val = sim.TRI(tri).sreac['bkw'].A", "val = sim.TRIS(triLst).sreac['fwd'].A", "val = sim.TRIS(triLst).sreac['bkw'].A"], "@doc": "<p> Returns the propensity of surface reaction with identifier string sreac in triangular element tri.</p>"}}, "Diffusion": {"D": {"@code": ["dcst = sim.TRI(tri).sdiff.D", "dcst = sim.TRI(tri).sdiff(direc=tri2).D", "dcst = sim.TRIS(triLst).sdiff.D"], "@doc": "<p> Returns the diffusion constant of diffusion rule with identifier string diff in triangle element tri. If direc is specified, return the diffusion constant towards that direction.</p>"}}, "Current": {"I": {"@code": ["val = sim.TRI(tri).curr.I", "val = sim.TRIS(triLst).curr.I"], "@doc": "<p> Returns the ohmic or GHK current with string identifier curr of triangle element tri, in amps.</p>"}}, "Area": {"@code": ["val = sim.TRI(tri).Area", "val = sim.TRIS(triLst).Area"], "@doc": "<p> Returns the area (in m^2) of the triangular element tri.</p>"}, "V": {"@code": ["val = sim.TRI(tri).V", "val = sim.TRIS(triLst).V"], "@doc": "<p> Returns the potential (in volts) of triangle element tri, taken at the barycenter.</p>"}, "VClamped": {"@code": ["clamped = sim.TRI(tri).VClamped", "clamped = sim.TRIS(triLst).VClamped"], "@doc": "<p> Returns true if the potential of triangle element tri is clamped to some voltage.</p>"}, "IClamp": {"@code": ["val = sim.TRI(tri).IClamp", "val = sim.TRIS(triLst).IClamp"], "@doc": "<p> Get current clamp to triangle element tri. NOTE: Convention is maintained that a positive current clamp is depolarizing, a negative current clamp is hyperpolarizing.</p>"}}, "Membrane": {"Res": {"@code": ["ro, vrev = sim.memb.Res"], "@doc": "<p> Gets the surface electrical resistivity (ro) in ohm.m^2 of the membrane with string identifier memb, and the reversal potential (vrev) in Volts.</p>"}}, "Vertex": {"V": {"@code": ["val = sim.VERT(vert).V", "val = sim.VERTS(vertLst).V"], "@doc": "<p> Returns the potential (in volts) of vertex element vert.</p>"}, "VClamped": {"@code": ["clamped = sim.VERT(vert).VClamped", "clamped = sim.VERTS(vertLst).VClamped"], "@doc": "<p> Returns true if the potential of vertex element vert is clamped to some voltage.</p>"}, "IClamp": {"@code": ["val = sim.VERT(vert).IClamp", "val = sim.VERTS(vertLst).IClamp"], "@doc": "<p> Get current clamp to vertex element with index vidx (Amps). NOTE: Convention is maintained that a positive current clamp is depolarizing, a negative current clamp is hyperpolarizing.</p>"}}}, "TetOpSplit": {"Compartment": {"Species": {"Count": {"@code": ["cnt = sim.comp.spec.Count"], "@doc": "<p> DEPRECATED Returns the number of molecules of a species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined count from all tetrahedral elements in the compartment.</p>"}, "Conc": {"@code": ["conc = sim.comp.spec.Conc"], "@doc": "<p> DEPRECATED Returns the concentration (in Molar units) of species with identifier string spec in compartment with identifier string comp.</p><p>Note: in a mesh-based simulation this is calculated from the combined number of molecules from all tetrahedral elements in the compartment and the total volume of the tetrahedrons.</p>"}, "Amount": {"@code": ["val = sim.comp.spec.Amount"], "@doc": "<p> DEPRECATED Returns the amount (in mols) of species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined amount from all tetrahedral elements in the compartment.</p>"}, "Clamped": {"@code": ["clamped = sim.comp.spec.Clamped"], "@doc": "<p> DEPRECATED Returns True if species with identifier string spec in compartment with identifier string comp is clamped, which means the concentration remains the same regardless of reactions that consume or produce molecules of this species. Returns False if not.</p><p>Note: in a mesh-based simulation it returns True only if the species is clamped in all tetrahedral elements of the compartment.</p>"}}, "Reaction": {"K": {"@code": ["val = sim.comp.reac['fwd'].K", "val = sim.comp.reac['bkw'].K"], "@doc": "<p> Returns the macroscopic reaction constant of reaction with identifier string reac in compartment with identifier string comp. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based simulation the value for the compartment is returned, although individual tetrahedral elements may have different values (set with setTetReacK).</p>"}, "Active": {"@code": ["active = sim.comp.reac['fwd'].Active", "active = sim.comp.reac['bkw'].Active"], "@doc": "<p> Returns whether a reaction with identifier string reac in compartment with identifier string comp is active (True) or not (False). If it's not active this means that a reaction will never occur regardless of whether the reactants are present in sufficient numbers or not.</p><p>Note: In a mesh-based simulation this method will return True only if the reaction is active in all tetrahedral elements in the compartment.</p>"}, "C": {"@code": ["val = sim.comp.reac['fwd'].C", "val = sim.comp.reac['bkw'].C"], "@doc": "<p> Returns the 'stochastic reaction constant' (or 'specific probability rate constant') of reaction with identifier string reac in compartment with identifier string comp.</p><p>The 'stochastic reaction constant' multiplied by infinitesimal time interval dt gives the average probability that one reaction channel of this reaction type will react accordingly in dt.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), the stochastic reaction constant is computed as the weighted mean of the stochastic reaction constants in all tetrahedral elements of the compartment.</p>"}, "H": {"@code": ["val = sim.comp.reac['fwd'].H", "val = sim.comp.reac['bkw'].H"], "@doc": "<p> Returns h_mu, the distinct number of ways in which reaction with identifier string reac can occur in compartment with identifier string comp, by computing the product of its reactants. Note: in a mesh-based simulation (i.e. Tetexact), returns the sum of the h_mu's over all tetrahedral elements in the compartment.</p>"}, "A": {"@code": ["val = sim.comp.reac['fwd'].A", "val = sim.comp.reac['bkw'].A"], "@doc": "<p> Returns the propensity of reaction with identifier string reac in compartment with identifier string comp.</p><p>The propensity of a reaction is a function of state and is defined as the function whose product with infinitesimal time dt gives the probability that the reaction will occur in the next dt. It is the 'stochastic reaction constant' multiplied by 'h_mu'.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), the propensity of a reaction in a compartment is computed as the sum of the propensities in all tetrahedral elements of the compartment.</p>"}, "Extent": {"@code": ["val = sim.comp.reac['fwd'].Extent", "val = sim.comp.reac['bkw'].Extent"], "@doc": "<p> Return the extent of reaction with identifier string reac in compartment with identifier string comp, that is the number of times the reaction has occurred up to the current simulation time.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), returns the sum of the reaction extents in all tetrahedral elements of the compartment.</p>"}}, "Diffusion": {"Active": {"@code": ["active = sim.comp.diff.Active"], "@doc": "<p> Returns whether a diffusion rule with identifier string diff in compartment with identifier string comp is active (True) or not (False). If diffusion of a species is inactive this means the molecules will remain in place and has the same effect as a diffusion constant of zero.</p>"}, "D": {"@code": ["dcst = sim.comp.diff.D"], "@doc": "<p> Returns the diffusion constant of diffusion rule with identifier string diff in compartment with identifier string comp. This constant is in units m^2/s.</p><p>Note: In a mesh-based solver the value for the compartment is returned, although individual or groups of tetrahedral elements may have different values (set with setTetDiffD).</p>"}}, "Vol": {"@code": ["val = sim.comp.Vol"], "@doc": "<p> Returns the volume of compartment with identifier string comp (in m^3).</p>"}}, "Patch": {"Species": {"Count": {"@code": ["cnt = sim.patch.spec.Count"], "@doc": "<p> DEPRECATED Returns the number of molecules of species with identifier string spec in patch with identifier string patch.Note: in a mesh-based simulation this is the combined count from all triangular elements in the patch.</p>"}, "Amount": {"@code": ["val = sim.patch.spec.Amount"], "@doc": "<p> DEPRECATED Returns the amount (in mols) of species with identifier string spec in patch with identifier string patch.</p><p>Note: in a mesh-based simulation this is the combined amount from all triangular elements in the patch.</p>"}, "Clamped": {"@code": ["clamped = sim.patch.spec.Clamped"], "@doc": "<p> DEPRECATED Sets the amount (in mols) of species with identifier string spec in patch with identifier string patch to a. In a discrete solver, such as Wmdirect and Tetexact, this continuous value is converted internally into a discrete number of molecules by multiplication with Avogadro's number.</p><p>Note: in a mesh-based simulation the molecules are divided as equally as possible over all triangular elements in the patch (i.e. a uniform distribution).</p>"}}, "Reaction": {"K": {"@code": ["val = sim.patch.sreac['fwd'].K", "val = sim.patch.sreac['bkw'].K"], "@doc": "<p> Returns the macroscopic reaction constant of surface reaction with identifier string sreac in patch with identifier string patch. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based solver the value for the patch is returned, although individual triangle elements may have different values (set with setTriSReacK).</p>"}, "Active": {"@code": ["active = sim.patch.sreac['fwd'].Active", "active = sim.patch.sreac['bkw'].Active"], "@doc": "<p> Returns whether a surface reaction with identifier string sreac in patch with identifier string patch is active (True) or not (False). If it's not active this means that a surface reaction will never occur regardless of whether the reactants are present in sufficient numbers or not.</p><p>Note: In a mesh-based simulation this method will return True only if the surface reaction is active in all triangular elements in the patch.</p>"}, "C": {"@code": ["val = sim.patch.sreac['fwd'].C", "val = sim.patch.sreac['bkw'].C"], "@doc": "<p> Returns the 'stochastic reaction constant' (or 'specific probability rate constant') of surface reaction with identifier string sreac in patch with identifier string patch.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), the stochastic reaction constant is computed as the weighted mean of the stochastic reaction constants in all triangular elements of the patch.</p>"}, "H": {"@code": ["val = sim.patch.sreac['fwd'].H", "val = sim.patch.sreac['bkw'].H"], "@doc": "<p> Returns h_mu, the distinct number of ways in which surface reaction with identifier string sreac can occur in patch with identifier string patch, by computing the product of its reactants. Note: in a mesh-based simulation (i.e. Tetexact), returns the sum of the h_mu's over all triangular elements in the patch.</p>"}, "A": {"@code": ["val = sim.patch.sreac['fwd'].A", "val = sim.patch.sreac['bkw'].A"], "@doc": "<p> Returns the propensity of surface reaction with identifier string sreac in patch with identifier string patch. Note: in a mesh-based simulation (i.e. Tetexact), the propensity of a surface reaction in a patch is computed as the sum of the propensities in all triangular elements of the patch.</p>"}, "Extent": {"@code": ["val = sim.patch.sreac['fwd'].Extent", "val = sim.patch.sreac['bkw'].Extent"], "@doc": "<p> Returns the extent of surface reaction with identifier string sreac in patch with identifier string patch, that is the number of times the surface reaction has occurred up to the current simulation time.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), returns the sum of the reaction extents in all triangular elements of the patch.</p>"}}, "Area": {"@code": ["val = sim.patch.Area"], "@doc": "<p> Returns the area of patch with identifier string patch (in m^2).</p>"}}, "Diff. Boundary": {"Species": {"DiffusionActive": {"@code": ["val = sim.diffb.spec.DiffusionActive"], "@doc": "<p> DEPRECATED Returns whether diffusion is active across a diffusion boundary for a species.</p>"}}}, "Surf. Diff. Boundary": {"Species": {"DiffusionActive": {"@code": ["val = sim.sdiffb.spec.DiffusionActive"], "@doc": "<p> DEPRECATED Returns whether diffusion is active across a surface diffusion boundary for a species.</p>"}}}, "Region of Interest": {"Species": {"Count": {"@code": ["cnt = sim.roi.spec.Count"], "@doc": "<p> DEPRECATED Get the count of a species in a ROI.</p>"}, "Conc": {"@code": ["conc = sim.roi.spec.Conc"], "@doc": "<p> DEPRECATED Get the concentration of a species in a ROI.</p>"}, "Amount": {"@code": ["val = sim.roi.spec.Amount"], "@doc": "<p> DEPRECATED Get the amount of a species in a ROI.</p>"}}, "Reaction": {"Extent": {"@code": ["val = sim.roi.reac['fwd'].Extent", "val = sim.roi.reac['bkw'].Extent"], "@doc": "<p> Return the extent of reaction with identifier string reac in ROI with identifier string roi, that is the number of times the reaction has occurred up to the current simulation time.</p>"}}, "Diffusion": {"Extent": {"@code": ["val = sim.roi.diff.Extent"], "@doc": "<p> Return the extent of diffusion with identifier string diff in ROI with identifier string roi, that is the number of times the diffusion has occurred up to the current simulation time.</p>"}}, "Area": {"@code": ["val = sim.roi.Area"], "@doc": "<p> Get the area of a ROI.</p>"}, "Vol": {"@code": ["val = sim.roi.Vol"], "@doc": "<p> Get the volume of a ROI.</p>"}}, "Tetrahedron": {"Species": {"Count": {"@code": ["cnt = sim.TET(tet).spec.Count", "cnt = sim.TETS(tetLst).spec.Count"], "@doc": "<p> DEPRECATED Returns the number of molecules of species with identifier string spec in the tetrahedral element tet.</p>"}, "Conc": {"@code": ["conc = sim.TET(tet).spec.Conc", "conc = sim.TETS(tetLst).spec.Conc"], "@doc": "<p> DEPRECATED Returns the concentration (in Molar units) of species with identifier string spec in a tetrahedral element tet.</p>"}, "Amount": {"@code": ["val = sim.TET(tet).spec.Amount", "val = sim.TETS(tetLst).spec.Amount"], "@doc": "<p> DEPRECATED Returns the amount (in mols) of species with identifier string spec in tetrahedral element tet.</p>"}, "Clamped": {"@code": ["clamped = sim.TET(tet).spec.Clamped", "clamped = sim.TETS(tetLst).spec.Clamped"], "@doc": "<p> DEPRECATED Returns True if concentration of species with identifier string spec in tetrahedral element tet is clamped, which means the concentration stays the same regardless of reactions that consume or produce molecules of this species or diffusion of this species into or out of the tetrahedral element. Returns False if not.</p>"}}, "Reaction": {"K": {"@code": ["val = sim.TET(tet).reac['fwd'].K", "val = sim.TET(tet).reac['bkw'].K", "val = sim.TETS(tetLst).reac['fwd'].K", "val = sim.TETS(tetLst).reac['bkw'].K"], "@doc": "<p> Returns the macroscopic reaction constant of reaction with identifier string reac in tetrahedral element tet. The unit of the reaction constant depends on the order of the reaction.</p>"}, "Active": {"@code": ["active = sim.TET(tet).reac['fwd'].Active", "active = sim.TET(tet).reac['bkw'].Active", "active = sim.TETS(tetLst).reac['fwd'].Active", "active = sim.TETS(tetLst).reac['bkw'].Active"], "@doc": "<p> Returns whether reaction with identifier string reac in tetrahedral element tet is active (True) or not (False). If it's not active this means that the reaction will never occur regardless of whether reactants are present in sufficient numbers or not.</p>"}, "C": {"@code": ["val = sim.TET(tet).reac['fwd'].C", "val = sim.TET(tet).reac['bkw'].C", "val = sim.TETS(tetLst).reac['fwd'].C", "val = sim.TETS(tetLst).reac['bkw'].C"], "@doc": "<p> Returns the 'stochastic reaction constant' (or 'specific probability rate constant') of reaction with identifier string reac in tetrahedral element tet.</p>"}, "H": {"@code": ["val = sim.TET(tet).reac['fwd'].H", "val = sim.TET(tet).reac['bkw'].H", "val = sim.TETS(tetLst).reac['fwd'].H", "val = sim.TETS(tetLst).reac['bkw'].H"], "@doc": "<p> Returns h_mu, the distinct number of ways in which reaction with identifier string reac can occur in tetrahedral element tet, by computing the product of its reactants.</p>"}, "A": {"@code": ["val = sim.TET(tet).reac['fwd'].A", "val = sim.TET(tet).reac['bkw'].A", "val = sim.TETS(tetLst).reac['fwd'].A", "val = sim.TETS(tetLst).reac['bkw'].A"], "@doc": "<p> Returns the propensity of reaction with identifier string reac in tetrahedral element tet.</p>"}}, "Diffusion": {"Active": {"@code": ["active = sim.TET(tet).diff.Active", "active = sim.TETS(tetLst).diff.Active"], "@doc": "<p> Returns whether diffusion with identifier string diff in tetrahedral element tet is active (True) or not (False). If diffusion of a species is inactive this means the molecules will never diffuse out of the tetrahedron and has the same effect as a diffusion constant of zero.</p>"}, "D": {"@code": ["dcst = sim.TET(tet).diff.D", "dcst = sim.TET(tet).diff(direc=tet2).D", "dcst = sim.TETS(tetLst).diff.D"], "@doc": "<p> Returns the diffusion constant of diffusion rule with identifier string diff in tetrahedral element tet. This constant is in units m^2/s. If direc is specified, return the diffusion constant towards that direction.</p>"}, "A": {"@code": ["val = sim.TET(tet).diff.A", "val = sim.TETS(tetLst).diff.A"], "@doc": "<p> Returns the propensity of diffusion rule with identifier string diff in tetrahedral element tet.</p>"}}, "Vol": {"@code": ["val = sim.TET(tet).Vol", "val = sim.TETS(tetLst).Vol"], "@doc": "<p> Returns the volume (in m^3) of the tetrahedral element tet.</p>"}, "V": {"@code": ["val = sim.TET(tet).V", "val = sim.TETS(tetLst).V"], "@doc": "<p> Returns the potential (in volts) of tetrahedral element tet, taken at the barycenter.</p>"}, "VClamped": {"@code": ["clamped = sim.TET(tet).VClamped", "clamped = sim.TETS(tetLst).VClamped"], "@doc": "<p> Returns true if the potential of tetrahedral element tet is clamped to some voltage.</p>"}}, "Triangle": {"Species": {"Count": {"@code": ["cnt = sim.TRI(tri).spec.Count", "cnt = sim.TRIS(triLst).spec.Count"], "@doc": "<p> DEPRECATED Returns the number of molecules of species with identifier string spec in the triangular element tri.</p>"}, "Amount": {"@code": ["val = sim.TRI(tri).spec.Amount", "val = sim.TRIS(triLst).spec.Amount"], "@doc": "<p> DEPRECATED Returns the amount (in mols) of species with identifier string spec in triangular element tri.</p>"}, "Clamped": {"@code": ["clamped = sim.TRI(tri).spec.Clamped", "clamped = sim.TRIS(triLst).spec.Clamped"], "@doc": "<p> DEPRECATED Returns True if the species with identifier string spec in triangular element tri is clamped, which means the number of molecules stays the same regardless of reactions that consume or produce molecules of this species. Returns False if not.</p>"}}, "I": {"@code": ["val = sim.TRI(tri).I", "val = sim.TRIS(triLst).I"], "@doc": "<p> Returns the current of triangle element tri, in amps, at the last EField calculation step.</p>"}, "Reaction": {"K": {"@code": ["val = sim.TRI(tri).sreac['fwd'].K", "val = sim.TRI(tri).sreac['bkw'].K", "val = sim.TRIS(triLst).sreac['fwd'].K", "val = sim.TRIS(triLst).sreac['bkw'].K"], "@doc": "<p> Returns the macroscopic reaction constant of surface reaction with identifier string sreac in triangular element tri. The units of the reaction constant depends on the order of the reaction.</p>"}, "Active": {"@code": ["active = sim.TRI(tri).sreac['fwd'].Active", "active = sim.TRI(tri).sreac['bkw'].Active", "active = sim.TRIS(triLst).sreac['fwd'].Active", "active = sim.TRIS(triLst).sreac['bkw'].Active"], "@doc": "<p> Returns whether surface reaction with identifier string sreac in triangular element tri is active (True) or not (False). If it's not active this means that the surface reaction will never occur regardless of whether reactants are present in sufficient numbers or not.</p>"}, "C": {"@code": ["val = sim.TRI(tri).sreac['fwd'].C", "val = sim.TRI(tri).sreac['bkw'].C", "val = sim.TRIS(triLst).sreac['fwd'].C", "val = sim.TRIS(triLst).sreac['bkw'].C"], "@doc": "<p> Returns the 'stochastic reaction constant' (or 'specific probability rate constant') of surface reaction with identifier string sreac in triangular element tri.</p>"}, "H": {"@code": ["val = sim.TRI(tri).sreac['fwd'].H", "val = sim.TRI(tri).sreac['bkw'].H", "val = sim.TRIS(triLst).sreac['fwd'].H", "val = sim.TRIS(triLst).sreac['bkw'].H"], "@doc": "<p> Returns h_mu, the distinct number of ways in which surface reaction with identifier string sreac can occur in triangular element tri, by computing the product of its reactants.</p>"}, "A": {"@code": ["val = sim.TRI(tri).sreac['fwd'].A", "val = sim.TRI(tri).sreac['bkw'].A", "val = sim.TRIS(triLst).sreac['fwd'].A", "val = sim.TRIS(triLst).sreac['bkw'].A"], "@doc": "<p> Returns the propensity of surface reaction with identifier string sreac in triangular element tri.</p>"}}, "Diffusion": {"D": {"@code": ["dcst = sim.TRI(tri).sdiff.D", "dcst = sim.TRI(tri).sdiff(direc=tri2).D", "dcst = sim.TRIS(triLst).sdiff.D"], "@doc": "<p> Returns the diffusion constant of diffusion rule with identifier string diff in triangle element tri. If direc is specified, return the diffusion constant towards that direction.</p>"}}, "Current": {"I": {"@code": ["val = sim.TRI(tri).curr.I", "val = sim.TRIS(triLst).curr.I"], "@doc": "<p> Returns the ohmic or GHK current with string identifier curr of triangle element tri, in amps.</p>"}}, "Area": {"@code": ["val = sim.TRI(tri).Area", "val = sim.TRIS(triLst).Area"], "@doc": "<p> Returns the area (in m^2) of the triangular element tri.</p>"}, "V": {"@code": ["val = sim.TRI(tri).V", "val = sim.TRIS(triLst).V"], "@doc": "<p> Returns the potential (in volts) of triangle element tri, taken at the barycenter.</p>"}, "VClamped": {"@code": ["clamped = sim.TRI(tri).VClamped", "clamped = sim.TRIS(triLst).VClamped"], "@doc": "<p> Returns true if the potential of triangle element tri is clamped to some voltage.</p>"}, "IClamp": {"@code": ["val = sim.TRI(tri).IClamp", "val = sim.TRIS(triLst).IClamp"], "@doc": "<p> Get current clamp to triangle element tri. NOTE: Convention is maintained that a positive current clamp is depolarizing, a negative current clamp is hyperpolarizing.</p>"}}, "Membrane": {"Res": {"@code": ["ro, vrev = sim.memb.Res"], "@doc": "<p> Gets the surface electrical resistivity (ro) in ohm.m^2 of the membrane with string identifier memb, and the reversal potential (vrev) in Volts.</p>"}}, "Vertex": {"V": {"@code": ["val = sim.VERT(vert).V", "val = sim.VERTS(vertLst).V"], "@doc": "<p> Returns the potential (in volts) of vertex element vert.</p>"}, "VClamped": {"@code": ["clamped = sim.VERT(vert).VClamped", "clamped = sim.VERTS(vertLst).VClamped"], "@doc": "<p> Returns true if the potential of vertex element vert is clamped to some voltage.</p>"}, "IClamp": {"@code": ["val = sim.VERT(vert).IClamp", "val = sim.VERTS(vertLst).IClamp"], "@doc": "<p> Get current clamp to vertex element with index vidx (Amps). NOTE: Convention is maintained that a positive current clamp is depolarizing, a negative current clamp is hyperpolarizing.</p>"}}}, "DistTetOpSplit": {"Triangle": {"Current": {"I": {"@code": ["val = sim.TRI(tri).curr.I", "val = sim.TRIS(triLst).curr.I"], "@doc": "<p> Returns the ohmic or GHK current with string identifier curr of triangle element tri, in amps.</p>"}}, "V": {"@code": ["val = sim.TRI(tri).V", "val = sim.TRIS(triLst).V"], "@doc": "<p> Returns the potential (in volts) of triangle element tri.</p>"}}, "Membrane": {"Res": {"@code": ["ro, vrev = sim.memb.Res"], "@doc": "<p> Gets the resistance and the reversal potential of the membrane with string identifier membrane.</p>"}}, "Tetrahedron": {"V": {"@code": ["val = sim.TET(tet).V", "val = sim.TETS(tetLst).V"], "@doc": "<p> Returns the potential (in volts) of tetrahdron element tet.</p>"}}, "Vertex": {"V": {"@code": ["val = sim.VERT(vert).V", "val = sim.VERTS(vertLst).V"], "@doc": "<p> Returns the potential (in volts) of vertex element vert.</p>"}, "IClamp": {"@code": ["val = sim.VERT(vert).IClamp", "val = sim.VERTS(vertLst).IClamp"], "@doc": "<p> Returns the current clamp on the vertex vert, in ampere. NOTE: Convention is maintained that a positive current clamp is depolarizing, a negative current clamp is hyperpolarizing.</p>"}}}}, "set": {"Wmdirect": {"Compartment": {"Species": {"Count": {"@code": ["sim.comp.spec.Count = n"], "@doc": "<p> DEPRECATED Set the number of molecules of a species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined count from all tetrahedral elements in the compartment.</p>"}, "Conc": {"@code": ["sim.comp.spec.Conc = conc"], "@doc": "<p> DEPRECATED Sets the concentration (in Molar units) of species with identifier string spec in compartment with identifier string comp to conc. In a discrete solver the continuous concentration is converted to a discrete number of molecules.</p><p>Note: in a mesh-based simulation the molecules are divided as equally as possible over all tetrahedral elements in the compartment (i.e. a uniform distribution).</p>"}, "Amount": {"@code": ["sim.comp.spec.Amount = a"], "@doc": "<p> DEPRECATED Set the amount (in mols) of species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined amount from all tetrahedral elements in the compartment.</p>"}, "Clamped": {"@code": ["sim.comp.spec.Clamped = clamped"], "@doc": "<p> DEPRECATED Sets whether the concentration of species with identifier string spec in compartment with identifier string comp is clamped (clamped = True) or not (clamped = False). If a species is clamped the concentration stays the same regardless of reactions that consume or produce molecules of the species.</p><p>Note: in a mesh-based simulation this will set the species to be clamped or not in all tetrahedral elements of the compartment.</p>"}}, "Reaction": {"K": {"@code": ["sim.comp.reac['fwd'].K = kf", "sim.comp.reac['bkw'].K = kf"], "@doc": "<p> Sets the macroscopic reaction constant of reaction with identifier string reac in compartment with identifier string comp to kf. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based simulation this method sets the reaction constant in all tetrahedral elements of the compartment to kf</p><p>Note: The default value still comes from the steps.model description, so calling reset() will return the reaction constant to that value.</p>"}, "Active": {"@code": ["sim.comp.reac['fwd'].Active = active", "sim.comp.reac['bkw'].Active = active"], "@doc": "<p> Activate (active = True) or deactivate (active = False) a reaction with identifier string reac in compartment with identifier string comp. If a reaction is not active this means that a reaction will never occur regardless of whether the reactants are present in sufficient numbers or not.</p><p>Note: In a mesh-based simulation this will activate/deactivate the reaction in all tetrahedral elements in the compartment.</p>"}}, "Vol": {"@code": ["sim.comp.Vol = val"], "@doc": "<p> Set the volume of compartment with identifier string comp (in m^3).</p>"}}, "Patch": {"Species": {"Count": {"@code": ["sim.patch.spec.Count = n"], "@doc": "<p> DEPRECATED Sets the number of molecules of species with identifier string spec in patch with identifier string patch to n. Note: in a mesh-based simulation the molecules are divided as equally as possible over all triangular elements in the patch (i.e. a uniform distribution).</p>"}, "Amount": {"@code": ["sim.patch.spec.Amount = a"], "@doc": "<p> DEPRECATED Sets the amount (in mols) of species with identifier string spec in patch with identifier string patch to a. In a discrete solver, such as Wmdirect and Tetexact, this continuous value is converted internally into a discrete number of molecules by multiplication with Avogadro's number.</p><p>Note: in a mesh-based simulation the molecules are divided as equally as possible over all triangular elements in the patch (i.e. a uniform distribution).</p>"}, "Clamped": {"@code": ["sim.patch.spec.Clamped = clamped"], "@doc": "<p> DEPRECATED Sets whether the species with identifier string spec in patch with identifier string patch is clamped (clamped = True) or not (clamped = False). If a species is clamped the number of molecules stays the same regardless of surface reactions that consume or produce molecules of the species.</p><p>Note: in a mesh-based simulation this will set the species to be clamped in all triangular elements of the patch.</p>"}}, "Reaction": {"K": {"@code": ["sim.patch.sreac['fwd'].K = kf", "sim.patch.sreac['bkw'].K = kf"], "@doc": "<p> Sets the macroscopic reaction constant of surface reaction with identifier string sreac in patch with identifier string patch to kf. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based simulation this method sets the surface reaction constant in all triangular elements of the patch to kf.</p><p>Note: The default value still comes from the steps.model description, so calling reset() will return the surface reaction constant to that value.</p>"}, "Active": {"@code": ["sim.patch.sreac['fwd'].Active = active", "sim.patch.sreac['bkw'].Active = active"], "@doc": "<p> Activate (active = True) or deactivate (active = False) a surface reaction with identifier string sreac in patch with identifier string patch. If a surface reaction is not active this means that a reaction will never occur regardless of whether the reactants are present in sufficient numbers or not.</p><p>Note: In a mesh-based simulation this will activate/ deactivate the reaction in all triangular elements in the patch.</p>"}}, "Area": {"@code": ["sim.patch.Area = val"], "@doc": "<p> Sets the area of patch with identifier string patch to area a (in m^2).</p>"}}}, "Wmrssa": {"Compartment": {"Species": {"Count": {"@code": ["sim.comp.spec.Count = n"], "@doc": "<p> DEPRECATED Set the number of molecules of a species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined count from all tetrahedral elements in the compartment.</p>"}, "Conc": {"@code": ["sim.comp.spec.Conc = conc"], "@doc": "<p> DEPRECATED Sets the concentration (in Molar units) of species with identifier string spec in compartment with identifier string comp to conc. In a discrete solver the continuous concentration is converted to a discrete number of molecules.</p><p>Note: in a mesh-based simulation the molecules are divided as equally as possible over all tetrahedral elements in the compartment (i.e. a uniform distribution).</p>"}, "Amount": {"@code": ["sim.comp.spec.Amount = a"], "@doc": "<p> DEPRECATED Set the amount (in mols) of species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined amount from all tetrahedral elements in the compartment.</p>"}, "Clamped": {"@code": ["sim.comp.spec.Clamped = clamped"], "@doc": "<p> DEPRECATED Sets whether the concentration of species with identifier string spec in compartment with identifier string comp is clamped (clamped = True) or not (clamped = False). If a species is clamped the concentration stays the same regardless of reactions that consume or produce molecules of the species.</p><p>Note: in a mesh-based simulation this will set the species to be clamped or not in all tetrahedral elements of the compartment.</p>"}}, "Reaction": {"K": {"@code": ["sim.comp.reac['fwd'].K = kf", "sim.comp.reac['bkw'].K = kf"], "@doc": "<p> Sets the macroscopic reaction constant of reaction with identifier string reac in compartment with identifier string comp to kf. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based simulation this method sets the reaction constant in all tetrahedral elements of the compartment to kf</p><p>Note: The default value still comes from the steps.model description, so calling reset() will return the reaction constant to that value.</p>"}, "Active": {"@code": ["sim.comp.reac['fwd'].Active = active", "sim.comp.reac['bkw'].Active = active"], "@doc": "<p> Activate (active = True) or deactivate (active = False) a reaction with identifier string reac in compartment with identifier string comp. If a reaction is not active this means that a reaction will never occur regardless of whether the reactants are present in sufficient numbers or not.</p><p>Note: In a mesh-based simulation this will activate/deactivate the reaction in all tetrahedral elements in the compartment.</p>"}}, "Vol": {"@code": ["sim.comp.Vol = val"], "@doc": "<p> Set the volume of compartment with identifier string comp (in m^3).</p>"}}, "Patch": {"Species": {"Count": {"@code": ["sim.patch.spec.Count = n"], "@doc": "<p> DEPRECATED Sets the number of molecules of species with identifier string spec in patch with identifier string patch to n. Note: in a mesh-based simulation the molecules are divided as equally as possible over all triangular elements in the patch (i.e. a uniform distribution).</p>"}, "Amount": {"@code": ["sim.patch.spec.Amount = a"], "@doc": "<p> DEPRECATED Sets the amount (in mols) of species with identifier string spec in patch with identifier string patch to a. In a discrete solver, such as Wmdirect and Tetexact, this continuous value is converted internally into a discrete number of molecules by multiplication with Avogadro's number.</p><p>Note: in a mesh-based simulation the molecules are divided as equally as possible over all triangular elements in the patch (i.e. a uniform distribution).</p>"}, "Clamped": {"@code": ["sim.patch.spec.Clamped = clamped"], "@doc": "<p> DEPRECATED Sets whether the species with identifier string spec in patch with identifier string patch is clamped (clamped = True) or not (clamped = False). If a species is clamped the number of molecules stays the same regardless of surface reactions that consume or produce molecules of the species.</p><p>Note: in a mesh-based simulation this will set the species to be clamped in all triangular elements of the patch.</p>"}}, "Reaction": {"K": {"@code": ["sim.patch.sreac['fwd'].K = kf", "sim.patch.sreac['bkw'].K = kf"], "@doc": "<p> Sets the macroscopic reaction constant of surface reaction with identifier string sreac in patch with identifier string patch to kf. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based simulation this method sets the surface reaction constant in all triangular elements of the patch to kf.</p><p>Note: The default value still comes from the steps.model description, so calling reset() will return the surface reaction constant to that value.</p>"}, "Active": {"@code": ["sim.patch.sreac['fwd'].Active = active", "sim.patch.sreac['bkw'].Active = active"], "@doc": "<p> Activate (active = True) or deactivate (active = False) a surface reaction with identifier string sreac in patch with identifier string patch. If a surface reaction is not active this means that a reaction will never occur regardless of whether the reactants are present in sufficient numbers or not.</p><p>Note: In a mesh-based simulation this will activate/ deactivate the reaction in all triangular elements in the patch.</p>"}}, "Area": {"@code": ["sim.patch.Area = val"], "@doc": "<p> Sets the area of patch with identifier string patch to area a (in m^2).</p>"}}}, "Wmrk4": {"Compartment": {"Species": {"Count": {"@code": ["sim.comp.spec.Count = n"], "@doc": "<p> DEPRECATED Set the number of molecules of a species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined count from all tetrahedral elements in the compartment.</p>"}, "Conc": {"@code": ["sim.comp.spec.Conc = conc"], "@doc": "<p> DEPRECATED Sets the concentration (in Molar units) of species with identifier string spec in compartment with identifier string comp to conc. In a discrete solver the continuous concentration is converted to a discrete number of molecules.</p><p>Note: in a mesh-based simulation the molecules are divided as equally as possible over all tetrahedral elements in the compartment (i.e. a uniform distribution).</p>"}, "Amount": {"@code": ["sim.comp.spec.Amount = a"], "@doc": "<p> DEPRECATED Set the amount (in mols) of species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined amount from all tetrahedral elements in the compartment.</p>"}, "Clamped": {"@code": ["sim.comp.spec.Clamped = clamped"], "@doc": "<p> DEPRECATED Sets whether the concentration of species with identifier string spec in compartment with identifier string comp is clamped (clamped = True) or not (clamped = False). If a species is clamped the concentration stays the same regardless of reactions that consume or produce molecules of the species.</p><p>Note: in a mesh-based simulation this will set the species to be clamped or not in all tetrahedral elements of the compartment.</p>"}}, "Reaction": {"K": {"@code": ["sim.comp.reac['fwd'].K = kf", "sim.comp.reac['bkw'].K = kf"], "@doc": "<p> Sets the macroscopic reaction constant of reaction with identifier string reac in compartment with identifier string comp to kf. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based simulation this method sets the reaction constant in all tetrahedral elements of the compartment to kf</p><p>Note: The default value still comes from the steps.model description, so calling reset() will return the reaction constant to that value.</p>"}, "Active": {"@code": ["sim.comp.reac['fwd'].Active = active", "sim.comp.reac['bkw'].Active = active"], "@doc": "<p> Activate (active = True) or deactivate (active = False) a reaction with identifier string reac in compartment with identifier string comp. If a reaction is not active this means that a reaction will never occur regardless of whether the reactants are present in sufficient numbers or not.</p><p>Note: In a mesh-based simulation this will activate/deactivate the reaction in all tetrahedral elements in the compartment.</p>"}}, "Vol": {"@code": ["sim.comp.Vol = val"], "@doc": "<p> Set the volume of compartment with identifier string comp (in m^3).</p>"}}, "Patch": {"Species": {"Count": {"@code": ["sim.patch.spec.Count = n"], "@doc": "<p> DEPRECATED Sets the number of molecules of species with identifier string spec in patch with identifier string patch to n. Note: in a mesh-based simulation the molecules are divided as equally as possible over all triangular elements in the patch (i.e. a uniform distribution).</p>"}, "Amount": {"@code": ["sim.patch.spec.Amount = a"], "@doc": "<p> DEPRECATED Sets the amount (in mols) of species with identifier string spec in patch with identifier string patch to a. In a discrete solver, such as Wmdirect and Tetexact, this continuous value is converted internally into a discrete number of molecules by multiplication with Avogadro's number.</p><p>Note: in a mesh-based simulation the molecules are divided as equally as possible over all triangular elements in the patch (i.e. a uniform distribution).</p>"}, "Clamped": {"@code": ["sim.patch.spec.Clamped = clamped"], "@doc": "<p> DEPRECATED Sets whether the species with identifier string spec in patch with identifier string patch is clamped (clamped = True) or not (clamped = False). If a species is clamped the number of molecules stays the same regardless of surface reactions that consume or produce molecules of the species.</p><p>Note: in a mesh-based simulation this will set the species to be clamped in all triangular elements of the patch.</p>"}}, "Reaction": {"K": {"@code": ["sim.patch.sreac['fwd'].K = kf", "sim.patch.sreac['bkw'].K = kf"], "@doc": "<p> Sets the macroscopic reaction constant of surface reaction with identifier string sreac in patch with identifier string patch to kf. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based simulation this method sets the surface reaction constant in all triangular elements of the patch to kf.</p><p>Note: The default value still comes from the steps.model description, so calling reset() will return the surface reaction constant to that value.</p>"}, "Active": {"@code": ["sim.patch.sreac['fwd'].Active = active", "sim.patch.sreac['bkw'].Active = active"], "@doc": "<p> Activate (active = True) or deactivate (active = False) a surface reaction with identifier string sreac in patch with identifier string patch. If a surface reaction is not active this means that a reaction will never occur regardless of whether the reactants are present in sufficient numbers or not.</p><p>Note: In a mesh-based simulation this will activate/ deactivate the reaction in all triangular elements in the patch.</p>"}}, "Area": {"@code": ["sim.patch.Area = val"], "@doc": "<p> Sets the area of patch with identifier string patch to area a (in m^2).</p>"}}}, "Tetexact": {"Compartment": {"Species": {"Count": {"@code": ["sim.comp.spec.Count = n"], "@doc": "<p> DEPRECATED Set the number of molecules of a species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined count from all tetrahedral elements in the compartment.</p>"}, "Conc": {"@code": ["sim.comp.spec.Conc = conc"], "@doc": "<p> DEPRECATED Sets the concentration (in Molar units) of species with identifier string spec in compartment with identifier string comp to conc. In a discrete solver the continuous concentration is converted to a discrete number of molecules.</p><p>Note: in a mesh-based simulation the molecules are divided as equally as possible over all tetrahedral elements in the compartment (i.e. a uniform distribution).</p>"}, "Amount": {"@code": ["sim.comp.spec.Amount = a"], "@doc": "<p> DEPRECATED Set the amount (in mols) of species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined amount from all tetrahedral elements in the compartment.</p>"}, "Clamped": {"@code": ["sim.comp.spec.Clamped = clamped"], "@doc": "<p> DEPRECATED Sets whether the concentration of species with identifier string spec in compartment with identifier string comp is clamped (clamped = True) or not (clamped = False). If a species is clamped the concentration stays the same regardless of reactions that consume or produce molecules of the species.</p><p>Note: in a mesh-based simulation this will set the species to be clamped or not in all tetrahedral elements of the compartment.</p>"}}, "Reaction": {"K": {"@code": ["sim.comp.reac['fwd'].K = kf", "sim.comp.reac['bkw'].K = kf"], "@doc": "<p> Sets the macroscopic reaction constant of reaction with identifier string reac in compartment with identifier string comp to kf. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based simulation this method sets the reaction constant in all tetrahedral elements of the compartment to kf</p><p>Note: The default value still comes from the steps.model description, so calling reset() will return the reaction constant to that value.</p>"}, "Active": {"@code": ["sim.comp.reac['fwd'].Active = active", "sim.comp.reac['bkw'].Active = active"], "@doc": "<p> Activate (active = True) or deactivate (active = False) a reaction with identifier string reac in compartment with identifier string comp. If a reaction is not active this means that a reaction will never occur regardless of whether the reactants are present in sufficient numbers or not.</p><p>Note: In a mesh-based simulation this will activate/deactivate the reaction in all tetrahedral elements in the compartment.</p>"}}, "Diffusion": {"Active": {"@code": ["sim.comp.diff.Active = active"], "@doc": "<p> Activate (active = True) or deactivate (active = False) a diffusion rule with identifier string diff in compartment with identifier string comp. If diffusion of a species is inactive this means the molecules will remain in place and is effectively the same as setting the diffusion constant to zero</p>"}, "D": {"@code": ["sim.comp.diff.D = dcst"], "@doc": "<p> Sets the diffusion constant of diffusion rule with identifier string diff in compartment with identifier string comp to dcst (in m^2/s).</p><p>Note: This method will set the diffusion constant in all tetrahedral elements in the compartment.</p><p>Note: The default value still comes from the steps.model description, so calling reset() will return the diffusion constants to that value.</p>"}}}, "Patch": {"Species": {"Count": {"@code": ["sim.patch.spec.Count = n"], "@doc": "<p> DEPRECATED Sets the number of molecules of species with identifier string spec in patch with identifier string patch to n. Note: in a mesh-based simulation the molecules are divided as equally as possible over all triangular elements in the patch (i.e. a uniform distribution).</p>"}, "Amount": {"@code": ["sim.patch.spec.Amount = a"], "@doc": "<p> DEPRECATED Sets the amount (in mols) of species with identifier string spec in patch with identifier string patch to a. In a discrete solver, such as Wmdirect and Tetexact, this continuous value is converted internally into a discrete number of molecules by multiplication with Avogadro's number.</p><p>Note: in a mesh-based simulation the molecules are divided as equally as possible over all triangular elements in the patch (i.e. a uniform distribution).</p>"}, "Clamped": {"@code": ["sim.patch.spec.Clamped = clamped"], "@doc": "<p> DEPRECATED Sets whether the species with identifier string spec in patch with identifier string patch is clamped (clamped = True) or not (clamped = False). If a species is clamped the number of molecules stays the same regardless of surface reactions that consume or produce molecules of the species.</p><p>Note: in a mesh-based simulation this will set the species to be clamped in all triangular elements of the patch.</p>"}}, "Reaction": {"K": {"@code": ["sim.patch.sreac['fwd'].K = kf", "sim.patch.sreac['bkw'].K = kf"], "@doc": "<p> Sets the macroscopic reaction constant of surface reaction with identifier string sreac in patch with identifier string patch to kf. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based simulation this method sets the surface reaction constant in all triangular elements of the patch to kf.</p><p>Note: The default value still comes from the steps.model description, so calling reset() will return the surface reaction constant to that value.</p>"}, "Active": {"@code": ["sim.patch.sreac['fwd'].Active = active", "sim.patch.sreac['bkw'].Active = active"], "@doc": "<p> Activate (active = True) or deactivate (active = False) a surface reaction with identifier string sreac in patch with identifier string patch. If a surface reaction is not active this means that a reaction will never occur regardless of whether the reactants are present in sufficient numbers or not.</p><p>Note: In a mesh-based simulation this will activate/ deactivate the reaction in all triangular elements in the patch.</p>"}}}, "Diff. Boundary": {"Species": {"DiffusionActive": {"@code": ["sim.diffb.spec.DiffusionActive = val"], "@doc": "<p> DEPRECATED Activates or inactivates diffusion across a diffusion boundary for a species.</p>"}, "Dcst": {"@code": ["sim.diffb.spec.Dcst = val", "sim.diffb(direc=comp2).spec.Dcst = val"], "@doc": "<p> DEPRECATED Set the diffusion constant of tetrahedrons across a diffusion boundary. If direc is provided, only set dcsts of diffusion towards it (Directional dcsts of diffusions in tetrahedrons in the other compartment of the diffusion boundary towards tetrahedons in the direction compartment).</p>"}}}, "Surf. Diff. Boundary": {"Species": {"DiffusionActive": {"@code": ["sim.sdiffb.spec.DiffusionActive = val"], "@doc": "<p> DEPRECATED Activates or inactivates diffusion across a surface diffusion boundary for a species.</p>"}, "Dcst": {"@code": ["sim.sdiffb.spec.Dcst = val", "sim.diffb(direc=patch2).spec.Dcst = val"], "@doc": "<p> DEPRECATED Set the diffusion constant of triangles across a surface diffusion boundary. If direc is provided, only set dcsts of diffusion towards it (Directional dcsts of diffusions in triangles in the other patches of the diffusion boundary towards triangles in the direction patch).</p>"}}}, "Region of Interest": {"Species": {"Count": {"@code": ["sim.roi.spec.Count = n"], "@doc": "<p> DEPRECATED Set the count of a species in a ROI.</p>"}, "Conc": {"@code": ["sim.roi.spec.Conc = conc"], "@doc": "<p> DEPRECATED Set the concentration of a species in a ROI.</p>"}, "Amount": {"@code": ["sim.roi.spec.Amount = a"], "@doc": "<p> DEPRECATED Set the amount of a species in a ROI.</p>"}, "Clamped": {"@code": ["sim.roi.spec.Clamped = clamped"], "@doc": "<p> DEPRECATED Set a species in a ROI to be clamped or not. The count of species s in the ROI is clamped if b is True, not clamped if b is False.</p>"}}, "Reaction": {"K": {"@code": ["sim.roi.reac['fwd'].K = kf", "sim.roi.reac['bkw'].K = kf"], "@doc": "<p> Sets the macroscopic reaction constant of reaction with identifier string r in a ROI with identifier string roi to kf. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: The default value still comes from the steps.model description, so calling reset() will return the reaction constant to that value.</p>"}, "Active": {"@code": ["sim.roi.reac['fwd'].Active = active", "sim.roi.reac['bkw'].Active = active"], "@doc": "<p> Set reaction r in a ROI to be active or not.</p>"}}, "Diffusion": {"Active": {"@code": ["sim.roi.diff.Active = active"], "@doc": "<p> Set diffusion d in a ROI to be active or not.</p>"}, "D": {"@code": ["sim.roi.diff.D = dcst", "sim.roi.diff(direc=tet2).D = dcst"], "@doc": "<p> Sets the macroscopic diffusion constant of diffusion with identifier string diff in a ROI with identifier string roi to dcst.</p><p>Note: The default value still comes from the steps.model description, so calling reset() will return the diffusion constant to that value.</p>"}}}, "Tetrahedron": {"Species": {"Count": {"@code": ["sim.TET(tet).spec.Count = n", "sim.TETS(tetLst).spec.Count = n"], "@doc": "<p> DEPRECATED Sets the number of molecules of species with identifier string spec in tetrahedral element tet to n.</p>"}, "Conc": {"@code": ["sim.TET(tet).spec.Conc = conc", "sim.TETS(tetLst).spec.Conc = conc"], "@doc": "<p> DEPRECATED Sets the concentration (in Molar units) of species with identifier string spec in a tetrahedral element tet to conc.This continuous value must be converted internally to a discrete number of molecules.</p><p>Due to the small volumes of tetrahedral elements the difference between 'rounding up' and 'rounding down' can be a large difference in concentration.</p>"}, "Amount": {"@code": ["sim.TET(tet).spec.Amount = a", "sim.TETS(tetLst).spec.Amount = a"], "@doc": "<p> DEPRECATED Sets the amount (in mols) of species with identifier string spec in tetrahedral element tet to a. This continuous value must be converted internally to a discrete number of molecules by multiplication with Avogadro's number.</p><p>Due to the small volumes of tetrahedral elements the difference between 'rounding up' and 'rounding down' can be a significant difference in concentration.</p>"}, "Clamped": {"@code": ["sim.TET(tet).spec.Clamped = clamped", "sim.TETS(tetLst).spec.Clamped = clamped"], "@doc": "<p> DEPRECATED Sets whether the concentration of species spec in tetrahedral element tet is clamped (clamped = True) or not (clamped = False). If a species is clamped the concentration stays the same regardless of reactions that consume or produce molecules of the species or diffusion of the species into or out of the tetrahedral element.</p>"}}, "Reaction": {"K": {"@code": ["sim.TET(tet).reac['fwd'].K = kf", "sim.TET(tet).reac['bkw'].K = kf", "sim.TETS(tetLst).reac['fwd'].K = kf", "sim.TETS(tetLst).reac['bkw'].K = kf"], "@doc": "<p> Sets the macroscopic reaction constant of reaction with identifier string reac in tetrahedral element tet to kf. The units of the reaction constant depends on the order of the reaction.</p>"}, "Active": {"@code": ["sim.TET(tet).reac['fwd'].Active = active", "sim.TET(tet).reac['bkw'].Active = active", "sim.TETS(tetLst).reac['fwd'].Active = active", "sim.TETS(tetLst).reac['bkw'].Active = active"], "@doc": "<p> Activate (active = True) or deactivate (active = False) a reaction with identifier string reac in tetrahedral element tet. If it's not active this means that the reaction will never occur regardless of whether reactants are present in sufficient numbers or not.</p>"}}, "Diffusion": {"Active": {"@code": ["sim.TET(tet).diff.Active = active", "sim.TETS(tetLst).diff.Active = active"], "@doc": "<p> Activate (active = True) or deactivate (active = False) diffusion rule with identifier string diff in tetrahedral element tet. If diffusion of a species is inactive this means the molecules will never diffuse out of the tetrahedron and has the same effect as a diffusion constant of zero.</p>"}, "D": {"@code": ["sim.TET(tet).diff.D = dcst", "sim.TET(tet).diff(direc=tet2).D = dcst", "sim.TETS(tetLst).diff.D = dcst"], "@doc": "<p> Sets the diffusion constant of diffusion rule with identifier string diff in tetrahedral element tet to dcst (in m^2/s). Specify direc to set the constant only towards a given tetrahedron direction.</p>"}}, "V": {"@code": ["sim.TET(tet).V = val", "sim.TETS(tetLst).V = val"], "@doc": "<p> Set the potential (in volts) of tetrahedral element tet.</p>"}, "VClamped": {"@code": ["sim.TET(tet).VClamped = clamped", "sim.TETS(tetLst).VClamped = clamped"], "@doc": "<p> Sets whether the potential of tetrahedral element tet is clamped (clamped = True) or not (clamped = False).</p>"}}, "Triangle": {"Species": {"Count": {"@code": ["sim.TRI(tri).spec.Count = n", "sim.TRIS(triLst).spec.Count = n"], "@doc": "<p> DEPRECATED Sets the number of molecules of species with identifier string spec in triangular element tri to n.</p>"}, "Amount": {"@code": ["sim.TRI(tri).spec.Amount = a", "sim.TRIS(triLst).spec.Amount = a"], "@doc": "<p> DEPRECATED Sets the amount (in mols) of species with identifier string spec in triangular element tri to a. This continuous value must be converted internally to a discrete number of molecules by multiplication with Avogadro's number.</p>"}, "Clamped": {"@code": ["sim.TRI(tri).spec.Clamped = clamped", "sim.TRIS(triLst).spec.Clamped = clamped"], "@doc": "<p> DEPRECATED Sets whether the concentration of species spec in triangular element tri is clamped (clamped = True) or not (clamped = False). If a species is clamped the concentration stays the same regardless of reactions that consume or produce molecules of the species.</p>"}}, "Reaction": {"K": {"@code": ["sim.TRI(tri).sreac['fwd'].K = kf", "sim.TRI(tri).sreac['bkw'].K = kf", "sim.TRIS(triLst).sreac['fwd'].K = kf", "sim.TRIS(triLst).sreac['bkw'].K = kf"], "@doc": "<p> Sets the macroscopic reaction constant of surface reaction with identifier string sreac in triangular element tri to kf. The units of the reaction constant depends on the order of the reaction.</p>"}, "Active": {"@code": ["sim.TRI(tri).sreac['fwd'].Active = active", "sim.TRI(tri).sreac['bkw'].Active = active", "sim.TRIS(triLst).sreac['fwd'].Active = active", "sim.TRIS(triLst).sreac['bkw'].Active = active"], "@doc": "<p> Activate (active = True) or deactivate (active = False) a surface reaction with identifier string sreac in triangular element tri. If it's not active this means that the surface reaction will never occur regardless of whether reactants are present in sufficient numbers or not.</p>"}}, "Diffusion": {"D": {"@code": ["sim.TRI(tri).sdiff.D = dcst", "sim.TRI(tri).sdiff(direc=tri2).D = dcst", "sim.TRIS(triLst).sdiff.D = dcst"], "@doc": "<p> Sets the diffusion constant of diffusion rule with identifier string diff in triangle element tri to dcst. Specify direc to set the constant only towards a given triangle direction.</p>"}}, "V": {"@code": ["sim.TRI(tri).V = val", "sim.TRIS(triLst).V = val"], "@doc": "<p> Set the potential (in volts) of triangle element tri.</p>"}, "VClamped": {"@code": ["sim.TRI(tri).VClamped = clamped", "sim.TRIS(triLst).VClamped = clamped"], "@doc": "<p> Sets whether the potential of triangle element tri is clamped (clamped = True) or not (clamped = False).</p>"}, "IClamp": {"@code": ["sim.TRI(tri).IClamp = i", "sim.TRIS(triLst).IClamp = i"], "@doc": "<p> Set current clamp to triangle element tri to current i (amps). NOTE: Convention is maintained that a positive current clamp is depolarizing, a negative current clamp is hyperpolarizing.</p>"}, "Capac": {"@code": ["sim.TRI(tri).Capac = cap", "sim.TRIS(triLst).Capac = cap"], "@doc": "<p> Sets the specific membrane capacitance (in farad / m^2) of tri tri.</p>"}}, "Membrane": {"Potential": {"@code": ["sim.memb.Potential = val"], "@doc": "<p> Sets the potential (in volts) of membrane with string identifier memb. NOTE: This method will set the potential of all nodes in the volume conductor to the same value.</p>"}, "Capac": {"@code": ["sim.memb.Capac = cap"], "@doc": "<p> Sets the specific membrane capacitance (in farad / m^2) of membrane with string identifier memb.</p>"}, "VolRes": {"@code": ["sim.memb.VolRes = val"], "@doc": "<p> Sets the bulk electrical resistivity (in ohm.m) of the volume conductor assocaited with membrane with string identifier memb.</p>"}, "Res": {"@code": ["sim.memb.Res = steps.utils.Params(ro, vrev)"], "@doc": "<p> Sets the surface electrical resistivity ro (in ohm.m^2) of the membrane with string identifier memb. Reversal potential vrev is required in Volts.</p>"}}, "Vertex": {"V": {"@code": ["sim.VERT(vert).V = val", "sim.VERTS(vertLst).V = val"], "@doc": "<p> Set the potential (in volts) of vertex element vert.</p>"}, "VClamped": {"@code": ["sim.VERT(vert).VClamped = clamped", "sim.VERTS(vertLst).VClamped = clamped"], "@doc": "<p> Sets whether the potential of vertex element vert is clamped (clamped = True) or not (clamped = False).</p>"}, "IClamp": {"@code": ["sim.VERT(vert).IClamp = i", "sim.VERTS(vertLst).IClamp = i"], "@doc": "<p> Set current clamp to vertex element vert to current i (Amps). NOTE: Convention is maintained that a positive current clamp is depolarizing, a negative current clamp is hyperpolarizing.</p>"}}}, "TetODE": {"Compartment": {"Species": {"Count": {"@code": ["sim.comp.spec.Count = n"], "@doc": "<p> DEPRECATED Set the number of molecules of a species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined count from all tetrahedral elements in the compartment.</p>"}, "Conc": {"@code": ["sim.comp.spec.Conc = conc"], "@doc": "<p> DEPRECATED Sets the concentration (in Molar units) of species with identifier string spec in compartment with identifier string comp to conc. In a discrete solver the continuous concentration is converted to a discrete number of molecules.</p><p>Note: in a mesh-based simulation the molecules are divided as equally as possible over all tetrahedral elements in the compartment (i.e. a uniform distribution).</p>"}, "Amount": {"@code": ["sim.comp.spec.Amount = a"], "@doc": "<p> DEPRECATED Set the amount (in mols) of species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined amount from all tetrahedral elements in the compartment.</p>"}, "Clamped": {"@code": ["sim.comp.spec.Clamped = clamped"], "@doc": "<p> DEPRECATED Sets whether the concentration of species with identifier string spec in compartment with identifier string comp is clamped (clamped = True) or not (clamped = False). If a species is clamped the concentration stays the same regardless of reactions that consume or produce molecules of the species.</p><p>Note: in a mesh-based simulation this will set the species to be clamped or not in all tetrahedral elements of the compartment.</p>"}}, "Reaction": {"K": {"@code": ["sim.comp.reac['fwd'].K = kf", "sim.comp.reac['bkw'].K = kf"], "@doc": "<p> Sets the macroscopic reaction constant of reaction with identifier string reac in compartment with identifier string comp to kf. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based simulation this method sets the reaction constant in all tetrahedral elements of the compartment to kf</p><p>Note: The default value still comes from the steps.model description, so calling reset() will return the reaction constant to that value.</p>"}, "Active": {"@code": ["sim.comp.reac['fwd'].Active = active", "sim.comp.reac['bkw'].Active = active"], "@doc": "<p> Activate (active = True) or deactivate (active = False) a reaction with identifier string reac in compartment with identifier string comp. If a reaction is not active this means that a reaction will never occur regardless of whether the reactants are present in sufficient numbers or not.</p><p>Note: In a mesh-based simulation this will activate/deactivate the reaction in all tetrahedral elements in the compartment.</p>"}}, "Diffusion": {"Active": {"@code": ["sim.comp.diff.Active = active"], "@doc": "<p> Activate (active = True) or deactivate (active = False) a diffusion rule with identifier string diff in compartment with identifier string comp. If diffusion of a species is inactive this means the molecules will remain in place and is effectively the same as setting the diffusion constant to zero</p>"}, "D": {"@code": ["sim.comp.diff.D = dcst"], "@doc": "<p> Sets the diffusion constant of diffusion rule with identifier string diff in compartment with identifier string comp to dcst (in m^2/s).</p><p>Note: This method will set the diffusion constant in all tetrahedral elements in the compartment.</p><p>Note: The default value still comes from the steps.model description, so calling reset() will return the diffusion constants to that value.</p>"}}}, "Patch": {"Species": {"Count": {"@code": ["sim.patch.spec.Count = n"], "@doc": "<p> DEPRECATED Sets the number of molecules of species with identifier string spec in patch with identifier string patch to n. Note: in a mesh-based simulation the molecules are divided as equally as possible over all triangular elements in the patch (i.e. a uniform distribution).</p>"}, "Amount": {"@code": ["sim.patch.spec.Amount = a"], "@doc": "<p> DEPRECATED Sets the amount (in mols) of species with identifier string spec in patch with identifier string patch to a. In a discrete solver, such as Wmdirect and Tetexact, this continuous value is converted internally into a discrete number of molecules by multiplication with Avogadro's number.</p><p>Note: in a mesh-based simulation the molecules are divided as equally as possible over all triangular elements in the patch (i.e. a uniform distribution).</p>"}, "Clamped": {"@code": ["sim.patch.spec.Clamped = clamped"], "@doc": "<p> DEPRECATED Sets whether the species with identifier string spec in patch with identifier string patch is clamped (clamped = True) or not (clamped = False). If a species is clamped the number of molecules stays the same regardless of surface reactions that consume or produce molecules of the species.</p><p>Note: in a mesh-based simulation this will set the species to be clamped in all triangular elements of the patch.</p>"}}, "Reaction": {"K": {"@code": ["sim.patch.sreac['fwd'].K = kf", "sim.patch.sreac['bkw'].K = kf"], "@doc": "<p> Sets the macroscopic reaction constant of surface reaction with identifier string sreac in patch with identifier string patch to kf. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based simulation this method sets the surface reaction constant in all triangular elements of the patch to kf.</p><p>Note: The default value still comes from the steps.model description, so calling reset() will return the surface reaction constant to that value.</p>"}, "Active": {"@code": ["sim.patch.sreac['fwd'].Active = active", "sim.patch.sreac['bkw'].Active = active"], "@doc": "<p> Activate (active = True) or deactivate (active = False) a surface reaction with identifier string sreac in patch with identifier string patch. If a surface reaction is not active this means that a reaction will never occur regardless of whether the reactants are present in sufficient numbers or not.</p><p>Note: In a mesh-based simulation this will activate/ deactivate the reaction in all triangular elements in the patch.</p>"}}}, "Diff. Boundary": {"Species": {"DiffusionActive": {"@code": ["sim.diffb.spec.DiffusionActive = val"], "@doc": "<p> DEPRECATED Activates or inactivates diffusion across a diffusion boundary for a species.</p>"}, "Dcst": {"@code": ["sim.diffb.spec.Dcst = val", "sim.diffb(direc=comp2).spec.Dcst = val"], "@doc": "<p> DEPRECATED Set the diffusion constant of tetrahedrons across a diffusion boundary. If direc is provided, only set dcsts of diffusion towards it (Directional dcsts of diffusions in tetrahedrons in the other compartment of the diffusion boundary towards tetrahedons in the direction compartment).</p>"}}}, "Surf. Diff. Boundary": {"Species": {"DiffusionActive": {"@code": ["sim.sdiffb.spec.DiffusionActive = val"], "@doc": "<p> DEPRECATED Activates or inactivates diffusion across a surface diffusion boundary for a species.</p>"}, "Dcst": {"@code": ["sim.sdiffb.spec.Dcst = val", "sim.diffb(direc=patch2).spec.Dcst = val"], "@doc": "<p> DEPRECATED Set the diffusion constant of triangles across a surface diffusion boundary. If direc is provided, only set dcsts of diffusion towards it (Directional dcsts of diffusions in triangles in the other patches of the diffusion boundary towards triangles in the direction patch).</p>"}}}, "Region of Interest": {"Species": {"Count": {"@code": ["sim.roi.spec.Count = n"], "@doc": "<p> DEPRECATED Set the count of a species in a ROI.</p>"}, "Conc": {"@code": ["sim.roi.spec.Conc = conc"], "@doc": "<p> DEPRECATED Set the concentration of a species in a ROI.</p>"}, "Amount": {"@code": ["sim.roi.spec.Amount = a"], "@doc": "<p> DEPRECATED Set the amount of a species in a ROI.</p>"}, "Clamped": {"@code": ["sim.roi.spec.Clamped = clamped"], "@doc": "<p> DEPRECATED Set a species in a ROI to be clamped or not. The count of species s in the ROI is clamped if b is True, not clamped if b is False.</p>"}}}, "Tetrahedron": {"Species": {"Count": {"@code": ["sim.TET(tet).spec.Count = n", "sim.TETS(tetLst).spec.Count = n"], "@doc": "<p> DEPRECATED Sets the number of molecules of species with identifier string spec in tetrahedral element tet to n.</p>"}, "Conc": {"@code": ["sim.TET(tet).spec.Conc = conc", "sim.TETS(tetLst).spec.Conc = conc"], "@doc": "<p> DEPRECATED Sets the concentration (in Molar units) of species with identifier string spec in a tetrahedral element tet to conc.This continuous value must be converted internally to a discrete number of molecules.</p><p>Due to the small volumes of tetrahedral elements the difference between 'rounding up' and 'rounding down' can be a large difference in concentration.</p>"}, "Amount": {"@code": ["sim.TET(tet).spec.Amount = a", "sim.TETS(tetLst).spec.Amount = a"], "@doc": "<p> DEPRECATED Sets the amount (in mols) of species with identifier string spec in tetrahedral element tet to a. This continuous value must be converted internally to a discrete number of molecules by multiplication with Avogadro's number.</p><p>Due to the small volumes of tetrahedral elements the difference between 'rounding up' and 'rounding down' can be a significant difference in concentration.</p>"}, "Clamped": {"@code": ["sim.TET(tet).spec.Clamped = clamped", "sim.TETS(tetLst).spec.Clamped = clamped"], "@doc": "<p> DEPRECATED Sets whether the concentration of species spec in tetrahedral element tet is clamped (clamped = True) or not (clamped = False). If a species is clamped the concentration stays the same regardless of reactions that consume or produce molecules of the species or diffusion of the species into or out of the tetrahedral element.</p>"}}, "Reaction": {"K": {"@code": ["sim.TET(tet).reac['fwd'].K = kf", "sim.TET(tet).reac['bkw'].K = kf", "sim.TETS(tetLst).reac['fwd'].K = kf", "sim.TETS(tetLst).reac['bkw'].K = kf"], "@doc": "<p> Sets the macroscopic reaction constant of reaction with identifier string reac in tetrahedral element tet to kf. The units of the reaction constant depends on the order of the reaction.</p>"}, "Active": {"@code": ["sim.TET(tet).reac['fwd'].Active = active", "sim.TET(tet).reac['bkw'].Active = active", "sim.TETS(tetLst).reac['fwd'].Active = active", "sim.TETS(tetLst).reac['bkw'].Active = active"], "@doc": "<p> Activate (active = True) or deactivate (active = False) a reaction with identifier string reac in tetrahedral element tet. If it's not active this means that the reaction will never occur regardless of whether reactants are present in sufficient numbers or not.</p>"}}, "Diffusion": {"Active": {"@code": ["sim.TET(tet).diff.Active = active", "sim.TETS(tetLst).diff.Active = active"], "@doc": "<p> Activate (active = True) or deactivate (active = False) diffusion rule with identifier string diff in tetrahedral element tet. If diffusion of a species is inactive this means the molecules will never diffuse out of the tetrahedron and has the same effect as a diffusion constant of zero.</p>"}, "D": {"@code": ["sim.TET(tet).diff.D = dcst", "sim.TET(tet).diff(direc=tet2).D = dcst", "sim.TETS(tetLst).diff.D = dcst"], "@doc": "<p> Sets the diffusion constant of diffusion rule with identifier string diff in tetrahedral element tet to dcst (in m^2/s). Specify direc to set the constant only towards a given tetrahedron direction.</p>"}}, "V": {"@code": ["sim.TET(tet).V = val", "sim.TETS(tetLst).V = val"], "@doc": "<p> Set the potential (in volts) of tetrahedral element tet.</p>"}, "VClamped": {"@code": ["sim.TET(tet).VClamped = clamped", "sim.TETS(tetLst).VClamped = clamped"], "@doc": "<p> Sets whether the potential of tetrahedral element tet is clamped (clamped = True) or not (clamped = False).</p>"}}, "Triangle": {"Species": {"Count": {"@code": ["sim.TRI(tri).spec.Count = n", "sim.TRIS(triLst).spec.Count = n"], "@doc": "<p> DEPRECATED Sets the number of molecules of species with identifier string spec in triangular element tri to n.</p>"}, "Amount": {"@code": ["sim.TRI(tri).spec.Amount = a", "sim.TRIS(triLst).spec.Amount = a"], "@doc": "<p> DEPRECATED Sets the amount (in mols) of species with identifier string spec in triangular element tri to a. This continuous value must be converted internally to a discrete number of molecules by multiplication with Avogadro's number.</p>"}, "Clamped": {"@code": ["sim.TRI(tri).spec.Clamped = clamped", "sim.TRIS(triLst).spec.Clamped = clamped"], "@doc": "<p> DEPRECATED Sets whether the concentration of species spec in triangular element tri is clamped (clamped = True) or not (clamped = False). If a species is clamped the concentration stays the same regardless of reactions that consume or produce molecules of the species.</p>"}}, "Reaction": {"K": {"@code": ["sim.TRI(tri).sreac['fwd'].K = kf", "sim.TRI(tri).sreac['bkw'].K = kf", "sim.TRIS(triLst).sreac['fwd'].K = kf", "sim.TRIS(triLst).sreac['bkw'].K = kf"], "@doc": "<p> Sets the macroscopic reaction constant of surface reaction with identifier string sreac in triangular element tri to kf. The units of the reaction constant depends on the order of the reaction.</p>"}, "Active": {"@code": ["sim.TRI(tri).sreac['fwd'].Active = active", "sim.TRI(tri).sreac['bkw'].Active = active", "sim.TRIS(triLst).sreac['fwd'].Active = active", "sim.TRIS(triLst).sreac['bkw'].Active = active"], "@doc": "<p> Activate (active = True) or deactivate (active = False) a surface reaction with identifier string sreac in triangular element tri. If it's not active this means that the surface reaction will never occur regardless of whether reactants are present in sufficient numbers or not.</p>"}}, "Diffusion": {"D": {"@code": ["sim.TRI(tri).sdiff.D = dcst", "sim.TRI(tri).sdiff(direc=tri2).D = dcst", "sim.TRIS(triLst).sdiff.D = dcst"], "@doc": "<p> Sets the diffusion constant of diffusion rule with identifier string diff in triangle element tri to dcst. Specify direc to set the constant only towards a given triangle direction.</p>"}}, "V": {"@code": ["sim.TRI(tri).V = val", "sim.TRIS(triLst).V = val"], "@doc": "<p> Set the potential (in volts) of triangle element tri.</p>"}, "VClamped": {"@code": ["sim.TRI(tri).VClamped = clamped", "sim.TRIS(triLst).VClamped = clamped"], "@doc": "<p> Sets whether the potential of triangle element tri is clamped (clamped = True) or not (clamped = False).</p>"}, "IClamp": {"@code": ["sim.TRI(tri).IClamp = i", "sim.TRIS(triLst).IClamp = i"], "@doc": "<p> Set current clamp to triangle element tri to current i (amps). NOTE: Convention is maintained that a positive current clamp is depolarizing, a negative current clamp is hyperpolarizing.</p>"}, "Capac": {"@code": ["sim.TRI(tri).Capac = cap", "sim.TRIS(triLst).Capac = cap"], "@doc": "<p> Sets the specific membrane capacitance (in farad / m^2) of tri tri.</p>"}}, "Membrane": {"Potential": {"@code": ["sim.memb.Potential = val"], "@doc": "<p> Sets the potential (in volts) of membrane with string identifier memb. NOTE: This method will set the potential of all nodes in the volume conductor to the same value.</p>"}, "Capac": {"@code": ["sim.memb.Capac = cap"], "@doc": "<p> Sets the specific membrane capacitance (in farad / m^2) of membrane with string identifier memb.</p>"}, "VolRes": {"@code": ["sim.memb.VolRes = val"], "@doc": "<p> Sets the bulk electrical resistivity (in ohm.m) of the volume conductor assocaited with membrane with string identifier memb.</p>"}, "Res": {"@code": ["sim.memb.Res = steps.utils.Params(ro, vrev)"], "@doc": "<p> Sets the surface electrical resistivity ro (in ohm.m^2) of the membrane with string identifier memb. Reversal potential vrev is required in Volts.</p>"}}, "Vertex": {"V": {"@code": ["sim.VERT(vert).V = val", "sim.VERTS(vertLst).V = val"], "@doc": "<p> Set the potential (in volts) of vertex element vert.</p>"}, "VClamped": {"@code": ["sim.VERT(vert).VClamped = clamped", "sim.VERTS(vertLst).VClamped = clamped"], "@doc": "<p> Sets whether the potential of vertex element vert is clamped (clamped = True) or not (clamped = False).</p>"}, "IClamp": {"@code": ["sim.VERT(vert).IClamp = i", "sim.VERTS(vertLst).IClamp = i"], "@doc": "<p> Set current clamp to vertex element vert to current i (Amps). NOTE: Convention is maintained that a positive current clamp is depolarizing, a negative current clamp is hyperpolarizing.</p>"}}}, "TetOpSplit": {"Compartment": {"Species": {"Count": {"@code": ["sim.comp.spec.Count = n"], "@doc": "<p> DEPRECATED Set the number of molecules of a species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined count from all tetrahedral elements in the compartment.</p>"}, "Conc": {"@code": ["sim.comp.spec.Conc = conc"], "@doc": "<p> DEPRECATED Sets the concentration (in Molar units) of species with identifier string spec in compartment with identifier string comp to conc. In a discrete solver the continuous concentration is converted to a discrete number of molecules.</p><p>Note: in a mesh-based simulation the molecules are divided as equally as possible over all tetrahedral elements in the compartment (i.e. a uniform distribution).</p>"}, "Amount": {"@code": ["sim.comp.spec.Amount = a"], "@doc": "<p> DEPRECATED Set the amount (in mols) of species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined amount from all tetrahedral elements in the compartment.</p>"}, "Clamped": {"@code": ["sim.comp.spec.Clamped = clamped"], "@doc": "<p> DEPRECATED Sets whether the concentration of species with identifier string spec in compartment with identifier string comp is clamped (clamped = True) or not (clamped = False). If a species is clamped the concentration stays the same regardless of reactions that consume or produce molecules of the species.</p><p>Note: in a mesh-based simulation this will set the species to be clamped or not in all tetrahedral elements of the compartment.</p>"}}, "Reaction": {"K": {"@code": ["sim.comp.reac['fwd'].K = kf", "sim.comp.reac['bkw'].K = kf"], "@doc": "<p> Sets the macroscopic reaction constant of reaction with identifier string reac in compartment with identifier string comp to kf. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based simulation this method sets the reaction constant in all tetrahedral elements of the compartment to kf</p><p>Note: The default value still comes from the steps.model description, so calling reset() will return the reaction constant to that value.</p>"}, "Active": {"@code": ["sim.comp.reac['fwd'].Active = active", "sim.comp.reac['bkw'].Active = active"], "@doc": "<p> Activate (active = True) or deactivate (active = False) a reaction with identifier string reac in compartment with identifier string comp. If a reaction is not active this means that a reaction will never occur regardless of whether the reactants are present in sufficient numbers or not.</p><p>Note: In a mesh-based simulation this will activate/deactivate the reaction in all tetrahedral elements in the compartment.</p>"}}, "Diffusion": {"Active": {"@code": ["sim.comp.diff.Active = active"], "@doc": "<p> Activate (active = True) or deactivate (active = False) a diffusion rule with identifier string diff in compartment with identifier string comp. If diffusion of a species is inactive this means the molecules will remain in place and is effectively the same as setting the diffusion constant to zero</p>"}, "D": {"@code": ["sim.comp.diff.D = dcst"], "@doc": "<p> Sets the diffusion constant of diffusion rule with identifier string diff in compartment with identifier string comp to dcst (in m^2/s).</p><p>Note: This method will set the diffusion constant in all tetrahedral elements in the compartment.</p><p>Note: The default value still comes from the steps.model description, so calling reset() will return the diffusion constants to that value.</p>"}}}, "Patch": {"Species": {"Count": {"@code": ["sim.patch.spec.Count = n"], "@doc": "<p> DEPRECATED Sets the number of molecules of species with identifier string spec in patch with identifier string patch to n. Note: in a mesh-based simulation the molecules are divided as equally as possible over all triangular elements in the patch (i.e. a uniform distribution).</p>"}, "Amount": {"@code": ["sim.patch.spec.Amount = a"], "@doc": "<p> DEPRECATED Sets the amount (in mols) of species with identifier string spec in patch with identifier string patch to a. In a discrete solver, such as Wmdirect and Tetexact, this continuous value is converted internally into a discrete number of molecules by multiplication with Avogadro's number.</p><p>Note: in a mesh-based simulation the molecules are divided as equally as possible over all triangular elements in the patch (i.e. a uniform distribution).</p>"}, "Clamped": {"@code": ["sim.patch.spec.Clamped = clamped"], "@doc": "<p> DEPRECATED Sets whether the species with identifier string spec in patch with identifier string patch is clamped (clamped = True) or not (clamped = False). If a species is clamped the number of molecules stays the same regardless of surface reactions that consume or produce molecules of the species.</p><p>Note: in a mesh-based simulation this will set the species to be clamped in all triangular elements of the patch.</p>"}}, "Reaction": {"K": {"@code": ["sim.patch.sreac['fwd'].K = kf", "sim.patch.sreac['bkw'].K = kf"], "@doc": "<p> Sets the macroscopic reaction constant of surface reaction with identifier string sreac in patch with identifier string patch to kf. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based simulation this method sets the surface reaction constant in all triangular elements of the patch to kf.</p><p>Note: The default value still comes from the steps.model description, so calling reset() will return the surface reaction constant to that value.</p>"}, "Active": {"@code": ["sim.patch.sreac['fwd'].Active = active", "sim.patch.sreac['bkw'].Active = active"], "@doc": "<p> Activate (active = True) or deactivate (active = False) a surface reaction with identifier string sreac in patch with identifier string patch. If a surface reaction is not active this means that a reaction will never occur regardless of whether the reactants are present in sufficient numbers or not.</p><p>Note: In a mesh-based simulation this will activate/ deactivate the reaction in all triangular elements in the patch.</p>"}}}, "Diff. Boundary": {"Species": {"DiffusionActive": {"@code": ["sim.diffb.spec.DiffusionActive = val"], "@doc": "<p> DEPRECATED Activates or inactivates diffusion across a diffusion boundary for a species.</p>"}, "Dcst": {"@code": ["sim.diffb.spec.Dcst = val", "sim.diffb(direc=comp2).spec.Dcst = val"], "@doc": "<p> DEPRECATED Set the diffusion constant of tetrahedrons across a diffusion boundary. If direc is provided, only set dcsts of diffusion towards it (Directional dcsts of diffusions in tetrahedrons in the other compartment of the diffusion boundary towards tetrahedons in the direction compartment).</p>"}}}, "Surf. Diff. Boundary": {"Species": {"DiffusionActive": {"@code": ["sim.sdiffb.spec.DiffusionActive = val"], "@doc": "<p> DEPRECATED Activates or inactivates diffusion across a surface diffusion boundary for a species.</p>"}, "Dcst": {"@code": ["sim.sdiffb.spec.Dcst = val", "sim.diffb(direc=patch2).spec.Dcst = val"], "@doc": "<p> DEPRECATED Set the diffusion constant of triangles across a surface diffusion boundary. If direc is provided, only set dcsts of diffusion towards it (Directional dcsts of diffusions in triangles in the other patches of the diffusion boundary towards triangles in the direction patch).</p>"}}}, "Region of Interest": {"Species": {"Count": {"@code": ["sim.roi.spec.Count = n"], "@doc": "<p> DEPRECATED Set the count of a species in a ROI.</p>"}, "Conc": {"@code": ["sim.roi.spec.Conc = conc"], "@doc": "<p> DEPRECATED Set the concentration of a species in a ROI.</p>"}, "Amount": {"@code": ["sim.roi.spec.Amount = a"], "@doc": "<p> DEPRECATED Set the amount of a species in a ROI.</p>"}, "Clamped": {"@code": ["sim.roi.spec.Clamped = clamped"], "@doc": "<p> DEPRECATED Set a species in a ROI to be clamped or not. The count of species s in the ROI is clamped if b is True, not clamped if b is False.</p>"}}, "Reaction": {"K": {"@code": ["sim.roi.reac['fwd'].K = kf", "sim.roi.reac['bkw'].K = kf"], "@doc": "<p> Sets the macroscopic reaction constant of reaction with identifier string r in a ROI with identifier string roi to kf. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: The default value still comes from the steps.model description, so calling reset() will return the reaction constant to that value.</p>"}, "Active": {"@code": ["sim.roi.reac['fwd'].Active = active", "sim.roi.reac['bkw'].Active = active"], "@doc": "<p> Set reaction r in a ROI to be active or not.</p>"}}, "Diffusion": {"Active": {"@code": ["sim.roi.diff.Active = active"], "@doc": "<p> Set diffusion d in a ROI to be active or not.</p>"}, "D": {"@code": ["sim.roi.diff.D = dcst", "sim.roi.diff(direc=tet2).D = dcst"], "@doc": "<p> Sets the macroscopic diffusion constant of diffusion with identifier string diff in a ROI with identifier string roi to dcst.</p><p>Note: The default value still comes from the steps.model description, so calling reset() will return the diffusion constant to that value.</p>"}}}, "Tetrahedron": {"Species": {"Count": {"@code": ["sim.TET(tet).spec.Count = n", "sim.TETS(tetLst).spec.Count = n"], "@doc": "<p> DEPRECATED Sets the number of molecules of species with identifier string spec in tetrahedral element tet to n.</p>"}, "Conc": {"@code": ["sim.TET(tet).spec.Conc = conc", "sim.TETS(tetLst).spec.Conc = conc"], "@doc": "<p> DEPRECATED Sets the concentration (in Molar units) of species with identifier string spec in a tetrahedral element tet to conc.This continuous value must be converted internally to a discrete number of molecules.</p><p>Due to the small volumes of tetrahedral elements the difference between 'rounding up' and 'rounding down' can be a large difference in concentration.</p>"}, "Amount": {"@code": ["sim.TET(tet).spec.Amount = a", "sim.TETS(tetLst).spec.Amount = a"], "@doc": "<p> DEPRECATED Sets the amount (in mols) of species with identifier string spec in tetrahedral element tet to a. This continuous value must be converted internally to a discrete number of molecules by multiplication with Avogadro's number.</p><p>Due to the small volumes of tetrahedral elements the difference between 'rounding up' and 'rounding down' can be a significant difference in concentration.</p>"}, "Clamped": {"@code": ["sim.TET(tet).spec.Clamped = clamped", "sim.TETS(tetLst).spec.Clamped = clamped"], "@doc": "<p> DEPRECATED Sets whether the concentration of species spec in tetrahedral element tet is clamped (clamped = True) or not (clamped = False). If a species is clamped the concentration stays the same regardless of reactions that consume or produce molecules of the species or diffusion of the species into or out of the tetrahedral element.</p>"}}, "Reaction": {"K": {"@code": ["sim.TET(tet).reac['fwd'].K = kf", "sim.TET(tet).reac['bkw'].K = kf", "sim.TETS(tetLst).reac['fwd'].K = kf", "sim.TETS(tetLst).reac['bkw'].K = kf"], "@doc": "<p> Sets the macroscopic reaction constant of reaction with identifier string reac in tetrahedral element tet to kf. The units of the reaction constant depends on the order of the reaction.</p>"}, "Active": {"@code": ["sim.TET(tet).reac['fwd'].Active = active", "sim.TET(tet).reac['bkw'].Active = active", "sim.TETS(tetLst).reac['fwd'].Active = active", "sim.TETS(tetLst).reac['bkw'].Active = active"], "@doc": "<p> Activate (active = True) or deactivate (active = False) a reaction with identifier string reac in tetrahedral element tet. If it's not active this means that the reaction will never occur regardless of whether reactants are present in sufficient numbers or not.</p>"}}, "Diffusion": {"Active": {"@code": ["sim.TET(tet).diff.Active = active", "sim.TETS(tetLst).diff.Active = active"], "@doc": "<p> Activate (active = True) or deactivate (active = False) diffusion rule with identifier string diff in tetrahedral element tet. If diffusion of a species is inactive this means the molecules will never diffuse out of the tetrahedron and has the same effect as a diffusion constant of zero.</p>"}, "D": {"@code": ["sim.TET(tet).diff.D = dcst", "sim.TET(tet).diff(direc=tet2).D = dcst", "sim.TETS(tetLst).diff.D = dcst"], "@doc": "<p> Sets the diffusion constant of diffusion rule with identifier string diff in tetrahedral element tet to dcst (in m^2/s). Specify direc to set the constant only towards a given tetrahedron direction.</p>"}}, "V": {"@code": ["sim.TET(tet).V = val", "sim.TETS(tetLst).V = val"], "@doc": "<p> Set the potential (in volts) of tetrahedral element tet.</p>"}, "VClamped": {"@code": ["sim.TET(tet).VClamped = clamped", "sim.TETS(tetLst).VClamped = clamped"], "@doc": "<p> Sets whether the potential of tetrahedral element tet is clamped (clamped = True) or not (clamped = False).</p>"}}, "Triangle": {"Species": {"Count": {"@code": ["sim.TRI(tri).spec.Count = n", "sim.TRIS(triLst).spec.Count = n"], "@doc": "<p> DEPRECATED Sets the number of molecules of species with identifier string spec in triangular element tri to n.</p>"}, "Amount": {"@code": ["sim.TRI(tri).spec.Amount = a", "sim.TRIS(triLst).spec.Amount = a"], "@doc": "<p> DEPRECATED Sets the amount (in mols) of species with identifier string spec in triangular element tri to a. This continuous value must be converted internally to a discrete number of molecules by multiplication with Avogadro's number.</p>"}, "Clamped": {"@code": ["sim.TRI(tri).spec.Clamped = clamped", "sim.TRIS(triLst).spec.Clamped = clamped"], "@doc": "<p> DEPRECATED Sets whether the concentration of species spec in triangular element tri is clamped (clamped = True) or not (clamped = False). If a species is clamped the concentration stays the same regardless of reactions that consume or produce molecules of the species.</p>"}}, "Reaction": {"K": {"@code": ["sim.TRI(tri).sreac['fwd'].K = kf", "sim.TRI(tri).sreac['bkw'].K = kf", "sim.TRIS(triLst).sreac['fwd'].K = kf", "sim.TRIS(triLst).sreac['bkw'].K = kf"], "@doc": "<p> Sets the macroscopic reaction constant of surface reaction with identifier string sreac in triangular element tri to kf. The units of the reaction constant depends on the order of the reaction.</p>"}, "Active": {"@code": ["sim.TRI(tri).sreac['fwd'].Active = active", "sim.TRI(tri).sreac['bkw'].Active = active", "sim.TRIS(triLst).sreac['fwd'].Active = active", "sim.TRIS(triLst).sreac['bkw'].Active = active"], "@doc": "<p> Activate (active = True) or deactivate (active = False) a surface reaction with identifier string sreac in triangular element tri. If it's not active this means that the surface reaction will never occur regardless of whether reactants are present in sufficient numbers or not.</p>"}}, "Diffusion": {"D": {"@code": ["sim.TRI(tri).sdiff.D = dcst", "sim.TRI(tri).sdiff(direc=tri2).D = dcst", "sim.TRIS(triLst).sdiff.D = dcst"], "@doc": "<p> Sets the diffusion constant of diffusion rule with identifier string diff in triangle element tri to dcst. Specify direc to set the constant only towards a given triangle direction.</p>"}}, "V": {"@code": ["sim.TRI(tri).V = val", "sim.TRIS(triLst).V = val"], "@doc": "<p> Set the potential (in volts) of triangle element tri.</p>"}, "VClamped": {"@code": ["sim.TRI(tri).VClamped = clamped", "sim.TRIS(triLst).VClamped = clamped"], "@doc": "<p> Sets whether the potential of triangle element tri is clamped (clamped = True) or not (clamped = False).</p>"}, "IClamp": {"@code": ["sim.TRI(tri).IClamp = i", "sim.TRIS(triLst).IClamp = i"], "@doc": "<p> Set current clamp to triangle element tri to current i (amps). NOTE: Convention is maintained that a positive current clamp is depolarizing, a negative current clamp is hyperpolarizing.</p>"}, "Capac": {"@code": ["sim.TRI(tri).Capac = cap", "sim.TRIS(triLst).Capac = cap"], "@doc": "<p> Sets the specific membrane capacitance (in farad / m^2) of tri tri.</p>"}}, "Membrane": {"Potential": {"@code": ["sim.memb.Potential = val"], "@doc": "<p> Sets the potential (in volts) of membrane with string identifier memb. NOTE: This method will set the potential of all nodes in the volume conductor to the same value.</p>"}, "Capac": {"@code": ["sim.memb.Capac = cap"], "@doc": "<p> Sets the specific membrane capacitance (in farad / m^2) of membrane with string identifier memb.</p>"}, "VolRes": {"@code": ["sim.memb.VolRes = val"], "@doc": "<p> Sets the bulk electrical resistivity (in ohm.m) of the volume conductor assocaited with membrane with string identifier memb.</p>"}, "Res": {"@code": ["sim.memb.Res = steps.utils.Params(ro, vrev)"], "@doc": "<p> Sets the surface electrical resistivity ro (in ohm.m^2) of the membrane with string identifier memb. Reversal potential vrev is required in Volts.</p>"}}, "Vertex": {"V": {"@code": ["sim.VERT(vert).V = val", "sim.VERTS(vertLst).V = val"], "@doc": "<p> Set the potential (in volts) of vertex element vert.</p>"}, "VClamped": {"@code": ["sim.VERT(vert).VClamped = clamped", "sim.VERTS(vertLst).VClamped = clamped"], "@doc": "<p> Sets whether the potential of vertex element vert is clamped (clamped = True) or not (clamped = False).</p>"}, "IClamp": {"@code": ["sim.VERT(vert).IClamp = i", "sim.VERTS(vertLst).IClamp = i"], "@doc": "<p> Set current clamp to vertex element vert to current i (Amps). NOTE: Convention is maintained that a positive current clamp is depolarizing, a negative current clamp is hyperpolarizing.</p>"}}}, "DistTetOpSplit": {"Patch": {"Reaction": {"K": {"@code": ["sim.patch.sreac['fwd'].K = kf", "sim.patch.sreac['bkw'].K = kf"], "@doc": "<p> Sets the macroscopic reaction constant of surface reaction with identifier string sreac in patch with identifier string pat to kf. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based simulation this method sets the surface reaction constant in all triangular elements of the patch to kf.</p><p>Note: The default value still comes from the steps.model description, so calling reset() will return the surface reaction constant to that value.</p>"}}}, "Membrane": {"IClamp": {"@code": ["sim.memb.IClamp = i"], "@doc": "<p> Set a current clamp on a membrane</p>"}, "Potential": {"@code": ["sim.memb.Potential = val"], "@doc": "<p> Sets the potential (in volts) of membrane with string identifier memb. NOTE: This method will set the potential of all nodes in the volume conductor to the same value.</p>"}, "Res": {"@code": ["sim.memb.Res = steps.utils.Params(ro, vrev)"], "@doc": "<p> Sets the surface electrical resistivity ro (in ohm.m^2) of the membrane with string identifier memb. Reversal potential vrev is required in Volts.</p>"}}, "Vertex": {"IClamp": {"@code": ["sim.VERT(vert).IClamp = i", "sim.VERTS(vertLst).IClamp = i"], "@doc": "<p> Set the current clamp on the vertex vert, in ampere. NOTE: Convention is maintained that a positive current clamp is depolarizing, a negative current clamp is hyperpolarizing.</p>"}}}}}