{"get": {"Wmdirect": {"Compartment": {"Species": {"Amount": "val = sim.comp.spec.Amount@<p> Returns the amount (in mols) of species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined amount from all tetrahedral elements in the compartment.</p>", "Clamped": "val = sim.comp.spec.Clamped@<p> Returns True if species with identifier string spec in compartment with identifier string comp is clamped, which means the concentration remains the same regardless of reactions that consume or produce molecules of this species. Returns False if not.</p><p>Note: in a mesh-based simulation it returns True only if the species is clamped in all tetrahedral elements of the compartment.</p>", "Conc": "val = sim.comp.spec.Conc@<p> Returns the concentration (in Molar units) of species with identifier string spec in compartment with identifier string comp.</p><p>Note: in a mesh-based simulation this is calculated from the combined number of molecules from all tetrahedral elements in the compartment and the total volume of the tetrahedrons.</p>", "Count": "val = sim.comp.spec.Count@<p> Returns the number of molecules of a species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined count from all tetrahedral elements in the compartment.</p>"}, "Diffusion": {"Active": "val = sim.comp.diff.Active@<p> Returns whether a diffusion rule with identifier string diff in compartment with identifier string comp is active (True) or not (False). If diffusion of a species is inactive this means the molecules will remain in place and has the same effect as a diffusion constant of zero.</p>", "D": "val = sim.comp.diff.D@<p> Returns the diffusion constant of diffusion rule with identifier string diff in compartment with identifier string comp. This constant is in units m^2/s.</p><p>Note: In a mesh-based solver the value for the compartment is returned, although individual or groups of tetrahedral elements may have different values (set with setTetDiffD).</p>"}, "Reaction": {"A": "val = sim.comp.reac['fwd'].A</br>val = sim.comp.reac['bkw'].A@<p> Returns the propensity of reaction with identifier string reac in compartment with identifier string comp.</p><p>The propensity of a reaction is a function of state and is defined as the function whose product with infinitesimal time dt gives the probability that the reaction will occur in the next dt. It is the 'stochastic reaction constant' multiplied by 'h_mu'.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), the propensity of a reaction in a compartment is computed as the sum of the propensities in all tetrahedral elements of the compartment.</p>", "Active": "val = sim.comp.reac['fwd'].Active</br>val = sim.comp.reac['bkw'].Active@<p> Returns whether a reaction with identifier string reac in compartment with identifier string comp is active (True) or not (False). If it's not active this means that a reaction will never occur regardless of whether the reactants are present in sufficient numbers or not.</p><p>Note: In a mesh-based simulation this method will return True only if the reaction is active in all tetrahedral elements in the compartment.</p>", "C": "val = sim.comp.reac['fwd'].C</br>val = sim.comp.reac['bkw'].C@<p> Returns the 'stochastic reaction constant' (or 'specific probability rate constant') of reaction with identifier string reac in compartment with identifier string comp.</p><p>The 'stochastic reaction constant' multiplied by infinitesimal time interval dt gives the average probability that one reaction channel of this reaction type will react accordingly in dt.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), the stochastic reaction constant is computed as the weighted mean of the stochastic reaction constants in all tetrahedral elements of the compartment.</p>", "Extent": "val = sim.comp.reac['fwd'].Extent</br>val = sim.comp.reac['bkw'].Extent@<p> Return the extent of reaction with identifier string reac in compartment with identifier string comp, that is the number of times the reaction has occurred up to the current simulation time.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), returns the sum of the reaction extents in all tetrahedral elements of the compartment.</p>", "H": "val = sim.comp.reac['fwd'].H</br>val = sim.comp.reac['bkw'].H@<p> Returns h_mu, the distinct number of ways in which reaction with identifier string reac can occur in compartment with identifier string comp, by computing the product of its reactants. Note: in a mesh-based simulation (i.e. Tetexact), returns the sum of the h_mu's over all tetrahedral elements in the compartment.</p>", "K": "val = sim.comp.reac['fwd'].K</br>val = sim.comp.reac['bkw'].K@<p> Returns the macroscopic reaction constant of reaction with identifier string reac in compartment with identifier string comp. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based simulation the value for the compartment is returned, although individual tetrahedral elements may have different values (set with setTetReacK).</p>"}, "Vol": "val = sim.comp.Vol@<p> Returns the volume of compartment with identifier string comp (in m^3).</p>"}, "Patch": {"Species": {"Amount": "val = sim.patch.spec.Amount@<p> Returns the amount (in mols) of species with identifier string spec in patch with identifier string pat.</p><p>Note: in a mesh-based simulation this is the combined amount from all triangular elements in the patch.</p>", "Clamped": "val = sim.patch.spec.Clamped@<p> Sets the amount (in mols) of species with identifier string spec in patch with identifier string pat to a. In a discrete solver, such as Wmdirect and Tetexact, this continuous value is converted internally into a discrete number of molecules by multiplication with Avogadro's number.</p><p>Note: in a mesh-based simulation the molecules are divided as equally as possible over all triangular elements in the patch (i.e. a uniform distribution).</p>", "Count": "val = sim.patch.spec.Count@<p> Returns the number of molecules of species with identifier string spec in patch with identifier string pat.Note: in a mesh-based simulation this is the combined count from all triangular elements in the patch.</p>"}, "Area": "val = sim.patch.Area@<p> Returns the area of patch with identifier string pat (in m^2).</p>", "Reaction": {"A": "val = sim.patch.reac['fwd'].A</br>val = sim.patch.reac['bkw'].A@<p> Returns the propensity of surface reaction with identifier string sreac in patch with identifier string pat. Note: in a mesh-based simulation (i.e. Tetexact), the propensity of a surface reaction in a patch is computed as the sum of the propensities in all triangular elements of the patch.</p>", "Active": "val = sim.patch.reac['fwd'].Active</br>val = sim.patch.reac['bkw'].Active@<p> Returns whether a voltage-dependent surface reaction with identifier string vsreac in patch with identifier string pat is active (True) or not (False). If it's not active this means that the voltage-dependent surface reaction will never occur regardless of whether the reactants are present in sufficient numbers or not.</p><p>Note: In a mesh-based simulation this method will return True only if the voltage-dependent surface reaction is active in all triangular elements in the patch.</p>", "C": "val = sim.patch.reac['fwd'].C</br>val = sim.patch.reac['bkw'].C@<p> Returns the 'stochastic reaction constant' (or 'specific probability rate constant') of surface reaction with identifier string sreac in patch with identifier string pat.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), the stochastic reaction constant is computed as the weighted mean of the stochastic reaction constants in all triangular elements of the patch.</p>", "Extent": "val = sim.patch.reac['fwd'].Extent</br>val = sim.patch.reac['bkw'].Extent@<p> Returns the extent of surface reaction with identifier string sreac in patch with identifier string pat, that is the number of times the surface reaction has occurred up to the current simulation time.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), returns the sum of the reaction extents in all triangular elements of the patch.</p>", "H": "val = sim.patch.reac['fwd'].H</br>val = sim.patch.reac['bkw'].H@<p> Returns h_mu, the distinct number of ways in which surface reaction with identifier string sreac can occur in patch with identifier string pat, by computing the product of its reactants. Note: in a mesh-based simulation (i.e. Tetexact), returns the sum of the h_mu's over all triangular elements in the patch.</p>", "K": "val = sim.patch.reac['fwd'].K</br>val = sim.patch.reac['bkw'].K@<p> Returns the macroscopic reaction constant of surface reaction with identifier string sreac in patch with identifier string pat. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based solver the value for the patch is returned, although individual triangle elements may have different values (set with setTriSReacK).</p>"}}}, "Wmrssa": {"Compartment": {"Species": {"Amount": "val = sim.comp.spec.Amount@<p> Returns the amount (in mols) of species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined amount from all tetrahedral elements in the compartment.</p>", "Clamped": "val = sim.comp.spec.Clamped@<p> Returns True if species with identifier string spec in compartment with identifier string comp is clamped, which means the concentration remains the same regardless of reactions that consume or produce molecules of this species. Returns False if not.</p><p>Note: in a mesh-based simulation it returns True only if the species is clamped in all tetrahedral elements of the compartment.</p>", "Conc": "val = sim.comp.spec.Conc@<p> Returns the concentration (in Molar units) of species with identifier string spec in compartment with identifier string comp.</p><p>Note: in a mesh-based simulation this is calculated from the combined number of molecules from all tetrahedral elements in the compartment and the total volume of the tetrahedrons.</p>", "Count": "val = sim.comp.spec.Count@<p> Returns the number of molecules of a species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined count from all tetrahedral elements in the compartment.</p>"}, "Diffusion": {"Active": "val = sim.comp.diff.Active@<p> Returns whether a diffusion rule with identifier string diff in compartment with identifier string comp is active (True) or not (False). If diffusion of a species is inactive this means the molecules will remain in place and has the same effect as a diffusion constant of zero.</p>", "D": "val = sim.comp.diff.D@<p> Returns the diffusion constant of diffusion rule with identifier string diff in compartment with identifier string comp. This constant is in units m^2/s.</p><p>Note: In a mesh-based solver the value for the compartment is returned, although individual or groups of tetrahedral elements may have different values (set with setTetDiffD).</p>"}, "Reaction": {"A": "val = sim.comp.reac['fwd'].A</br>val = sim.comp.reac['bkw'].A@<p> Returns the propensity of reaction with identifier string reac in compartment with identifier string comp.</p><p>The propensity of a reaction is a function of state and is defined as the function whose product with infinitesimal time dt gives the probability that the reaction will occur in the next dt. It is the 'stochastic reaction constant' multiplied by 'h_mu'.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), the propensity of a reaction in a compartment is computed as the sum of the propensities in all tetrahedral elements of the compartment.</p>", "Active": "val = sim.comp.reac['fwd'].Active</br>val = sim.comp.reac['bkw'].Active@<p> Returns whether a reaction with identifier string reac in compartment with identifier string comp is active (True) or not (False). If it's not active this means that a reaction will never occur regardless of whether the reactants are present in sufficient numbers or not.</p><p>Note: In a mesh-based simulation this method will return True only if the reaction is active in all tetrahedral elements in the compartment.</p>", "C": "val = sim.comp.reac['fwd'].C</br>val = sim.comp.reac['bkw'].C@<p> Returns the 'stochastic reaction constant' (or 'specific probability rate constant') of reaction with identifier string reac in compartment with identifier string comp.</p><p>The 'stochastic reaction constant' multiplied by infinitesimal time interval dt gives the average probability that one reaction channel of this reaction type will react accordingly in dt.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), the stochastic reaction constant is computed as the weighted mean of the stochastic reaction constants in all tetrahedral elements of the compartment.</p>", "Extent": "val = sim.comp.reac['fwd'].Extent</br>val = sim.comp.reac['bkw'].Extent@<p> Return the extent of reaction with identifier string reac in compartment with identifier string comp, that is the number of times the reaction has occurred up to the current simulation time.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), returns the sum of the reaction extents in all tetrahedral elements of the compartment.</p>", "H": "val = sim.comp.reac['fwd'].H</br>val = sim.comp.reac['bkw'].H@<p> Returns h_mu, the distinct number of ways in which reaction with identifier string reac can occur in compartment with identifier string comp, by computing the product of its reactants. Note: in a mesh-based simulation (i.e. Tetexact), returns the sum of the h_mu's over all tetrahedral elements in the compartment.</p>", "K": "val = sim.comp.reac['fwd'].K</br>val = sim.comp.reac['bkw'].K@<p> Returns the macroscopic reaction constant of reaction with identifier string reac in compartment with identifier string comp. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based simulation the value for the compartment is returned, although individual tetrahedral elements may have different values (set with setTetReacK).</p>"}, "Vol": "val = sim.comp.Vol@<p> Returns the volume of compartment with identifier string comp (in m^3).</p>"}, "Patch": {"Species": {"Amount": "val = sim.patch.spec.Amount@<p> Returns the amount (in mols) of species with identifier string spec in patch with identifier string pat.</p><p>Note: in a mesh-based simulation this is the combined amount from all triangular elements in the patch.</p>", "Clamped": "val = sim.patch.spec.Clamped@<p> Sets the amount (in mols) of species with identifier string spec in patch with identifier string pat to a. In a discrete solver, such as Wmdirect and Tetexact, this continuous value is converted internally into a discrete number of molecules by multiplication with Avogadro's number.</p><p>Note: in a mesh-based simulation the molecules are divided as equally as possible over all triangular elements in the patch (i.e. a uniform distribution).</p>", "Count": "val = sim.patch.spec.Count@<p> Returns the number of molecules of species with identifier string spec in patch with identifier string pat.Note: in a mesh-based simulation this is the combined count from all triangular elements in the patch.</p>"}, "Area": "val = sim.patch.Area@<p> Returns the area of patch with identifier string pat (in m^2).</p>", "Reaction": {"A": "val = sim.patch.reac['fwd'].A</br>val = sim.patch.reac['bkw'].A@<p> Returns the propensity of surface reaction with identifier string sreac in patch with identifier string pat. Note: in a mesh-based simulation (i.e. Tetexact), the propensity of a surface reaction in a patch is computed as the sum of the propensities in all triangular elements of the patch.</p>", "Active": "val = sim.patch.reac['fwd'].Active</br>val = sim.patch.reac['bkw'].Active@<p> Returns whether a voltage-dependent surface reaction with identifier string vsreac in patch with identifier string pat is active (True) or not (False). If it's not active this means that the voltage-dependent surface reaction will never occur regardless of whether the reactants are present in sufficient numbers or not.</p><p>Note: In a mesh-based simulation this method will return True only if the voltage-dependent surface reaction is active in all triangular elements in the patch.</p>", "C": "val = sim.patch.reac['fwd'].C</br>val = sim.patch.reac['bkw'].C@<p> Returns the 'stochastic reaction constant' (or 'specific probability rate constant') of surface reaction with identifier string sreac in patch with identifier string pat.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), the stochastic reaction constant is computed as the weighted mean of the stochastic reaction constants in all triangular elements of the patch.</p>", "Extent": "val = sim.patch.reac['fwd'].Extent</br>val = sim.patch.reac['bkw'].Extent@<p> Returns the extent of surface reaction with identifier string sreac in patch with identifier string pat, that is the number of times the surface reaction has occurred up to the current simulation time.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), returns the sum of the reaction extents in all triangular elements of the patch.</p>", "H": "val = sim.patch.reac['fwd'].H</br>val = sim.patch.reac['bkw'].H@<p> Returns h_mu, the distinct number of ways in which surface reaction with identifier string sreac can occur in patch with identifier string pat, by computing the product of its reactants. Note: in a mesh-based simulation (i.e. Tetexact), returns the sum of the h_mu's over all triangular elements in the patch.</p>", "K": "val = sim.patch.reac['fwd'].K</br>val = sim.patch.reac['bkw'].K@<p> Returns the macroscopic reaction constant of surface reaction with identifier string sreac in patch with identifier string pat. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based solver the value for the patch is returned, although individual triangle elements may have different values (set with setTriSReacK).</p>"}}}, "Wmrk4": {"Compartment": {"Species": {"Amount": "val = sim.comp.spec.Amount@<p> Returns the amount (in mols) of species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined amount from all tetrahedral elements in the compartment.</p>", "Clamped": "val = sim.comp.spec.Clamped@<p> Returns True if species with identifier string spec in compartment with identifier string comp is clamped, which means the concentration remains the same regardless of reactions that consume or produce molecules of this species. Returns False if not.</p><p>Note: in a mesh-based simulation it returns True only if the species is clamped in all tetrahedral elements of the compartment.</p>", "Conc": "val = sim.comp.spec.Conc@<p> Returns the concentration (in Molar units) of species with identifier string spec in compartment with identifier string comp.</p><p>Note: in a mesh-based simulation this is calculated from the combined number of molecules from all tetrahedral elements in the compartment and the total volume of the tetrahedrons.</p>", "Count": "val = sim.comp.spec.Count@<p> Returns the number of molecules of a species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined count from all tetrahedral elements in the compartment.</p>"}, "Diffusion": {"Active": "val = sim.comp.diff.Active@<p> Returns whether a diffusion rule with identifier string diff in compartment with identifier string comp is active (True) or not (False). If diffusion of a species is inactive this means the molecules will remain in place and has the same effect as a diffusion constant of zero.</p>", "D": "val = sim.comp.diff.D@<p> Returns the diffusion constant of diffusion rule with identifier string diff in compartment with identifier string comp. This constant is in units m^2/s.</p><p>Note: In a mesh-based solver the value for the compartment is returned, although individual or groups of tetrahedral elements may have different values (set with setTetDiffD).</p>"}, "Reaction": {"A": "val = sim.comp.reac['fwd'].A</br>val = sim.comp.reac['bkw'].A@<p> Returns the propensity of reaction with identifier string reac in compartment with identifier string comp.</p><p>The propensity of a reaction is a function of state and is defined as the function whose product with infinitesimal time dt gives the probability that the reaction will occur in the next dt. It is the 'stochastic reaction constant' multiplied by 'h_mu'.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), the propensity of a reaction in a compartment is computed as the sum of the propensities in all tetrahedral elements of the compartment.</p>", "Active": "val = sim.comp.reac['fwd'].Active</br>val = sim.comp.reac['bkw'].Active@<p> Returns whether a reaction with identifier string reac in compartment with identifier string comp is active (True) or not (False). If it's not active this means that a reaction will never occur regardless of whether the reactants are present in sufficient numbers or not.</p><p>Note: In a mesh-based simulation this method will return True only if the reaction is active in all tetrahedral elements in the compartment.</p>", "C": "val = sim.comp.reac['fwd'].C</br>val = sim.comp.reac['bkw'].C@<p> Returns the 'stochastic reaction constant' (or 'specific probability rate constant') of reaction with identifier string reac in compartment with identifier string comp.</p><p>The 'stochastic reaction constant' multiplied by infinitesimal time interval dt gives the average probability that one reaction channel of this reaction type will react accordingly in dt.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), the stochastic reaction constant is computed as the weighted mean of the stochastic reaction constants in all tetrahedral elements of the compartment.</p>", "Extent": "val = sim.comp.reac['fwd'].Extent</br>val = sim.comp.reac['bkw'].Extent@<p> Return the extent of reaction with identifier string reac in compartment with identifier string comp, that is the number of times the reaction has occurred up to the current simulation time.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), returns the sum of the reaction extents in all tetrahedral elements of the compartment.</p>", "H": "val = sim.comp.reac['fwd'].H</br>val = sim.comp.reac['bkw'].H@<p> Returns h_mu, the distinct number of ways in which reaction with identifier string reac can occur in compartment with identifier string comp, by computing the product of its reactants. Note: in a mesh-based simulation (i.e. Tetexact), returns the sum of the h_mu's over all tetrahedral elements in the compartment.</p>", "K": "val = sim.comp.reac['fwd'].K</br>val = sim.comp.reac['bkw'].K@<p> Returns the macroscopic reaction constant of reaction with identifier string reac in compartment with identifier string comp. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based simulation the value for the compartment is returned, although individual tetrahedral elements may have different values (set with setTetReacK).</p>"}, "Vol": "val = sim.comp.Vol@<p> Returns the volume of compartment with identifier string comp (in m^3).</p>"}, "Patch": {"Species": {"Amount": "val = sim.patch.spec.Amount@<p> Returns the amount (in mols) of species with identifier string spec in patch with identifier string pat.</p><p>Note: in a mesh-based simulation this is the combined amount from all triangular elements in the patch.</p>", "Clamped": "val = sim.patch.spec.Clamped@<p> Sets the amount (in mols) of species with identifier string spec in patch with identifier string pat to a. In a discrete solver, such as Wmdirect and Tetexact, this continuous value is converted internally into a discrete number of molecules by multiplication with Avogadro's number.</p><p>Note: in a mesh-based simulation the molecules are divided as equally as possible over all triangular elements in the patch (i.e. a uniform distribution).</p>", "Count": "val = sim.patch.spec.Count@<p> Returns the number of molecules of species with identifier string spec in patch with identifier string pat.Note: in a mesh-based simulation this is the combined count from all triangular elements in the patch.</p>"}, "Area": "val = sim.patch.Area@<p> Returns the area of patch with identifier string pat (in m^2).</p>", "Reaction": {"A": "val = sim.patch.reac['fwd'].A</br>val = sim.patch.reac['bkw'].A@<p> Returns the propensity of surface reaction with identifier string sreac in patch with identifier string pat. Note: in a mesh-based simulation (i.e. Tetexact), the propensity of a surface reaction in a patch is computed as the sum of the propensities in all triangular elements of the patch.</p>", "Active": "val = sim.patch.reac['fwd'].Active</br>val = sim.patch.reac['bkw'].Active@<p> Returns whether a voltage-dependent surface reaction with identifier string vsreac in patch with identifier string pat is active (True) or not (False). If it's not active this means that the voltage-dependent surface reaction will never occur regardless of whether the reactants are present in sufficient numbers or not.</p><p>Note: In a mesh-based simulation this method will return True only if the voltage-dependent surface reaction is active in all triangular elements in the patch.</p>", "C": "val = sim.patch.reac['fwd'].C</br>val = sim.patch.reac['bkw'].C@<p> Returns the 'stochastic reaction constant' (or 'specific probability rate constant') of surface reaction with identifier string sreac in patch with identifier string pat.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), the stochastic reaction constant is computed as the weighted mean of the stochastic reaction constants in all triangular elements of the patch.</p>", "Extent": "val = sim.patch.reac['fwd'].Extent</br>val = sim.patch.reac['bkw'].Extent@<p> Returns the extent of surface reaction with identifier string sreac in patch with identifier string pat, that is the number of times the surface reaction has occurred up to the current simulation time.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), returns the sum of the reaction extents in all triangular elements of the patch.</p>", "H": "val = sim.patch.reac['fwd'].H</br>val = sim.patch.reac['bkw'].H@<p> Returns h_mu, the distinct number of ways in which surface reaction with identifier string sreac can occur in patch with identifier string pat, by computing the product of its reactants. Note: in a mesh-based simulation (i.e. Tetexact), returns the sum of the h_mu's over all triangular elements in the patch.</p>", "K": "val = sim.patch.reac['fwd'].K</br>val = sim.patch.reac['bkw'].K@<p> Returns the macroscopic reaction constant of surface reaction with identifier string sreac in patch with identifier string pat. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based solver the value for the patch is returned, although individual triangle elements may have different values (set with setTriSReacK).</p>"}}}, "Tetexact": {"Tetrahedron": {"Species": {"Count": "val = sim.TET(tet).spec.Count</br>val = sim.TETS(tetLst).spec.Count@<p> Returns the number of molecules of species with identifier string spec in the tetrahedral element with index idx.</p>", "Amount": "val = sim.TET(tet).spec.Amount</br>val = sim.TETS(tetLst).spec.Amount@<p> Returns the amount (in mols) of species with identifier string spec in tetrahedral element with index idx.</p>", "Clamped": "val = sim.TET(tet).spec.Clamped</br>val = sim.TETS(tetLst).spec.Clamped@<p> Returns True if concentration of species with identifier string spec in tetrahedral element with index idx is clamped, which means the concentration stays the same regardless of reactions that consume or produce molecules of this species or diffusion of this species into or out of the tetrahedral element. Returns False if not.</p>", "Conc": "val = sim.TET(tet).spec.Conc</br>val = sim.TETS(tetLst).spec.Conc@<p> Returns the concentration (in Molar units) of species with identifier string spec in a tetrahedral element with index idx.</p>"}, "Diffusion": {"A": "val = sim.TET(tet).diff.A</br>val = sim.TETS(tetLst).diff.A@<p> Returns the propensity of diffusion rule with identifier string diff in tetrahedral element with index idx.</p>", "Active": "val = sim.TET(tet).diff.Active</br>val = sim.TETS(tetLst).diff.Active@<p> Returns whether diffusion with identifier string diff in tetrahedral element with index idx is active (True) or not (False). If diffusion of a species is inactive this means the molecules will never diffuse out of the tetrahedron and has the same effect as a diffusion constant of zero.</p>", "D": "val = sim.TET(tet).diff.D</br>val = sim.TET(tet).diff(direc=tet2).D</br>val = sim.TETS(tetLst).diff.D@<p> Returns the diffusion constant of diffusion rule with identifier string diff in tetrahedral element with index idx. This constant is in units m^2/s. If direc is specified, return the diffusion constant towards that direction.</p>"}, "Reaction": {"A": "val = sim.TET(tet).reac['fwd'].A</br>val = sim.TET(tet).reac['bkw'].A</br>val = sim.TETS(tetLst).reac['fwd'].A</br>val = sim.TETS(tetLst).reac['bkw'].A@<p> Returns the propensity of reaction with identifier string reac in tetrahedral element with index idx.</p>", "Active": "val = sim.TET(tet).reac['fwd'].Active</br>val = sim.TET(tet).reac['bkw'].Active</br>val = sim.TETS(tetLst).reac['fwd'].Active</br>val = sim.TETS(tetLst).reac['bkw'].Active@<p> Returns whether reaction with identifier string reac in tetrahedral element with index idx is active (True) or not (False). If it's not active this means that the reaction will never occur regardless of whether reactants are present in sufficient numbers or not.</p>", "C": "val = sim.TET(tet).reac['fwd'].C</br>val = sim.TET(tet).reac['bkw'].C</br>val = sim.TETS(tetLst).reac['fwd'].C</br>val = sim.TETS(tetLst).reac['bkw'].C@<p> Returns the 'stochastic reaction constant' (or 'specific probability rate constant') of reaction with identifier string reac in tetrahedral element with index idx.</p>", "H": "val = sim.TET(tet).reac['fwd'].H</br>val = sim.TET(tet).reac['bkw'].H</br>val = sim.TETS(tetLst).reac['fwd'].H</br>val = sim.TETS(tetLst).reac['bkw'].H@<p> Returns h_mu, the distinct number of ways in which reaction with identifier string reac can occur in tetrahedral element with index idx, by computing the product of its reactants.</p>", "K": "val = sim.TET(tet).reac['fwd'].K</br>val = sim.TET(tet).reac['bkw'].K</br>val = sim.TETS(tetLst).reac['fwd'].K</br>val = sim.TETS(tetLst).reac['bkw'].K@<p> Returns the macroscopic reaction constant of reaction with identifier string reac in tetrahedral element with index idx. The unit of the reaction constant depends on the order of the reaction.</p>"}, "V": "val = sim.TET(tet).V</br>val = sim.TETS(tetLst).V@<p> Returns the potential (in volts) of tetrahedral element with index idx, taken at the barycenter.</p>", "VClamped": "val = sim.TET(tet).VClamped</br>val = sim.TETS(tetLst).VClamped@<p> Returns true if the potential of tetrahedral element with index idx is clamped to some voltage.</p>", "Vol": "val = sim.TET(tet).Vol</br>val = sim.TETS(tetLst).Vol@<p> Returns the volume (in m^3) of the tetrahedral element with index idx.</p>"}, "Triangle": {"Species": {"Count": "val = sim.TRI(tri).spec.Count</br>val = sim.TRIS(triLst).spec.Count@<p> Returns the number of molecules of species with identifier string spec in the triangular element with index idx.</p>", "Amount": "val = sim.TRI(tri).spec.Amount</br>val = sim.TRIS(triLst).spec.Amount@<p> Returns the amount (in mols) of species with identifier string spec in triangular element with index idx.</p>", "Clamped": "val = sim.TRI(tri).spec.Clamped</br>val = sim.TRIS(triLst).spec.Clamped@<p> Returns True if the species with identifier string spec in triangular element with index idx is clamped, which means the number of molecules stays the same regardless of reactions that consume or produce molecules of this species. Returns False if not.</p>"}, "Area": "val = sim.TRI(tri).Area</br>val = sim.TRIS(triLst).Area@<p> Returns the area (in m^2) of the triangular element with index idx.</p>", "Current": {"I": "val = sim.TRI(tri).curr.I</br>val = sim.TRIS(triLst).curr.I@<p> Returns the ohmic current of triangle element with index idx, in amps.</p>"}, "I": "val = sim.TRI(tri).I</br>val = sim.TRIS(triLst).I@<p> Returns the current of triangle element with index idx, in amps, at the last EField calculation step.</p>", "IClamp": "val = sim.TRI(tri).IClamp</br>val = sim.TRIS(triLst).IClamp@<p> Get current clamp to triangle element with index tidx. NOTE: Convention is maintained that a positive current clamp is depolarizing, a negative current clamp is hyperpolarizing.</p>", "Diffusion": {"D": "val = sim.TRI(tri).sdiff.D</br>val = sim.TRI(tri).sdiff(direc=tri2).D</br>val = sim.TRIS(triLst).sdiff.D@<p> Returns the diffusion constant of diffusion rule with identifier string diff in triangle element with index idx. If direc is specified, return the diffusion constant towards that direction.</p>"}, "Reaction": {"A": "val = sim.TRI(tri).reac['fwd'].A</br>val = sim.TRI(tri).reac['bkw'].A</br>val = sim.TRIS(triLst).reac['fwd'].A</br>val = sim.TRIS(triLst).reac['bkw'].A@<p> Returns the propensity of surface reaction with identifier string sreac in triangular element with index idx.</p>", "Active": "val = sim.TRI(tri).reac['fwd'].Active</br>val = sim.TRI(tri).reac['bkw'].Active</br>val = sim.TRIS(triLst).reac['fwd'].Active</br>val = sim.TRIS(triLst).reac['bkw'].Active@<p> Returns whether voltage-dependent surface reaction with identifier string vsreac in triangular element with index idx is active (True) or not (False). If it's not active this means that the voltage-dependent surface reaction will never occur regardless of whether reactants are present in sufficient numbers or not.</p>", "C": "val = sim.TRI(tri).reac['fwd'].C</br>val = sim.TRI(tri).reac['bkw'].C</br>val = sim.TRIS(triLst).reac['fwd'].C</br>val = sim.TRIS(triLst).reac['bkw'].C@<p> Returns the 'stochastic reaction constant' (or 'specific probability rate constant') of surface reaction with identifier string sreac in triangular element with index idx.</p>", "H": "val = sim.TRI(tri).reac['fwd'].H</br>val = sim.TRI(tri).reac['bkw'].H</br>val = sim.TRIS(triLst).reac['fwd'].H</br>val = sim.TRIS(triLst).reac['bkw'].H@<p> Returns h_mu, the distinct number of ways in which surface reaction with identifier string sreac can occur in triangular element with index idx, by computing the product of its reactants.</p>", "K": "val = sim.TRI(tri).reac['fwd'].K</br>val = sim.TRI(tri).reac['bkw'].K</br>val = sim.TRIS(triLst).reac['fwd'].K</br>val = sim.TRIS(triLst).reac['bkw'].K@<p> Returns the macroscopic reaction constant of surface reaction with identifier string sreac in triangular element with index idx. The units of the reaction constant depends on the order of the reaction.</p>"}, "V": "val = sim.TRI(tri).V</br>val = sim.TRIS(triLst).V@<p> Returns the potential (in volts) of triangle element with index idx, taken at the barycenter.</p>", "VClamped": "val = sim.TRI(tri).VClamped</br>val = sim.TRIS(triLst).VClamped@<p> Returns true if the potential of triangle element with index idx is clamped to some voltage.</p>"}, "Compartment": {"Species": {"Amount": "val = sim.comp.spec.Amount@<p> Returns the amount (in mols) of species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined amount from all tetrahedral elements in the compartment.</p>", "Clamped": "val = sim.comp.spec.Clamped@<p> Returns True if species with identifier string spec in compartment with identifier string comp is clamped, which means the concentration remains the same regardless of reactions that consume or produce molecules of this species. Returns False if not.</p><p>Note: in a mesh-based simulation it returns True only if the species is clamped in all tetrahedral elements of the compartment.</p>", "Conc": "val = sim.comp.spec.Conc@<p> Returns the concentration (in Molar units) of species with identifier string spec in compartment with identifier string comp.</p><p>Note: in a mesh-based simulation this is calculated from the combined number of molecules from all tetrahedral elements in the compartment and the total volume of the tetrahedrons.</p>", "Count": "val = sim.comp.spec.Count@<p> Returns the number of molecules of a species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined count from all tetrahedral elements in the compartment.</p>"}, "Diffusion": {"Active": "val = sim.comp.diff.Active@<p> Returns whether a diffusion rule with identifier string diff in compartment with identifier string comp is active (True) or not (False). If diffusion of a species is inactive this means the molecules will remain in place and has the same effect as a diffusion constant of zero.</p>", "D": "val = sim.comp.diff.D@<p> Returns the diffusion constant of diffusion rule with identifier string diff in compartment with identifier string comp. This constant is in units m^2/s.</p><p>Note: In a mesh-based solver the value for the compartment is returned, although individual or groups of tetrahedral elements may have different values (set with setTetDiffD).</p>"}, "Reaction": {"A": "val = sim.comp.reac['fwd'].A</br>val = sim.comp.reac['bkw'].A@<p> Returns the propensity of reaction with identifier string reac in compartment with identifier string comp.</p><p>The propensity of a reaction is a function of state and is defined as the function whose product with infinitesimal time dt gives the probability that the reaction will occur in the next dt. It is the 'stochastic reaction constant' multiplied by 'h_mu'.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), the propensity of a reaction in a compartment is computed as the sum of the propensities in all tetrahedral elements of the compartment.</p>", "Active": "val = sim.comp.reac['fwd'].Active</br>val = sim.comp.reac['bkw'].Active@<p> Returns whether a reaction with identifier string reac in compartment with identifier string comp is active (True) or not (False). If it's not active this means that a reaction will never occur regardless of whether the reactants are present in sufficient numbers or not.</p><p>Note: In a mesh-based simulation this method will return True only if the reaction is active in all tetrahedral elements in the compartment.</p>", "C": "val = sim.comp.reac['fwd'].C</br>val = sim.comp.reac['bkw'].C@<p> Returns the 'stochastic reaction constant' (or 'specific probability rate constant') of reaction with identifier string reac in compartment with identifier string comp.</p><p>The 'stochastic reaction constant' multiplied by infinitesimal time interval dt gives the average probability that one reaction channel of this reaction type will react accordingly in dt.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), the stochastic reaction constant is computed as the weighted mean of the stochastic reaction constants in all tetrahedral elements of the compartment.</p>", "Extent": "val = sim.comp.reac['fwd'].Extent</br>val = sim.comp.reac['bkw'].Extent@<p> Return the extent of reaction with identifier string reac in compartment with identifier string comp, that is the number of times the reaction has occurred up to the current simulation time.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), returns the sum of the reaction extents in all tetrahedral elements of the compartment.</p>", "H": "val = sim.comp.reac['fwd'].H</br>val = sim.comp.reac['bkw'].H@<p> Returns h_mu, the distinct number of ways in which reaction with identifier string reac can occur in compartment with identifier string comp, by computing the product of its reactants. Note: in a mesh-based simulation (i.e. Tetexact), returns the sum of the h_mu's over all tetrahedral elements in the compartment.</p>", "K": "val = sim.comp.reac['fwd'].K</br>val = sim.comp.reac['bkw'].K@<p> Returns the macroscopic reaction constant of reaction with identifier string reac in compartment with identifier string comp. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based simulation the value for the compartment is returned, although individual tetrahedral elements may have different values (set with setTetReacK).</p>"}, "Vol": "val = sim.comp.Vol@<p> Returns the volume of compartment with identifier string comp (in m^3).</p>"}, "Diff. Boundary": {"Species": {"DiffusionActive": "val = sim.diffb.spec.DiffusionActive@<p> Returns whether diffusion is active across a diffusion boundary for a species.</p>"}}, "Patch": {"Species": {"Amount": "val = sim.patch.spec.Amount@<p> Returns the amount (in mols) of species with identifier string spec in patch with identifier string pat.</p><p>Note: in a mesh-based simulation this is the combined amount from all triangular elements in the patch.</p>", "Clamped": "val = sim.patch.spec.Clamped@<p> Sets the amount (in mols) of species with identifier string spec in patch with identifier string pat to a. In a discrete solver, such as Wmdirect and Tetexact, this continuous value is converted internally into a discrete number of molecules by multiplication with Avogadro's number.</p><p>Note: in a mesh-based simulation the molecules are divided as equally as possible over all triangular elements in the patch (i.e. a uniform distribution).</p>", "Count": "val = sim.patch.spec.Count@<p> Returns the number of molecules of species with identifier string spec in patch with identifier string pat.Note: in a mesh-based simulation this is the combined count from all triangular elements in the patch.</p>"}, "Area": "val = sim.patch.Area@<p> Returns the area of patch with identifier string pat (in m^2).</p>", "Reaction": {"A": "val = sim.patch.reac['fwd'].A</br>val = sim.patch.reac['bkw'].A@<p> Returns the propensity of surface reaction with identifier string sreac in patch with identifier string pat. Note: in a mesh-based simulation (i.e. Tetexact), the propensity of a surface reaction in a patch is computed as the sum of the propensities in all triangular elements of the patch.</p>", "Active": "val = sim.patch.reac['fwd'].Active</br>val = sim.patch.reac['bkw'].Active@<p> Returns whether a voltage-dependent surface reaction with identifier string vsreac in patch with identifier string pat is active (True) or not (False). If it's not active this means that the voltage-dependent surface reaction will never occur regardless of whether the reactants are present in sufficient numbers or not.</p><p>Note: In a mesh-based simulation this method will return True only if the voltage-dependent surface reaction is active in all triangular elements in the patch.</p>", "C": "val = sim.patch.reac['fwd'].C</br>val = sim.patch.reac['bkw'].C@<p> Returns the 'stochastic reaction constant' (or 'specific probability rate constant') of surface reaction with identifier string sreac in patch with identifier string pat.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), the stochastic reaction constant is computed as the weighted mean of the stochastic reaction constants in all triangular elements of the patch.</p>", "Extent": "val = sim.patch.reac['fwd'].Extent</br>val = sim.patch.reac['bkw'].Extent@<p> Returns the extent of surface reaction with identifier string sreac in patch with identifier string pat, that is the number of times the surface reaction has occurred up to the current simulation time.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), returns the sum of the reaction extents in all triangular elements of the patch.</p>", "H": "val = sim.patch.reac['fwd'].H</br>val = sim.patch.reac['bkw'].H@<p> Returns h_mu, the distinct number of ways in which surface reaction with identifier string sreac can occur in patch with identifier string pat, by computing the product of its reactants. Note: in a mesh-based simulation (i.e. Tetexact), returns the sum of the h_mu's over all triangular elements in the patch.</p>", "K": "val = sim.patch.reac['fwd'].K</br>val = sim.patch.reac['bkw'].K@<p> Returns the macroscopic reaction constant of surface reaction with identifier string sreac in patch with identifier string pat. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based solver the value for the patch is returned, although individual triangle elements may have different values (set with setTriSReacK).</p>"}}, "Region of Interest": {"Species": {"Amount": "val = sim.roi.spec.Amount@<p> Get the amount of a species in a ROI.</p>", "Conc": "val = sim.roi.spec.Conc@<p> Get the concentration of a species in a ROI.</p>", "Count": "val = sim.roi.spec.Count@<p> Get the count of a species in a ROI.</p>"}, "Area": "val = sim.roi.Area@<p> Get the area of a ROI.</p>", "Diffusion": {"Extent": "val = sim.roi.diff.Extent</br>val = sim.roi.diff(direc=tet2).Extent@<p> Return the extent of diffusion with identifier string d in ROI with identifier string ROI_id, that is the number of times the diffusion has occurred up to the current simulation time.</p>"}, "Reaction": {"Extent": "val = sim.roi.reac['fwd'].Extent</br>val = sim.roi.reac['bkw'].Extent@<p> Return the extent of surface reaction with identifier string sr in ROI with identifier string ROI_id, that is the number of times the reaction has occurred up to the current simulation time.</p>"}, "Vol": "val = sim.roi.Vol@<p> Get the volume of a ROI.</p>"}, "Surf. Diff. Boundary": {"Species": {"DiffusionActive": "val = sim.sdiffb.spec.DiffusionActive@<p> Returns whether diffusion is active across a surface diffusion boundary for a species.</p>"}}, "Vertex": {"IClamp": "val = sim.VERT(vert).IClamp</br>val = sim.VERTS(vertLst).IClamp@<p> Get current clamp to vertex element with index vidx (Amps). NOTE: Convention is maintained that a positive current clamp is depolarizing, a negative current clamp is hyperpolarizing.</p>", "V": "val = sim.VERT(vert).V</br>val = sim.VERTS(vertLst).V@<p> Returns the potential (in volts) of vertex element with index idx.</p>", "VClamped": "val = sim.VERT(vert).VClamped</br>val = sim.VERTS(vertLst).VClamped@<p> Returns true if the potential of vertex element with index idx is clamped to some voltage.</p>"}}, "TetODE": {"Compartment": {"Species": {"Amount": "val = sim.comp.spec.Amount@<p> Returns the amount (in mols) of species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined amount from all tetrahedral elements in the compartment.</p>", "Clamped": "val = sim.comp.spec.Clamped@<p> Returns True if species with identifier string spec in compartment with identifier string comp is clamped, which means the concentration remains the same regardless of reactions that consume or produce molecules of this species. Returns False if not.</p><p>Note: in a mesh-based simulation it returns True only if the species is clamped in all tetrahedral elements of the compartment.</p>", "Conc": "val = sim.comp.spec.Conc@<p> Returns the concentration (in Molar units) of species with identifier string spec in compartment with identifier string comp.</p><p>Note: in a mesh-based simulation this is calculated from the combined number of molecules from all tetrahedral elements in the compartment and the total volume of the tetrahedrons.</p>", "Count": "val = sim.comp.spec.Count@<p> Returns the number of molecules of a species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined count from all tetrahedral elements in the compartment.</p>"}, "Diffusion": {"Active": "val = sim.comp.diff.Active@<p> Returns whether a diffusion rule with identifier string diff in compartment with identifier string comp is active (True) or not (False). If diffusion of a species is inactive this means the molecules will remain in place and has the same effect as a diffusion constant of zero.</p>", "D": "val = sim.comp.diff.D@<p> Returns the diffusion constant of diffusion rule with identifier string diff in compartment with identifier string comp. This constant is in units m^2/s.</p><p>Note: In a mesh-based solver the value for the compartment is returned, although individual or groups of tetrahedral elements may have different values (set with setTetDiffD).</p>"}, "Reaction": {"A": "val = sim.comp.reac['fwd'].A</br>val = sim.comp.reac['bkw'].A@<p> Returns the propensity of reaction with identifier string reac in compartment with identifier string comp.</p><p>The propensity of a reaction is a function of state and is defined as the function whose product with infinitesimal time dt gives the probability that the reaction will occur in the next dt. It is the 'stochastic reaction constant' multiplied by 'h_mu'.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), the propensity of a reaction in a compartment is computed as the sum of the propensities in all tetrahedral elements of the compartment.</p>", "Active": "val = sim.comp.reac['fwd'].Active</br>val = sim.comp.reac['bkw'].Active@<p> Returns whether a reaction with identifier string reac in compartment with identifier string comp is active (True) or not (False). If it's not active this means that a reaction will never occur regardless of whether the reactants are present in sufficient numbers or not.</p><p>Note: In a mesh-based simulation this method will return True only if the reaction is active in all tetrahedral elements in the compartment.</p>", "C": "val = sim.comp.reac['fwd'].C</br>val = sim.comp.reac['bkw'].C@<p> Returns the 'stochastic reaction constant' (or 'specific probability rate constant') of reaction with identifier string reac in compartment with identifier string comp.</p><p>The 'stochastic reaction constant' multiplied by infinitesimal time interval dt gives the average probability that one reaction channel of this reaction type will react accordingly in dt.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), the stochastic reaction constant is computed as the weighted mean of the stochastic reaction constants in all tetrahedral elements of the compartment.</p>", "Extent": "val = sim.comp.reac['fwd'].Extent</br>val = sim.comp.reac['bkw'].Extent@<p> Return the extent of reaction with identifier string reac in compartment with identifier string comp, that is the number of times the reaction has occurred up to the current simulation time.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), returns the sum of the reaction extents in all tetrahedral elements of the compartment.</p>", "H": "val = sim.comp.reac['fwd'].H</br>val = sim.comp.reac['bkw'].H@<p> Returns h_mu, the distinct number of ways in which reaction with identifier string reac can occur in compartment with identifier string comp, by computing the product of its reactants. Note: in a mesh-based simulation (i.e. Tetexact), returns the sum of the h_mu's over all tetrahedral elements in the compartment.</p>", "K": "val = sim.comp.reac['fwd'].K</br>val = sim.comp.reac['bkw'].K@<p> Returns the macroscopic reaction constant of reaction with identifier string reac in compartment with identifier string comp. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based simulation the value for the compartment is returned, although individual tetrahedral elements may have different values (set with setTetReacK).</p>"}, "Vol": "val = sim.comp.Vol@<p> Returns the volume of compartment with identifier string comp (in m^3).</p>"}, "Diff. Boundary": {"Species": {"DiffusionActive": "val = sim.diffb.spec.DiffusionActive@<p> Returns whether diffusion is active across a diffusion boundary for a species.</p>"}}, "Patch": {"Species": {"Amount": "val = sim.patch.spec.Amount@<p> Returns the amount (in mols) of species with identifier string spec in patch with identifier string pat.</p><p>Note: in a mesh-based simulation this is the combined amount from all triangular elements in the patch.</p>", "Clamped": "val = sim.patch.spec.Clamped@<p> Sets the amount (in mols) of species with identifier string spec in patch with identifier string pat to a. In a discrete solver, such as Wmdirect and Tetexact, this continuous value is converted internally into a discrete number of molecules by multiplication with Avogadro's number.</p><p>Note: in a mesh-based simulation the molecules are divided as equally as possible over all triangular elements in the patch (i.e. a uniform distribution).</p>", "Count": "val = sim.patch.spec.Count@<p> Returns the number of molecules of species with identifier string spec in patch with identifier string pat.Note: in a mesh-based simulation this is the combined count from all triangular elements in the patch.</p>"}, "Area": "val = sim.patch.Area@<p> Returns the area of patch with identifier string pat (in m^2).</p>", "Reaction": {"A": "val = sim.patch.reac['fwd'].A</br>val = sim.patch.reac['bkw'].A@<p> Returns the propensity of surface reaction with identifier string sreac in patch with identifier string pat. Note: in a mesh-based simulation (i.e. Tetexact), the propensity of a surface reaction in a patch is computed as the sum of the propensities in all triangular elements of the patch.</p>", "Active": "val = sim.patch.reac['fwd'].Active</br>val = sim.patch.reac['bkw'].Active@<p> Returns whether a voltage-dependent surface reaction with identifier string vsreac in patch with identifier string pat is active (True) or not (False). If it's not active this means that the voltage-dependent surface reaction will never occur regardless of whether the reactants are present in sufficient numbers or not.</p><p>Note: In a mesh-based simulation this method will return True only if the voltage-dependent surface reaction is active in all triangular elements in the patch.</p>", "C": "val = sim.patch.reac['fwd'].C</br>val = sim.patch.reac['bkw'].C@<p> Returns the 'stochastic reaction constant' (or 'specific probability rate constant') of surface reaction with identifier string sreac in patch with identifier string pat.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), the stochastic reaction constant is computed as the weighted mean of the stochastic reaction constants in all triangular elements of the patch.</p>", "Extent": "val = sim.patch.reac['fwd'].Extent</br>val = sim.patch.reac['bkw'].Extent@<p> Returns the extent of surface reaction with identifier string sreac in patch with identifier string pat, that is the number of times the surface reaction has occurred up to the current simulation time.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), returns the sum of the reaction extents in all triangular elements of the patch.</p>", "H": "val = sim.patch.reac['fwd'].H</br>val = sim.patch.reac['bkw'].H@<p> Returns h_mu, the distinct number of ways in which surface reaction with identifier string sreac can occur in patch with identifier string pat, by computing the product of its reactants. Note: in a mesh-based simulation (i.e. Tetexact), returns the sum of the h_mu's over all triangular elements in the patch.</p>", "K": "val = sim.patch.reac['fwd'].K</br>val = sim.patch.reac['bkw'].K@<p> Returns the macroscopic reaction constant of surface reaction with identifier string sreac in patch with identifier string pat. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based solver the value for the patch is returned, although individual triangle elements may have different values (set with setTriSReacK).</p>"}}, "Surf. Diff. Boundary": {"Species": {"DiffusionActive": "val = sim.sdiffb.spec.DiffusionActive@<p> Returns whether diffusion is active across a surface diffusion boundary for a species.</p>"}}, "Tetrahedron": {"Species": {"Amount": "val = sim.TET(tet).spec.Amount</br>val = sim.TETS(tetLst).spec.Amount@<p> Returns the amount (in mols) of species with identifier string spec in tetrahedral element with index idx.</p>", "Clamped": "val = sim.TET(tet).spec.Clamped</br>val = sim.TETS(tetLst).spec.Clamped@<p> Returns True if concentration of species with identifier string spec in tetrahedral element with index idx is clamped, which means the concentration stays the same regardless of reactions that consume or produce molecules of this species or diffusion of this species into or out of the tetrahedral element. Returns False if not.</p>", "Conc": "val = sim.TET(tet).spec.Conc</br>val = sim.TETS(tetLst).spec.Conc@<p> Returns the concentration (in Molar units) of species with identifier string spec in a tetrahedral element with index idx.</p>", "Count": "val = sim.TET(tet).spec.Count</br>val = sim.TETS(tetLst).spec.Count@<p> Returns the number of molecules of species with identifier string spec in the tetrahedral element with index idx.</p>"}, "Diffusion": {"A": "val = sim.TET(tet).diff.A</br>val = sim.TETS(tetLst).diff.A@<p> Returns the propensity of diffusion rule with identifier string diff in tetrahedral element with index idx.</p>", "Active": "val = sim.TET(tet).diff.Active</br>val = sim.TETS(tetLst).diff.Active@<p> Returns whether diffusion with identifier string diff in tetrahedral element with index idx is active (True) or not (False). If diffusion of a species is inactive this means the molecules will never diffuse out of the tetrahedron and has the same effect as a diffusion constant of zero.</p>", "D": "val = sim.TET(tet).diff.D</br>val = sim.TET(tet).diff(direc=tet2).D</br>val = sim.TETS(tetLst).diff.D@<p> Returns the diffusion constant of diffusion rule with identifier string diff in tetrahedral element with index idx. This constant is in units m^2/s. If direc is specified, return the diffusion constant towards that direction.</p>"}, "Reaction": {"A": "val = sim.TET(tet).reac['fwd'].A</br>val = sim.TET(tet).reac['bkw'].A</br>val = sim.TETS(tetLst).reac['fwd'].A</br>val = sim.TETS(tetLst).reac['bkw'].A@<p> Returns the propensity of reaction with identifier string reac in tetrahedral element with index idx.</p>", "Active": "val = sim.TET(tet).reac['fwd'].Active</br>val = sim.TET(tet).reac['bkw'].Active</br>val = sim.TETS(tetLst).reac['fwd'].Active</br>val = sim.TETS(tetLst).reac['bkw'].Active@<p> Returns whether reaction with identifier string reac in tetrahedral element with index idx is active (True) or not (False). If it's not active this means that the reaction will never occur regardless of whether reactants are present in sufficient numbers or not.</p>", "C": "val = sim.TET(tet).reac['fwd'].C</br>val = sim.TET(tet).reac['bkw'].C</br>val = sim.TETS(tetLst).reac['fwd'].C</br>val = sim.TETS(tetLst).reac['bkw'].C@<p> Returns the 'stochastic reaction constant' (or 'specific probability rate constant') of reaction with identifier string reac in tetrahedral element with index idx.</p>", "H": "val = sim.TET(tet).reac['fwd'].H</br>val = sim.TET(tet).reac['bkw'].H</br>val = sim.TETS(tetLst).reac['fwd'].H</br>val = sim.TETS(tetLst).reac['bkw'].H@<p> Returns h_mu, the distinct number of ways in which reaction with identifier string reac can occur in tetrahedral element with index idx, by computing the product of its reactants.</p>", "K": "val = sim.TET(tet).reac['fwd'].K</br>val = sim.TET(tet).reac['bkw'].K</br>val = sim.TETS(tetLst).reac['fwd'].K</br>val = sim.TETS(tetLst).reac['bkw'].K@<p> Returns the macroscopic reaction constant of reaction with identifier string reac in tetrahedral element with index idx. The unit of the reaction constant depends on the order of the reaction.</p>"}, "V": "val = sim.TET(tet).V</br>val = sim.TETS(tetLst).V@<p> Returns the potential (in volts) of tetrahedral element with index idx, taken at the barycenter.</p>", "VClamped": "val = sim.TET(tet).VClamped</br>val = sim.TETS(tetLst).VClamped@<p> Returns true if the potential of tetrahedral element with index idx is clamped to some voltage.</p>", "Vol": "val = sim.TET(tet).Vol</br>val = sim.TETS(tetLst).Vol@<p> Returns the volume (in m^3) of the tetrahedral element with index idx.</p>"}, "Triangle": {"Species": {"Amount": "val = sim.TRI(tri).spec.Amount</br>val = sim.TRIS(triLst).spec.Amount@<p> Returns the amount (in mols) of species with identifier string spec in triangular element with index idx.</p>", "Clamped": "val = sim.TRI(tri).spec.Clamped</br>val = sim.TRIS(triLst).spec.Clamped@<p> Returns True if the species with identifier string spec in triangular element with index idx is clamped, which means the number of molecules stays the same regardless of reactions that consume or produce molecules of this species. Returns False if not.</p>", "Count": "val = sim.TRI(tri).spec.Count</br>val = sim.TRIS(triLst).spec.Count@<p> Returns the number of molecules of species with identifier string spec in the triangular element with index idx.</p>"}, "Area": "val = sim.TRI(tri).Area</br>val = sim.TRIS(triLst).Area@<p> Returns the area (in m^2) of the triangular element with index idx.</p>", "Current": {"I": "val = sim.TRI(tri).curr.I</br>val = sim.TRIS(triLst).curr.I@<p> Returns the ohmic current of triangle element with index idx, in amps.</p>"}, "I": "val = sim.TRI(tri).I</br>val = sim.TRIS(triLst).I@<p> Returns the current of triangle element with index idx, in amps, at the last EField calculation step.</p>", "IClamp": "val = sim.TRI(tri).IClamp</br>val = sim.TRIS(triLst).IClamp@<p> Get current clamp to triangle element with index tidx. NOTE: Convention is maintained that a positive current clamp is depolarizing, a negative current clamp is hyperpolarizing.</p>", "Diffusion": {"D": "val = sim.TRI(tri).sdiff.D</br>val = sim.TRI(tri).sdiff(direc=tri2).D</br>val = sim.TRIS(triLst).sdiff.D@<p> Returns the diffusion constant of diffusion rule with identifier string diff in triangle element with index idx. If direc is specified, return the diffusion constant towards that direction.</p>"}, "Reaction": {"A": "val = sim.TRI(tri).reac['fwd'].A</br>val = sim.TRI(tri).reac['bkw'].A</br>val = sim.TRIS(triLst).reac['fwd'].A</br>val = sim.TRIS(triLst).reac['bkw'].A@<p> Returns the propensity of surface reaction with identifier string sreac in triangular element with index idx.</p>", "Active": "val = sim.TRI(tri).reac['fwd'].Active</br>val = sim.TRI(tri).reac['bkw'].Active</br>val = sim.TRIS(triLst).reac['fwd'].Active</br>val = sim.TRIS(triLst).reac['bkw'].Active@<p> Returns whether voltage-dependent surface reaction with identifier string vsreac in triangular element with index idx is active (True) or not (False). If it's not active this means that the voltage-dependent surface reaction will never occur regardless of whether reactants are present in sufficient numbers or not.</p>", "C": "val = sim.TRI(tri).reac['fwd'].C</br>val = sim.TRI(tri).reac['bkw'].C</br>val = sim.TRIS(triLst).reac['fwd'].C</br>val = sim.TRIS(triLst).reac['bkw'].C@<p> Returns the 'stochastic reaction constant' (or 'specific probability rate constant') of surface reaction with identifier string sreac in triangular element with index idx.</p>", "H": "val = sim.TRI(tri).reac['fwd'].H</br>val = sim.TRI(tri).reac['bkw'].H</br>val = sim.TRIS(triLst).reac['fwd'].H</br>val = sim.TRIS(triLst).reac['bkw'].H@<p> Returns h_mu, the distinct number of ways in which surface reaction with identifier string sreac can occur in triangular element with index idx, by computing the product of its reactants.</p>", "K": "val = sim.TRI(tri).reac['fwd'].K</br>val = sim.TRI(tri).reac['bkw'].K</br>val = sim.TRIS(triLst).reac['fwd'].K</br>val = sim.TRIS(triLst).reac['bkw'].K@<p> Returns the macroscopic reaction constant of surface reaction with identifier string sreac in triangular element with index idx. The units of the reaction constant depends on the order of the reaction.</p>"}, "V": "val = sim.TRI(tri).V</br>val = sim.TRIS(triLst).V@<p> Returns the potential (in volts) of triangle element with index idx, taken at the barycenter.</p>", "VClamped": "val = sim.TRI(tri).VClamped</br>val = sim.TRIS(triLst).VClamped@<p> Returns true if the potential of triangle element with index idx is clamped to some voltage.</p>"}, "Vertex": {"IClamp": "val = sim.VERT(vert).IClamp</br>val = sim.VERTS(vertLst).IClamp@<p> Get current clamp to vertex element with index vidx (Amps). NOTE: Convention is maintained that a positive current clamp is depolarizing, a negative current clamp is hyperpolarizing.</p>", "V": "val = sim.VERT(vert).V</br>val = sim.VERTS(vertLst).V@<p> Returns the potential (in volts) of vertex element with index idx.</p>", "VClamped": "val = sim.VERT(vert).VClamped</br>val = sim.VERTS(vertLst).VClamped@<p> Returns true if the potential of vertex element with index idx is clamped to some voltage.</p>"}}, "TetOpSplit": {"Tetrahedron": {"Species": {"Conc": "val = sim.TET(tet).spec.Conc</br>val = sim.TETS(tetLst).spec.Conc@<p> Returns the concentration (in Molar units) of species with identifier string spec in a tetrahedral element with index idx.</p>", "Count": "val = sim.TET(tet).spec.Count</br>val = sim.TETS(tetLst).spec.Count@<p> Returns the number of molecules of species with identifier string spec in the tetrahedral element with index idx.</p>", "Amount": "val = sim.TET(tet).spec.Amount</br>val = sim.TETS(tetLst).spec.Amount@<p> Returns the amount (in mols) of species with identifier string spec in tetrahedral element with index idx.</p>", "Clamped": "val = sim.TET(tet).spec.Clamped</br>val = sim.TETS(tetLst).spec.Clamped@<p> Returns True if concentration of species with identifier string spec in tetrahedral element with index idx is clamped, which means the concentration stays the same regardless of reactions that consume or produce molecules of this species or diffusion of this species into or out of the tetrahedral element. Returns False if not.</p>"}, "V": "val = sim.TET(tet).V</br>val = sim.TETS(tetLst).V@<p> Returns the potential (in volts) of tetrahedral element with index idx, taken at the barycenter.</p>", "Diffusion": {"A": "val = sim.TET(tet).diff.A</br>val = sim.TETS(tetLst).diff.A@<p> Returns the propensity of diffusion rule with identifier string diff in tetrahedral element with index idx.</p>", "Active": "val = sim.TET(tet).diff.Active</br>val = sim.TETS(tetLst).diff.Active@<p> Returns whether diffusion with identifier string diff in tetrahedral element with index idx is active (True) or not (False). If diffusion of a species is inactive this means the molecules will never diffuse out of the tetrahedron and has the same effect as a diffusion constant of zero.</p>", "D": "val = sim.TET(tet).diff.D</br>val = sim.TET(tet).diff(direc=tet2).D</br>val = sim.TETS(tetLst).diff.D@<p> Returns the diffusion constant of diffusion rule with identifier string diff in tetrahedral element with index idx. This constant is in units m^2/s. If direc is specified, return the diffusion constant towards that direction.</p>"}, "Reaction": {"A": "val = sim.TET(tet).reac['fwd'].A</br>val = sim.TET(tet).reac['bkw'].A</br>val = sim.TETS(tetLst).reac['fwd'].A</br>val = sim.TETS(tetLst).reac['bkw'].A@<p> Returns the propensity of reaction with identifier string reac in tetrahedral element with index idx.</p>", "Active": "val = sim.TET(tet).reac['fwd'].Active</br>val = sim.TET(tet).reac['bkw'].Active</br>val = sim.TETS(tetLst).reac['fwd'].Active</br>val = sim.TETS(tetLst).reac['bkw'].Active@<p> Returns whether reaction with identifier string reac in tetrahedral element with index idx is active (True) or not (False). If it's not active this means that the reaction will never occur regardless of whether reactants are present in sufficient numbers or not.</p>", "C": "val = sim.TET(tet).reac['fwd'].C</br>val = sim.TET(tet).reac['bkw'].C</br>val = sim.TETS(tetLst).reac['fwd'].C</br>val = sim.TETS(tetLst).reac['bkw'].C@<p> Returns the 'stochastic reaction constant' (or 'specific probability rate constant') of reaction with identifier string reac in tetrahedral element with index idx.</p>", "H": "val = sim.TET(tet).reac['fwd'].H</br>val = sim.TET(tet).reac['bkw'].H</br>val = sim.TETS(tetLst).reac['fwd'].H</br>val = sim.TETS(tetLst).reac['bkw'].H@<p> Returns h_mu, the distinct number of ways in which reaction with identifier string reac can occur in tetrahedral element with index idx, by computing the product of its reactants.</p>", "K": "val = sim.TET(tet).reac['fwd'].K</br>val = sim.TET(tet).reac['bkw'].K</br>val = sim.TETS(tetLst).reac['fwd'].K</br>val = sim.TETS(tetLst).reac['bkw'].K@<p> Returns the macroscopic reaction constant of reaction with identifier string reac in tetrahedral element with index idx. The unit of the reaction constant depends on the order of the reaction.</p>"}, "VClamped": "val = sim.TET(tet).VClamped</br>val = sim.TETS(tetLst).VClamped@<p> Returns true if the potential of tetrahedral element with index idx is clamped to some voltage.</p>", "Vol": "val = sim.TET(tet).Vol</br>val = sim.TETS(tetLst).Vol@<p> Returns the volume (in m^3) of the tetrahedral element with index idx.</p>"}, "Triangle": {"Current": {"I": "val = sim.TRI(tri).curr.I</br>val = sim.TRIS(triLst).curr.I@<p> Returns the ohmic current of triangle element with index idx, in amps.</p>"}, "Species": {"Count": "val = sim.TRI(tri).spec.Count</br>val = sim.TRIS(triLst).spec.Count@<p> Returns the number of molecules of species with identifier string spec in the triangular element with index idx.</p>", "Amount": "val = sim.TRI(tri).spec.Amount</br>val = sim.TRIS(triLst).spec.Amount@<p> Returns the amount (in mols) of species with identifier string spec in triangular element with index idx.</p>", "Clamped": "val = sim.TRI(tri).spec.Clamped</br>val = sim.TRIS(triLst).spec.Clamped@<p> Returns True if the species with identifier string spec in triangular element with index idx is clamped, which means the number of molecules stays the same regardless of reactions that consume or produce molecules of this species. Returns False if not.</p>"}, "V": "val = sim.TRI(tri).V</br>val = sim.TRIS(triLst).V@<p> Returns the potential (in volts) of triangle element with index idx, taken at the barycenter.</p>", "Area": "val = sim.TRI(tri).Area</br>val = sim.TRIS(triLst).Area@<p> Returns the area (in m^2) of the triangular element with index idx.</p>", "I": "val = sim.TRI(tri).I</br>val = sim.TRIS(triLst).I@<p> Returns the current of triangle element with index idx, in amps, at the last EField calculation step.</p>", "IClamp": "val = sim.TRI(tri).IClamp</br>val = sim.TRIS(triLst).IClamp@<p> Get current clamp to triangle element with index tidx. NOTE: Convention is maintained that a positive current clamp is depolarizing, a negative current clamp is hyperpolarizing.</p>", "Diffusion": {"D": "val = sim.TRI(tri).sdiff.D</br>val = sim.TRI(tri).sdiff(direc=tri2).D</br>val = sim.TRIS(triLst).sdiff.D@<p> Returns the diffusion constant of diffusion rule with identifier string diff in triangle element with index idx. If direc is specified, return the diffusion constant towards that direction.</p>"}, "Reaction": {"A": "val = sim.TRI(tri).reac['fwd'].A</br>val = sim.TRI(tri).reac['bkw'].A</br>val = sim.TRIS(triLst).reac['fwd'].A</br>val = sim.TRIS(triLst).reac['bkw'].A@<p> Returns the propensity of surface reaction with identifier string sreac in triangular element with index idx.</p>", "Active": "val = sim.TRI(tri).reac['fwd'].Active</br>val = sim.TRI(tri).reac['bkw'].Active</br>val = sim.TRIS(triLst).reac['fwd'].Active</br>val = sim.TRIS(triLst).reac['bkw'].Active@<p> Returns whether voltage-dependent surface reaction with identifier string vsreac in triangular element with index idx is active (True) or not (False). If it's not active this means that the voltage-dependent surface reaction will never occur regardless of whether reactants are present in sufficient numbers or not.</p>", "C": "val = sim.TRI(tri).reac['fwd'].C</br>val = sim.TRI(tri).reac['bkw'].C</br>val = sim.TRIS(triLst).reac['fwd'].C</br>val = sim.TRIS(triLst).reac['bkw'].C@<p> Returns the 'stochastic reaction constant' (or 'specific probability rate constant') of surface reaction with identifier string sreac in triangular element with index idx.</p>", "H": "val = sim.TRI(tri).reac['fwd'].H</br>val = sim.TRI(tri).reac['bkw'].H</br>val = sim.TRIS(triLst).reac['fwd'].H</br>val = sim.TRIS(triLst).reac['bkw'].H@<p> Returns h_mu, the distinct number of ways in which surface reaction with identifier string sreac can occur in triangular element with index idx, by computing the product of its reactants.</p>", "K": "val = sim.TRI(tri).reac['fwd'].K</br>val = sim.TRI(tri).reac['bkw'].K</br>val = sim.TRIS(triLst).reac['fwd'].K</br>val = sim.TRIS(triLst).reac['bkw'].K@<p> Returns the macroscopic reaction constant of surface reaction with identifier string sreac in triangular element with index idx. The units of the reaction constant depends on the order of the reaction.</p>"}, "VClamped": "val = sim.TRI(tri).VClamped</br>val = sim.TRIS(triLst).VClamped@<p> Returns true if the potential of triangle element with index idx is clamped to some voltage.</p>"}, "Compartment": {"Species": {"Amount": "val = sim.comp.spec.Amount@<p> Returns the amount (in mols) of species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined amount from all tetrahedral elements in the compartment.</p>", "Clamped": "val = sim.comp.spec.Clamped@<p> Returns True if species with identifier string spec in compartment with identifier string comp is clamped, which means the concentration remains the same regardless of reactions that consume or produce molecules of this species. Returns False if not.</p><p>Note: in a mesh-based simulation it returns True only if the species is clamped in all tetrahedral elements of the compartment.</p>", "Conc": "val = sim.comp.spec.Conc@<p> Returns the concentration (in Molar units) of species with identifier string spec in compartment with identifier string comp.</p><p>Note: in a mesh-based simulation this is calculated from the combined number of molecules from all tetrahedral elements in the compartment and the total volume of the tetrahedrons.</p>", "Count": "val = sim.comp.spec.Count@<p> Returns the number of molecules of a species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined count from all tetrahedral elements in the compartment.</p>"}, "Diffusion": {"Active": "val = sim.comp.diff.Active@<p> Returns whether a diffusion rule with identifier string diff in compartment with identifier string comp is active (True) or not (False). If diffusion of a species is inactive this means the molecules will remain in place and has the same effect as a diffusion constant of zero.</p>", "D": "val = sim.comp.diff.D@<p> Returns the diffusion constant of diffusion rule with identifier string diff in compartment with identifier string comp. This constant is in units m^2/s.</p><p>Note: In a mesh-based solver the value for the compartment is returned, although individual or groups of tetrahedral elements may have different values (set with setTetDiffD).</p>"}, "Reaction": {"A": "val = sim.comp.reac['fwd'].A</br>val = sim.comp.reac['bkw'].A@<p> Returns the propensity of reaction with identifier string reac in compartment with identifier string comp.</p><p>The propensity of a reaction is a function of state and is defined as the function whose product with infinitesimal time dt gives the probability that the reaction will occur in the next dt. It is the 'stochastic reaction constant' multiplied by 'h_mu'.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), the propensity of a reaction in a compartment is computed as the sum of the propensities in all tetrahedral elements of the compartment.</p>", "Active": "val = sim.comp.reac['fwd'].Active</br>val = sim.comp.reac['bkw'].Active@<p> Returns whether a reaction with identifier string reac in compartment with identifier string comp is active (True) or not (False). If it's not active this means that a reaction will never occur regardless of whether the reactants are present in sufficient numbers or not.</p><p>Note: In a mesh-based simulation this method will return True only if the reaction is active in all tetrahedral elements in the compartment.</p>", "C": "val = sim.comp.reac['fwd'].C</br>val = sim.comp.reac['bkw'].C@<p> Returns the 'stochastic reaction constant' (or 'specific probability rate constant') of reaction with identifier string reac in compartment with identifier string comp.</p><p>The 'stochastic reaction constant' multiplied by infinitesimal time interval dt gives the average probability that one reaction channel of this reaction type will react accordingly in dt.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), the stochastic reaction constant is computed as the weighted mean of the stochastic reaction constants in all tetrahedral elements of the compartment.</p>", "Extent": "val = sim.comp.reac['fwd'].Extent</br>val = sim.comp.reac['bkw'].Extent@<p> Return the extent of reaction with identifier string reac in compartment with identifier string comp, that is the number of times the reaction has occurred up to the current simulation time.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), returns the sum of the reaction extents in all tetrahedral elements of the compartment.</p>", "H": "val = sim.comp.reac['fwd'].H</br>val = sim.comp.reac['bkw'].H@<p> Returns h_mu, the distinct number of ways in which reaction with identifier string reac can occur in compartment with identifier string comp, by computing the product of its reactants. Note: in a mesh-based simulation (i.e. Tetexact), returns the sum of the h_mu's over all tetrahedral elements in the compartment.</p>", "K": "val = sim.comp.reac['fwd'].K</br>val = sim.comp.reac['bkw'].K@<p> Returns the macroscopic reaction constant of reaction with identifier string reac in compartment with identifier string comp. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based simulation the value for the compartment is returned, although individual tetrahedral elements may have different values (set with setTetReacK).</p>"}, "Vol": "val = sim.comp.Vol@<p> Returns the volume of compartment with identifier string comp (in m^3).</p>"}, "Diff. Boundary": {"Species": {"DiffusionActive": "val = sim.diffb.spec.DiffusionActive@<p> Returns whether diffusion is active across a diffusion boundary for a species.</p>"}}, "Patch": {"Species": {"Amount": "val = sim.patch.spec.Amount@<p> Returns the amount (in mols) of species with identifier string spec in patch with identifier string pat.</p><p>Note: in a mesh-based simulation this is the combined amount from all triangular elements in the patch.</p>", "Clamped": "val = sim.patch.spec.Clamped@<p> Sets the amount (in mols) of species with identifier string spec in patch with identifier string pat to a. In a discrete solver, such as Wmdirect and Tetexact, this continuous value is converted internally into a discrete number of molecules by multiplication with Avogadro's number.</p><p>Note: in a mesh-based simulation the molecules are divided as equally as possible over all triangular elements in the patch (i.e. a uniform distribution).</p>", "Count": "val = sim.patch.spec.Count@<p> Returns the number of molecules of species with identifier string spec in patch with identifier string pat.Note: in a mesh-based simulation this is the combined count from all triangular elements in the patch.</p>"}, "Area": "val = sim.patch.Area@<p> Returns the area of patch with identifier string pat (in m^2).</p>", "Reaction": {"A": "val = sim.patch.reac['fwd'].A</br>val = sim.patch.reac['bkw'].A@<p> Returns the propensity of surface reaction with identifier string sreac in patch with identifier string pat. Note: in a mesh-based simulation (i.e. Tetexact), the propensity of a surface reaction in a patch is computed as the sum of the propensities in all triangular elements of the patch.</p>", "Active": "val = sim.patch.reac['fwd'].Active</br>val = sim.patch.reac['bkw'].Active@<p> Returns whether a voltage-dependent surface reaction with identifier string vsreac in patch with identifier string pat is active (True) or not (False). If it's not active this means that the voltage-dependent surface reaction will never occur regardless of whether the reactants are present in sufficient numbers or not.</p><p>Note: In a mesh-based simulation this method will return True only if the voltage-dependent surface reaction is active in all triangular elements in the patch.</p>", "C": "val = sim.patch.reac['fwd'].C</br>val = sim.patch.reac['bkw'].C@<p> Returns the 'stochastic reaction constant' (or 'specific probability rate constant') of surface reaction with identifier string sreac in patch with identifier string pat.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), the stochastic reaction constant is computed as the weighted mean of the stochastic reaction constants in all triangular elements of the patch.</p>", "Extent": "val = sim.patch.reac['fwd'].Extent</br>val = sim.patch.reac['bkw'].Extent@<p> Returns the extent of surface reaction with identifier string sreac in patch with identifier string pat, that is the number of times the surface reaction has occurred up to the current simulation time.</p><p>Note: in a mesh-based simulation (i.e. Tetexact), returns the sum of the reaction extents in all triangular elements of the patch.</p>", "H": "val = sim.patch.reac['fwd'].H</br>val = sim.patch.reac['bkw'].H@<p> Returns h_mu, the distinct number of ways in which surface reaction with identifier string sreac can occur in patch with identifier string pat, by computing the product of its reactants. Note: in a mesh-based simulation (i.e. Tetexact), returns the sum of the h_mu's over all triangular elements in the patch.</p>", "K": "val = sim.patch.reac['fwd'].K</br>val = sim.patch.reac['bkw'].K@<p> Returns the macroscopic reaction constant of surface reaction with identifier string sreac in patch with identifier string pat. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based solver the value for the patch is returned, although individual triangle elements may have different values (set with setTriSReacK).</p>"}}, "Region of Interest": {"Species": {"Amount": "val = sim.roi.spec.Amount@<p> Get the amount of a species in a ROI.</p>", "Conc": "val = sim.roi.spec.Conc@<p> Get the concentration of a species in a ROI.</p>", "Count": "val = sim.roi.spec.Count@<p> Get the count of a species in a ROI.</p>"}, "Area": "val = sim.roi.Area@<p> Get the area of a ROI.</p>", "Diffusion": {"Extent": "val = sim.roi.diff.Extent</br>val = sim.roi.diff(direc=tet2).Extent@<p> Return the extent of diffusion with identifier string d in ROI with identifier string ROI_id, that is the number of times the diffusion has occurred up to the current simulation time.</p>"}, "Reaction": {"Extent": "val = sim.roi.reac['fwd'].Extent</br>val = sim.roi.reac['bkw'].Extent@<p> Return the extent of surface reaction with identifier string sr in ROI with identifier string ROI_id, that is the number of times the reaction has occurred up to the current simulation time.</p>"}, "Vol": "val = sim.roi.Vol@<p> Get the volume of a ROI.</p>"}, "Surf. Diff. Boundary": {"Species": {"DiffusionActive": "val = sim.sdiffb.spec.DiffusionActive@<p> Returns whether diffusion is active across a surface diffusion boundary for a species.</p>"}}, "Vertex": {"IClamp": "val = sim.VERT(vert).IClamp</br>val = sim.VERTS(vertLst).IClamp@<p> Get current clamp to vertex element with index vidx (Amps). NOTE: Convention is maintained that a positive current clamp is depolarizing, a negative current clamp is hyperpolarizing.</p>", "V": "val = sim.VERT(vert).V</br>val = sim.VERTS(vertLst).V@<p> Returns the potential (in volts) of vertex element with index idx.</p>", "VClamped": "val = sim.VERT(vert).VClamped</br>val = sim.VERTS(vertLst).VClamped@<p> Returns true if the potential of vertex element with index idx is clamped to some voltage.</p>"}}, "DistTetOpSplit": {"Tetrahedron": {"Species": {"Conc": "val = sim.TET(tet).spec.Conc</br>val = sim.TETS(tetLst).spec.Conc@<p> Returns the concentration (in Molar units) of species with identifier string spec in a tetrahedral element with index idx.</p>", "Count": "val = sim.TET(tet).spec.Count</br>val = sim.TETS(tetLst).spec.Count@<p> Returns the number of molecules of species with identifier string spec in the tetrahedral element with index idx.</p>"}, "V": "val = sim.TET(tet).V</br>val = sim.TETS(tetLst).V@<p> Returns the potential (in volts) of tetrahdron element with index tidx.</p>"}, "Triangle": {"Species": {"Count": "val = sim.TRI(tri).spec.Count</br>val = sim.TRIS(triLst).spec.Count@<p> Returns the number of molecules of species with identifier string spec in the triangular element with index idx.</p>"}, "Current": {"I": "val = sim.TRI(tri).curr.I</br>val = sim.TRIS(triLst).curr.I@<p> Returns the ohmic current of triangle element with index idx, in amps.</p>"}, "V": "val = sim.TRI(tri).V</br>val = sim.TRIS(triLst).V@<p> Returns the potential (in volts) of triangle element with index tidx.</p>"}, "Vertex": {"V": "val = sim.VERT(vert).V</br>val = sim.VERTS(vertLst).V@<p> Returns the potential (in volts) of vertex element with index vidx.</p>", "IClamp": "val = sim.VERT(vert).IClamp</br>val = sim.VERTS(vertLst).IClamp@<p> Returns the current clamp on the vertex with index vidx, in ampere. NOTE: Convention is maintained that a positive current clamp is depolarizing, a negative current clamp is hyperpolarizing.</p>"}, "Compartment": {"Species": {"Conc": "val = sim.comp.spec.Conc@<p> Returns the concentration (in Molar units) of species with identifier string spec in compartment with identifier string comp.</p><p>Note: in a mesh-based simulation this is calculated from the combined number of molecules from all tetrahedral elements in the compartment and the total volume of the tetrahedrons.</p>", "Count": "val = sim.comp.spec.Count@<p> Returns the number of molecules of a species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined count from all tetrahedral elements in the compartment.</p>"}}, "Diff. Boundary": {"Species": {"DiffusionActive": "val = sim.diffb.spec.DiffusionActive@<p> Returns whether diffusion is active across a diffusion boundary for a species.</p>"}}, "Patch": {"Species": {"Count": "val = sim.patch.spec.Count@<p> Returns the number of molecules of species with identifier string spec in patch with identifier string pat.Note: in a mesh-based simulation this is the combined count from all triangular elements in the patch.</p>"}}}}, "set": {"Wmdirect": {"Compartment": {"Species": {"Amount": "sim.comp.spec.Amount = val@<p> Set the amount (in mols) of species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined amount from all tetrahedral elements in the compartment.</p>", "Clamped": "sim.comp.spec.Clamped = val@<p> Sets whether the concentration of species with identifier string spec in compartment with identifier string comp is clamped (clamped = True) or not (clamped = False). If a species is clamped the concentration stays the same regardless of reactions that consume or produce molecules of the species.</p><p>Note: in a mesh-based simulation this will set the species to be clamped or not in all tetrahedral elements of the compartment.</p>", "Conc": "sim.comp.spec.Conc = val@<p> Sets the concentration (in Molar units) of species with identifier string spec in compartment with identifier string comp to conc. In a discrete solver the continuous concentration is converted to a discrete number of molecules.</p><p>Note: in a mesh-based simulation the molecules are divided as equally as possible over all tetrahedral elements in the compartment (i.e. a uniform distribution).</p>", "Count": "sim.comp.spec.Count = val@<p> Set the number of molecules of a species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined count from all tetrahedral elements in the compartment.</p>"}, "Diffusion": {"Active": "sim.comp.diff.Active = val@<p> Activate (active = True) or deactivate (active = False) a diffusion rule with identifier string diff in compartment with identifier string comp. If diffusion of a species is inactive this means the molecules will remain in place and is effectively the same as setting the diffusion constant to zero</p>", "D": "sim.comp.diff.D = val@<p> Sets the diffusion constant of diffusion rule with identifier string diff in compartment with identifier string comp to dcst (in m^2/s).</p><p>Note: This method will set the diffusion constant in all tetrahedral elements in the compartment.</p><p>Note: The default value still comes from the steps.model description, so calling reset() will return the diffusion constants to that value.</p>"}, "Reaction": {"Active": "sim.comp.reac['fwd'].Active = val</br>sim.comp.reac['bkw'].Active = val@<p> Activate (active = True) or deactivate (active = False) a reaction with identifier string reac in compartment with identifier string comp. If a reaction is not active this means that a reaction will never occur regardless of whether the reactants are present in sufficient numbers or not.</p><p>Note: In a mesh-based simulation this will activate/deactivate the reaction in all tetrahedral elements in the compartment.</p>", "K": "sim.comp.reac['fwd'].K = val</br>sim.comp.reac['bkw'].K = val@<p> Sets the macroscopic reaction constant of reaction with identifier string reac in compartment with identifier string comp to kf. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based simulation this method sets the reaction constant in all tetrahedral elements of the compartment to kf</p><p>Note: The default value still comes from the steps.model description, so calling reset() will return the reaction constant to that value.</p>"}, "Vol": "sim.comp.Vol = val@<p> Set the volume of compartment with identifier string comp (in m^3).</p>"}, "Patch": {"Species": {"Amount": "sim.patch.spec.Amount = val@<p> Sets the amount (in mols) of species with identifier string spec in patch with identifier string pat to a. In a discrete solver, such as Wmdirect and Tetexact, this continuous value is converted internally into a discrete number of molecules by multiplication with Avogadro's number.</p><p>Note: in a mesh-based simulation the molecules are divided as equally as possible over all triangular elements in the patch (i.e. a uniform distribution).</p>", "Clamped": "sim.patch.spec.Clamped = val@<p> Sets whether the species with identifier string spec in patch with identifier string pat is clamped (clamped = True) or not (clamped = False). If a species is clamped the number of molecules stays the same regardless of surface reactions that consume or produce molecules of the species.</p><p>Note: in a mesh-based simulation this will set the species to be clamped in all triangular elements of the patch.</p>", "Count": "sim.patch.spec.Count = val@<p> Sets the number of molecules of species with identifier string spec in patch with identifier string pat to n. Note: in a mesh-based simulation the molecules are divided as equally as possible over all triangular elements in the patch (i.e. a uniform distribution).</p>"}, "Area": "sim.patch.Area = val@<p> Sets the area of patch with identifier string pat to area a (in m^2).</p>", "Reaction": {"Active": "sim.patch.reac['fwd'].Active = val</br>sim.patch.reac['bkw'].Active = val@<p> Activate (active = True) or deactivate (active = False) a voltage-dependent surface reaction with identifier string vsreac in patch with identifier string pat. If a voltage-dependent surface reaction is not active this means that a reaction will never occur regardless of whether the reactants are present in sufficient numbers or not.</p><p>Note: In a mesh-based simulation this will activate/ deactivate the reaction in all triangular elements in the patch.</p>", "K": "sim.patch.reac['fwd'].K = val</br>sim.patch.reac['bkw'].K = val@<p> Sets the macroscopic reaction constant of surface reaction with identifier string sreac in patch with identifier string pat to kf. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based simulation this method sets the surface reaction constant in all triangular elements of the patch to kf.</p><p>Note: The default value still comes from the steps.model description, so calling reset() will return the surface reaction constant to that value.</p>"}}}, "Wmrssa": {"Compartment": {"Species": {"Amount": "sim.comp.spec.Amount = val@<p> Set the amount (in mols) of species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined amount from all tetrahedral elements in the compartment.</p>", "Clamped": "sim.comp.spec.Clamped = val@<p> Sets whether the concentration of species with identifier string spec in compartment with identifier string comp is clamped (clamped = True) or not (clamped = False). If a species is clamped the concentration stays the same regardless of reactions that consume or produce molecules of the species.</p><p>Note: in a mesh-based simulation this will set the species to be clamped or not in all tetrahedral elements of the compartment.</p>", "Conc": "sim.comp.spec.Conc = val@<p> Sets the concentration (in Molar units) of species with identifier string spec in compartment with identifier string comp to conc. In a discrete solver the continuous concentration is converted to a discrete number of molecules.</p><p>Note: in a mesh-based simulation the molecules are divided as equally as possible over all tetrahedral elements in the compartment (i.e. a uniform distribution).</p>", "Count": "sim.comp.spec.Count = val@<p> Set the number of molecules of a species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined count from all tetrahedral elements in the compartment.</p>"}, "Diffusion": {"Active": "sim.comp.diff.Active = val@<p> Activate (active = True) or deactivate (active = False) a diffusion rule with identifier string diff in compartment with identifier string comp. If diffusion of a species is inactive this means the molecules will remain in place and is effectively the same as setting the diffusion constant to zero</p>", "D": "sim.comp.diff.D = val@<p> Sets the diffusion constant of diffusion rule with identifier string diff in compartment with identifier string comp to dcst (in m^2/s).</p><p>Note: This method will set the diffusion constant in all tetrahedral elements in the compartment.</p><p>Note: The default value still comes from the steps.model description, so calling reset() will return the diffusion constants to that value.</p>"}, "Reaction": {"Active": "sim.comp.reac['fwd'].Active = val</br>sim.comp.reac['bkw'].Active = val@<p> Activate (active = True) or deactivate (active = False) a reaction with identifier string reac in compartment with identifier string comp. If a reaction is not active this means that a reaction will never occur regardless of whether the reactants are present in sufficient numbers or not.</p><p>Note: In a mesh-based simulation this will activate/deactivate the reaction in all tetrahedral elements in the compartment.</p>", "K": "sim.comp.reac['fwd'].K = val</br>sim.comp.reac['bkw'].K = val@<p> Sets the macroscopic reaction constant of reaction with identifier string reac in compartment with identifier string comp to kf. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based simulation this method sets the reaction constant in all tetrahedral elements of the compartment to kf</p><p>Note: The default value still comes from the steps.model description, so calling reset() will return the reaction constant to that value.</p>"}, "Vol": "sim.comp.Vol = val@<p> Set the volume of compartment with identifier string comp (in m^3).</p>"}, "Patch": {"Species": {"Amount": "sim.patch.spec.Amount = val@<p> Sets the amount (in mols) of species with identifier string spec in patch with identifier string pat to a. In a discrete solver, such as Wmdirect and Tetexact, this continuous value is converted internally into a discrete number of molecules by multiplication with Avogadro's number.</p><p>Note: in a mesh-based simulation the molecules are divided as equally as possible over all triangular elements in the patch (i.e. a uniform distribution).</p>", "Clamped": "sim.patch.spec.Clamped = val@<p> Sets whether the species with identifier string spec in patch with identifier string pat is clamped (clamped = True) or not (clamped = False). If a species is clamped the number of molecules stays the same regardless of surface reactions that consume or produce molecules of the species.</p><p>Note: in a mesh-based simulation this will set the species to be clamped in all triangular elements of the patch.</p>", "Count": "sim.patch.spec.Count = val@<p> Sets the number of molecules of species with identifier string spec in patch with identifier string pat to n. Note: in a mesh-based simulation the molecules are divided as equally as possible over all triangular elements in the patch (i.e. a uniform distribution).</p>"}, "Area": "sim.patch.Area = val@<p> Sets the area of patch with identifier string pat to area a (in m^2).</p>", "Reaction": {"Active": "sim.patch.reac['fwd'].Active = val</br>sim.patch.reac['bkw'].Active = val@<p> Activate (active = True) or deactivate (active = False) a voltage-dependent surface reaction with identifier string vsreac in patch with identifier string pat. If a voltage-dependent surface reaction is not active this means that a reaction will never occur regardless of whether the reactants are present in sufficient numbers or not.</p><p>Note: In a mesh-based simulation this will activate/ deactivate the reaction in all triangular elements in the patch.</p>", "K": "sim.patch.reac['fwd'].K = val</br>sim.patch.reac['bkw'].K = val@<p> Sets the macroscopic reaction constant of surface reaction with identifier string sreac in patch with identifier string pat to kf. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based simulation this method sets the surface reaction constant in all triangular elements of the patch to kf.</p><p>Note: The default value still comes from the steps.model description, so calling reset() will return the surface reaction constant to that value.</p>"}}}, "Wmrk4": {"Compartment": {"Species": {"Amount": "sim.comp.spec.Amount = val@<p> Set the amount (in mols) of species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined amount from all tetrahedral elements in the compartment.</p>", "Clamped": "sim.comp.spec.Clamped = val@<p> Sets whether the concentration of species with identifier string spec in compartment with identifier string comp is clamped (clamped = True) or not (clamped = False). If a species is clamped the concentration stays the same regardless of reactions that consume or produce molecules of the species.</p><p>Note: in a mesh-based simulation this will set the species to be clamped or not in all tetrahedral elements of the compartment.</p>", "Conc": "sim.comp.spec.Conc = val@<p> Sets the concentration (in Molar units) of species with identifier string spec in compartment with identifier string comp to conc. In a discrete solver the continuous concentration is converted to a discrete number of molecules.</p><p>Note: in a mesh-based simulation the molecules are divided as equally as possible over all tetrahedral elements in the compartment (i.e. a uniform distribution).</p>", "Count": "sim.comp.spec.Count = val@<p> Set the number of molecules of a species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined count from all tetrahedral elements in the compartment.</p>"}, "Diffusion": {"Active": "sim.comp.diff.Active = val@<p> Activate (active = True) or deactivate (active = False) a diffusion rule with identifier string diff in compartment with identifier string comp. If diffusion of a species is inactive this means the molecules will remain in place and is effectively the same as setting the diffusion constant to zero</p>", "D": "sim.comp.diff.D = val@<p> Sets the diffusion constant of diffusion rule with identifier string diff in compartment with identifier string comp to dcst (in m^2/s).</p><p>Note: This method will set the diffusion constant in all tetrahedral elements in the compartment.</p><p>Note: The default value still comes from the steps.model description, so calling reset() will return the diffusion constants to that value.</p>"}, "Reaction": {"Active": "sim.comp.reac['fwd'].Active = val</br>sim.comp.reac['bkw'].Active = val@<p> Activate (active = True) or deactivate (active = False) a reaction with identifier string reac in compartment with identifier string comp. If a reaction is not active this means that a reaction will never occur regardless of whether the reactants are present in sufficient numbers or not.</p><p>Note: In a mesh-based simulation this will activate/deactivate the reaction in all tetrahedral elements in the compartment.</p>", "K": "sim.comp.reac['fwd'].K = val</br>sim.comp.reac['bkw'].K = val@<p> Sets the macroscopic reaction constant of reaction with identifier string reac in compartment with identifier string comp to kf. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based simulation this method sets the reaction constant in all tetrahedral elements of the compartment to kf</p><p>Note: The default value still comes from the steps.model description, so calling reset() will return the reaction constant to that value.</p>"}, "Vol": "sim.comp.Vol = val@<p> Set the volume of compartment with identifier string comp (in m^3).</p>"}, "Patch": {"Species": {"Amount": "sim.patch.spec.Amount = val@<p> Sets the amount (in mols) of species with identifier string spec in patch with identifier string pat to a. In a discrete solver, such as Wmdirect and Tetexact, this continuous value is converted internally into a discrete number of molecules by multiplication with Avogadro's number.</p><p>Note: in a mesh-based simulation the molecules are divided as equally as possible over all triangular elements in the patch (i.e. a uniform distribution).</p>", "Clamped": "sim.patch.spec.Clamped = val@<p> Sets whether the species with identifier string spec in patch with identifier string pat is clamped (clamped = True) or not (clamped = False). If a species is clamped the number of molecules stays the same regardless of surface reactions that consume or produce molecules of the species.</p><p>Note: in a mesh-based simulation this will set the species to be clamped in all triangular elements of the patch.</p>", "Count": "sim.patch.spec.Count = val@<p> Sets the number of molecules of species with identifier string spec in patch with identifier string pat to n. Note: in a mesh-based simulation the molecules are divided as equally as possible over all triangular elements in the patch (i.e. a uniform distribution).</p>"}, "Area": "sim.patch.Area = val@<p> Sets the area of patch with identifier string pat to area a (in m^2).</p>", "Reaction": {"Active": "sim.patch.reac['fwd'].Active = val</br>sim.patch.reac['bkw'].Active = val@<p> Activate (active = True) or deactivate (active = False) a voltage-dependent surface reaction with identifier string vsreac in patch with identifier string pat. If a voltage-dependent surface reaction is not active this means that a reaction will never occur regardless of whether the reactants are present in sufficient numbers or not.</p><p>Note: In a mesh-based simulation this will activate/ deactivate the reaction in all triangular elements in the patch.</p>", "K": "sim.patch.reac['fwd'].K = val</br>sim.patch.reac['bkw'].K = val@<p> Sets the macroscopic reaction constant of surface reaction with identifier string sreac in patch with identifier string pat to kf. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based simulation this method sets the surface reaction constant in all triangular elements of the patch to kf.</p><p>Note: The default value still comes from the steps.model description, so calling reset() will return the surface reaction constant to that value.</p>"}}}, "Tetexact": {"Compartment": {"Species": {"Amount": "sim.comp.spec.Amount = val@<p> Set the amount (in mols) of species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined amount from all tetrahedral elements in the compartment.</p>", "Clamped": "sim.comp.spec.Clamped = val@<p> Sets whether the concentration of species with identifier string spec in compartment with identifier string comp is clamped (clamped = True) or not (clamped = False). If a species is clamped the concentration stays the same regardless of reactions that consume or produce molecules of the species.</p><p>Note: in a mesh-based simulation this will set the species to be clamped or not in all tetrahedral elements of the compartment.</p>", "Conc": "sim.comp.spec.Conc = val@<p> Sets the concentration (in Molar units) of species with identifier string spec in compartment with identifier string comp to conc. In a discrete solver the continuous concentration is converted to a discrete number of molecules.</p><p>Note: in a mesh-based simulation the molecules are divided as equally as possible over all tetrahedral elements in the compartment (i.e. a uniform distribution).</p>", "Count": "sim.comp.spec.Count = val@<p> Set the number of molecules of a species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined count from all tetrahedral elements in the compartment.</p>"}, "Diffusion": {"Active": "sim.comp.diff.Active = val@<p> Activate (active = True) or deactivate (active = False) a diffusion rule with identifier string diff in compartment with identifier string comp. If diffusion of a species is inactive this means the molecules will remain in place and is effectively the same as setting the diffusion constant to zero</p>", "D": "sim.comp.diff.D = val@<p> Sets the diffusion constant of diffusion rule with identifier string diff in compartment with identifier string comp to dcst (in m^2/s).</p><p>Note: This method will set the diffusion constant in all tetrahedral elements in the compartment.</p><p>Note: The default value still comes from the steps.model description, so calling reset() will return the diffusion constants to that value.</p>"}, "Reaction": {"Active": "sim.comp.reac['fwd'].Active = val</br>sim.comp.reac['bkw'].Active = val@<p> Activate (active = True) or deactivate (active = False) a reaction with identifier string reac in compartment with identifier string comp. If a reaction is not active this means that a reaction will never occur regardless of whether the reactants are present in sufficient numbers or not.</p><p>Note: In a mesh-based simulation this will activate/deactivate the reaction in all tetrahedral elements in the compartment.</p>", "K": "sim.comp.reac['fwd'].K = val</br>sim.comp.reac['bkw'].K = val@<p> Sets the macroscopic reaction constant of reaction with identifier string reac in compartment with identifier string comp to kf. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based simulation this method sets the reaction constant in all tetrahedral elements of the compartment to kf</p><p>Note: The default value still comes from the steps.model description, so calling reset() will return the reaction constant to that value.</p>"}, "Vol": "sim.comp.Vol = val@<p> Set the volume of compartment with identifier string comp (in m^3).</p>"}, "Diff. Boundary": {"Species": {"Dcst": "sim.diffb.spec.Dcst = val</br>sim.diffb(direc=comp2).spec.Dcst = val@<p> Set the diffusion constant of tetrahedrons across a diffusion boundary. If direc is provided, only set dcsts of diffusion towards it (Directional dcsts of diffusions in tetrahedrons in the other compartment of the diffusion boundary towards tetrahedons in the direction compartment).</p>", "DiffusionActive": "sim.diffb.spec.DiffusionActive = val@<p> Activates or inactivates diffusion across a diffusion boundary for a species.</p>"}}, "Membrane": {"Capac": "sim.memb.Capac = val@<p> Sets the specific membrane capacitance (in farad / m^2) of membrane with string identifier memb.</p>", "Potential": "sim.memb.Potential = val@<p> Sets the potential (in volts) of membrane with string identifier memb. NOTE: This method will set the potential of all nodes in the volume conductor to the same value.</p>", "Res": "sim.memb.Res = val@<p> Sets the  electrical resistivity (in ohm/m^2) of the membrane with string identifier memb. Reversal potential vrev is required in Volts.</p>", "VolRes": "sim.memb.VolRes = val@<p> Sets the bulk electrical resistivity (in ohm.m) of the volume conductor assocaited with membrane with string identifier memb.</p>"}, "Patch": {"Species": {"Amount": "sim.patch.spec.Amount = val@<p> Sets the amount (in mols) of species with identifier string spec in patch with identifier string pat to a. In a discrete solver, such as Wmdirect and Tetexact, this continuous value is converted internally into a discrete number of molecules by multiplication with Avogadro's number.</p><p>Note: in a mesh-based simulation the molecules are divided as equally as possible over all triangular elements in the patch (i.e. a uniform distribution).</p>", "Clamped": "sim.patch.spec.Clamped = val@<p> Sets whether the species with identifier string spec in patch with identifier string pat is clamped (clamped = True) or not (clamped = False). If a species is clamped the number of molecules stays the same regardless of surface reactions that consume or produce molecules of the species.</p><p>Note: in a mesh-based simulation this will set the species to be clamped in all triangular elements of the patch.</p>", "Count": "sim.patch.spec.Count = val@<p> Sets the number of molecules of species with identifier string spec in patch with identifier string pat to n. Note: in a mesh-based simulation the molecules are divided as equally as possible over all triangular elements in the patch (i.e. a uniform distribution).</p>"}, "Area": "sim.patch.Area = val@<p> Sets the area of patch with identifier string pat to area a (in m^2).</p>", "Reaction": {"Active": "sim.patch.reac['fwd'].Active = val</br>sim.patch.reac['bkw'].Active = val@<p> Activate (active = True) or deactivate (active = False) a voltage-dependent surface reaction with identifier string vsreac in patch with identifier string pat. If a voltage-dependent surface reaction is not active this means that a reaction will never occur regardless of whether the reactants are present in sufficient numbers or not.</p><p>Note: In a mesh-based simulation this will activate/ deactivate the reaction in all triangular elements in the patch.</p>", "K": "sim.patch.reac['fwd'].K = val</br>sim.patch.reac['bkw'].K = val@<p> Sets the macroscopic reaction constant of surface reaction with identifier string sreac in patch with identifier string pat to kf. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based simulation this method sets the surface reaction constant in all triangular elements of the patch to kf.</p><p>Note: The default value still comes from the steps.model description, so calling reset() will return the surface reaction constant to that value.</p>"}}, "Region of Interest": {"Species": {"Amount": "sim.roi.spec.Amount = val@<p> Set the amount of a species in a ROI.</p>", "Clamped": "sim.roi.spec.Clamped = val@<p> Set a species in a ROI to be clamped or not. The count of species s in the ROI is clamped if b is True, not clamped if b is False.</p>", "Conc": "sim.roi.spec.Conc = val@<p> Set the concentration of a species in a ROI.</p>", "Count": "sim.roi.spec.Count = val@<p> Set the count of a species in a ROI.</p>"}, "Diffusion": {"Active": "sim.roi.diff.Active = val@<p> Set diffusion d in a ROI to be active or not.</p>", "D": "sim.roi.diff.D = val</br>sim.roi.diff(direc=tet2).D = val@<p> Sets the macroscopic diffusion constant of diffusion with identifier string d in a ROI with identifier string ROI_id to dk.</p><p>Note: The default value still comes from the steps.model description, so calling reset() will return the diffusion constant to that value.</p>"}, "Reaction": {"Active": "sim.roi.reac['fwd'].Active = val</br>sim.roi.reac['bkw'].Active = val@<p> Set voltage dependent surface reaction vsr in a ROI to be active or not.</p>", "K": "sim.roi.reac['fwd'].K = val</br>sim.roi.reac['bkw'].K = val@<p> Sets the macroscopic reaction constant of surface reaction with identifier string sr in a ROI with identifier string ROI_id to kf. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: The default value still comes from the steps.model description, so calling reset() will return the reaction constant to that value.</p>"}}, "Surf. Diff. Boundary": {"Species": {"Dcst": "sim.sdiffb.spec.Dcst = val</br>sim.diffb(direc=patch2).spec.Dcst = val@<p> Set the diffusion constant of triangles across a surface diffusion boundary. If direc is provided, only set dcsts of diffusion towards it (Directional dcsts of diffusions in triangles in the other patches of the diffusion boundary towards triangles in the direction patch).</p>", "DiffusionActive": "sim.sdiffb.spec.DiffusionActive = val@<p> Activates or inactivates diffusion across a surface diffusion boundary for a species.</p>"}}, "Tetrahedron": {"Species": {"Amount": "sim.TET(tet).spec.Amount = val</br>sim.TETS(tetLst).spec.Amount = val@<p> Sets the amount (in mols) of species with identifier string spec in tetrahedral element with index idx to a. This continuous value must be converted internally to a discrete number of molecules by multiplication with Avogadro's number.</p><p>Due to the small volumes of tetrahedral elements the difference between 'rounding up' and 'rounding down' can be a significant difference in concentration.</p>", "Clamped": "sim.TET(tet).spec.Clamped = val</br>sim.TETS(tetLst).spec.Clamped = val@<p> Sets whether the concentration of species spec in tetrahedral element with index idx is clamped (clamped = True) or not (clamped = False). If a species is clamped the concentration stays the same regardless of reactions that consume or produce molecules of the species or diffusion of the species into or out of the tetrahedral element.</p>", "Conc": "sim.TET(tet).spec.Conc = val</br>sim.TETS(tetLst).spec.Conc = val@<p> Sets the concentration (in Molar units) of species with identifier string spec in a tetrahedral element with index idx to conc.This continuous value must be converted internally to a discrete number of molecules.</p><p>Due to the small volumes of tetrahedral elements the difference between 'rounding up' and 'rounding down' can be a large difference in concentration.</p>", "Count": "sim.TET(tet).spec.Count = val</br>sim.TETS(tetLst).spec.Count = val@<p> Sets the number of molecules of species with identifier string spec in tetrahedral element with index idx to n.</p>"}, "Diffusion": {"Active": "sim.TET(tet).diff.Active = val</br>sim.TETS(tetLst).diff.Active = val@<p> Activate (active = True) or deactivate (active = False) diffusion rule with identifier string diff in tetrahedral element with index idx. If diffusion of a species is inactive this means the molecules will never diffuse out of the tetrahedron and has the same effect as a diffusion constant of zero.</p>", "D": "sim.TET(tet).diff.D = val</br>sim.TET(tet).diff(direc=tet2).D = val</br>sim.TETS(tetLst).diff.D = val@<p> Sets the diffusion constant of diffusion rule with identifier string diff in tetrahedral element with index idx to dcst (in m^2/s). Specify direc to set the constant only towards a given tetrahedron direction.</p>"}, "Reaction": {"Active": "sim.TET(tet).reac['fwd'].Active = val</br>sim.TET(tet).reac['bkw'].Active = val</br>sim.TETS(tetLst).reac['fwd'].Active = val</br>sim.TETS(tetLst).reac['bkw'].Active = val@<p> Activate (active = True) or deactivate (active = False) a reaction with identifier string reac in tetrahedral element with index idx. If it's not active this means that the reaction will never occur regardless of whether reactants are present in sufficient numbers or not.</p>", "K": "sim.TET(tet).reac['fwd'].K = val</br>sim.TET(tet).reac['bkw'].K = val</br>sim.TETS(tetLst).reac['fwd'].K = val</br>sim.TETS(tetLst).reac['bkw'].K = val@<p> Sets the macroscopic reaction constant of reaction with identifier string reac in tetrahedral element with index idx to kf. The units of the reaction constant depends on the order of the reaction.</p>"}, "V": "sim.TET(tet).V = val</br>sim.TETS(tetLst).V = val@<p> Set the potential (in volts) of tetrahedral element with index idx.</p>", "VClamped": "sim.TET(tet).VClamped = val</br>sim.TETS(tetLst).VClamped = val@<p> Sets whether the potential of tetrahedral element with index idx is clamped (clamped = True) or not (clamped = False).</p>"}, "Triangle": {"Species": {"Amount": "sim.TRI(tri).spec.Amount = val</br>sim.TRIS(triLst).spec.Amount = val@<p> Sets the amount (in mols) of species with identifier string spec in triangular element with index idx to a. This continuous value must be converted internally to a discrete number of molecules by multiplication with Avogadro's number.</p>", "Clamped": "sim.TRI(tri).spec.Clamped = val</br>sim.TRIS(triLst).spec.Clamped = val@<p> Sets whether the concentration of species spec in triangular element with index idx is clamped (clamped = True) or not (clamped = False). If a species is clamped the concentration stays the same regardless of reactions that consume or produce molecules of the species.</p>", "Count": "sim.TRI(tri).spec.Count = val</br>sim.TRIS(triLst).spec.Count = val@<p> Sets the number of molecules of species with identifier string spec in triangular element with index idx to n.</p>"}, "Capac": "sim.TRI(tri).Capac = val</br>sim.TRIS(triLst).Capac = val@<p> Sets the specific membrane capacitance (in farad / m^2) of tri with index tidx.</p>", "IClamp": "sim.TRI(tri).IClamp = val</br>sim.TRIS(triLst).IClamp = val@<p> Set current clamp to triangle element with index idx to current i (amps). NOTE: Convention is maintained that a positive current clamp is depolarizing, a negative current clamp is hyperpolarizing.</p>", "Diffusion": {"D": "sim.TRI(tri).sdiff.D = val</br>sim.TRI(tri).sdiff(direc=tri2).D = val</br>sim.TRIS(triLst).sdiff.D = val@<p> Sets the diffusion constant of diffusion rule with identifier string diff in triangle element with index idx to dcst. Specify direc to set the constant only towards a given triangle direction.</p>"}, "Reaction": {"Active": "sim.TRI(tri).reac['fwd'].Active = val</br>sim.TRI(tri).reac['bkw'].Active = val</br>sim.TRIS(triLst).reac['fwd'].Active = val</br>sim.TRIS(triLst).reac['bkw'].Active = val@<p> Activate (active = True) or deactivate (active = False) a voltage-dependent surface reaction with identifier string vsreac in triangular element with index idx. If it's not active this means that the voltage-dependent surface reaction will never occur regardless of whether reactants are present in sufficient numbers or not.</p>", "K": "sim.TRI(tri).reac['fwd'].K = val</br>sim.TRI(tri).reac['bkw'].K = val</br>sim.TRIS(triLst).reac['fwd'].K = val</br>sim.TRIS(triLst).reac['bkw'].K = val@<p> Sets the macroscopic reaction constant of surface reaction with identifier string sreac in triangular element with index idx to kf. The units of the reaction constant depends on the order of the reaction.</p>"}, "V": "sim.TRI(tri).V = val</br>sim.TRIS(triLst).V = val@<p> Set the potential (in volts) of triangle element with index idx.</p>", "VClamped": "sim.TRI(tri).VClamped = val</br>sim.TRIS(triLst).VClamped = val@<p> Sets whether the potential of triangle element with index idx is clamped (clamped = True) or not (clamped = False).</p>"}, "Vertex": {"IClamp": "sim.VERT(vert).IClamp = val</br>sim.VERTS(vertLst).IClamp = val@<p> Set current clamp to vertex element with index idx to current i (Amps). NOTE: Convention is maintained that a positive current clamp is depolarizing, a negative current clamp is hyperpolarizing.</p>", "V": "sim.VERT(vert).V = val</br>sim.VERTS(vertLst).V = val@<p> Set the potential (in volts) of vertex element with index idx.</p>", "VClamped": "sim.VERT(vert).VClamped = val</br>sim.VERTS(vertLst).VClamped = val@<p> Sets whether the potential of vertex element with index idx is clamped (clamped = True) or not (clamped = False).</p>"}}, "TetODE": {"Compartment": {"Species": {"Amount": "sim.comp.spec.Amount = val@<p> Set the amount (in mols) of species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined amount from all tetrahedral elements in the compartment.</p>", "Clamped": "sim.comp.spec.Clamped = val@<p> Sets whether the concentration of species with identifier string spec in compartment with identifier string comp is clamped (clamped = True) or not (clamped = False). If a species is clamped the concentration stays the same regardless of reactions that consume or produce molecules of the species.</p><p>Note: in a mesh-based simulation this will set the species to be clamped or not in all tetrahedral elements of the compartment.</p>", "Conc": "sim.comp.spec.Conc = val@<p> Sets the concentration (in Molar units) of species with identifier string spec in compartment with identifier string comp to conc. In a discrete solver the continuous concentration is converted to a discrete number of molecules.</p><p>Note: in a mesh-based simulation the molecules are divided as equally as possible over all tetrahedral elements in the compartment (i.e. a uniform distribution).</p>", "Count": "sim.comp.spec.Count = val@<p> Set the number of molecules of a species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined count from all tetrahedral elements in the compartment.</p>"}, "Diffusion": {"Active": "sim.comp.diff.Active = val@<p> Activate (active = True) or deactivate (active = False) a diffusion rule with identifier string diff in compartment with identifier string comp. If diffusion of a species is inactive this means the molecules will remain in place and is effectively the same as setting the diffusion constant to zero</p>", "D": "sim.comp.diff.D = val@<p> Sets the diffusion constant of diffusion rule with identifier string diff in compartment with identifier string comp to dcst (in m^2/s).</p><p>Note: This method will set the diffusion constant in all tetrahedral elements in the compartment.</p><p>Note: The default value still comes from the steps.model description, so calling reset() will return the diffusion constants to that value.</p>"}, "Reaction": {"Active": "sim.comp.reac['fwd'].Active = val</br>sim.comp.reac['bkw'].Active = val@<p> Activate (active = True) or deactivate (active = False) a reaction with identifier string reac in compartment with identifier string comp. If a reaction is not active this means that a reaction will never occur regardless of whether the reactants are present in sufficient numbers or not.</p><p>Note: In a mesh-based simulation this will activate/deactivate the reaction in all tetrahedral elements in the compartment.</p>", "K": "sim.comp.reac['fwd'].K = val</br>sim.comp.reac['bkw'].K = val@<p> Sets the macroscopic reaction constant of reaction with identifier string reac in compartment with identifier string comp to kf. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based simulation this method sets the reaction constant in all tetrahedral elements of the compartment to kf</p><p>Note: The default value still comes from the steps.model description, so calling reset() will return the reaction constant to that value.</p>"}, "Vol": "sim.comp.Vol = val@<p> Set the volume of compartment with identifier string comp (in m^3).</p>"}, "Diff. Boundary": {"Species": {"Dcst": "sim.diffb.spec.Dcst = val</br>sim.diffb(direc=comp2).spec.Dcst = val@<p> Set the diffusion constant of tetrahedrons across a diffusion boundary. If direc is provided, only set dcsts of diffusion towards it (Directional dcsts of diffusions in tetrahedrons in the other compartment of the diffusion boundary towards tetrahedons in the direction compartment).</p>", "DiffusionActive": "sim.diffb.spec.DiffusionActive = val@<p> Activates or inactivates diffusion across a diffusion boundary for a species.</p>"}}, "Membrane": {"Capac": "sim.memb.Capac = val@<p> Sets the specific membrane capacitance (in farad / m^2) of membrane with string identifier memb.</p>", "Potential": "sim.memb.Potential = val@<p> Sets the potential (in volts) of membrane with string identifier memb. NOTE: This method will set the potential of all nodes in the volume conductor to the same value.</p>", "Res": "sim.memb.Res = val@<p> Sets the  electrical resistivity (in ohm/m^2) of the membrane with string identifier memb. Reversal potential vrev is required in Volts.</p>", "VolRes": "sim.memb.VolRes = val@<p> Sets the bulk electrical resistivity (in ohm.m) of the volume conductor assocaited with membrane with string identifier memb.</p>"}, "Patch": {"Species": {"Amount": "sim.patch.spec.Amount = val@<p> Sets the amount (in mols) of species with identifier string spec in patch with identifier string pat to a. In a discrete solver, such as Wmdirect and Tetexact, this continuous value is converted internally into a discrete number of molecules by multiplication with Avogadro's number.</p><p>Note: in a mesh-based simulation the molecules are divided as equally as possible over all triangular elements in the patch (i.e. a uniform distribution).</p>", "Clamped": "sim.patch.spec.Clamped = val@<p> Sets whether the species with identifier string spec in patch with identifier string pat is clamped (clamped = True) or not (clamped = False). If a species is clamped the number of molecules stays the same regardless of surface reactions that consume or produce molecules of the species.</p><p>Note: in a mesh-based simulation this will set the species to be clamped in all triangular elements of the patch.</p>", "Count": "sim.patch.spec.Count = val@<p> Sets the number of molecules of species with identifier string spec in patch with identifier string pat to n. Note: in a mesh-based simulation the molecules are divided as equally as possible over all triangular elements in the patch (i.e. a uniform distribution).</p>"}, "Area": "sim.patch.Area = val@<p> Sets the area of patch with identifier string pat to area a (in m^2).</p>", "Reaction": {"Active": "sim.patch.reac['fwd'].Active = val</br>sim.patch.reac['bkw'].Active = val@<p> Activate (active = True) or deactivate (active = False) a voltage-dependent surface reaction with identifier string vsreac in patch with identifier string pat. If a voltage-dependent surface reaction is not active this means that a reaction will never occur regardless of whether the reactants are present in sufficient numbers or not.</p><p>Note: In a mesh-based simulation this will activate/ deactivate the reaction in all triangular elements in the patch.</p>", "K": "sim.patch.reac['fwd'].K = val</br>sim.patch.reac['bkw'].K = val@<p> Sets the macroscopic reaction constant of surface reaction with identifier string sreac in patch with identifier string pat to kf. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based simulation this method sets the surface reaction constant in all triangular elements of the patch to kf.</p><p>Note: The default value still comes from the steps.model description, so calling reset() will return the surface reaction constant to that value.</p>"}}, "Surf. Diff. Boundary": {"Species": {"Dcst": "sim.sdiffb.spec.Dcst = val</br>sim.diffb(direc=patch2).spec.Dcst = val@<p> Set the diffusion constant of triangles across a surface diffusion boundary. If direc is provided, only set dcsts of diffusion towards it (Directional dcsts of diffusions in triangles in the other patches of the diffusion boundary towards triangles in the direction patch).</p>", "DiffusionActive": "sim.sdiffb.spec.DiffusionActive = val@<p> Activates or inactivates diffusion across a surface diffusion boundary for a species.</p>"}}, "Tetrahedron": {"Species": {"Amount": "sim.TET(tet).spec.Amount = val</br>sim.TETS(tetLst).spec.Amount = val@<p> Sets the amount (in mols) of species with identifier string spec in tetrahedral element with index idx to a. This continuous value must be converted internally to a discrete number of molecules by multiplication with Avogadro's number.</p><p>Due to the small volumes of tetrahedral elements the difference between 'rounding up' and 'rounding down' can be a significant difference in concentration.</p>", "Clamped": "sim.TET(tet).spec.Clamped = val</br>sim.TETS(tetLst).spec.Clamped = val@<p> Sets whether the concentration of species spec in tetrahedral element with index idx is clamped (clamped = True) or not (clamped = False). If a species is clamped the concentration stays the same regardless of reactions that consume or produce molecules of the species or diffusion of the species into or out of the tetrahedral element.</p>", "Conc": "sim.TET(tet).spec.Conc = val</br>sim.TETS(tetLst).spec.Conc = val@<p> Sets the concentration (in Molar units) of species with identifier string spec in a tetrahedral element with index idx to conc.This continuous value must be converted internally to a discrete number of molecules.</p><p>Due to the small volumes of tetrahedral elements the difference between 'rounding up' and 'rounding down' can be a large difference in concentration.</p>", "Count": "sim.TET(tet).spec.Count = val</br>sim.TETS(tetLst).spec.Count = val@<p> Sets the number of molecules of species with identifier string spec in tetrahedral element with index idx to n.</p>"}, "Diffusion": {"Active": "sim.TET(tet).diff.Active = val</br>sim.TETS(tetLst).diff.Active = val@<p> Activate (active = True) or deactivate (active = False) diffusion rule with identifier string diff in tetrahedral element with index idx. If diffusion of a species is inactive this means the molecules will never diffuse out of the tetrahedron and has the same effect as a diffusion constant of zero.</p>", "D": "sim.TET(tet).diff.D = val</br>sim.TET(tet).diff(direc=tet2).D = val</br>sim.TETS(tetLst).diff.D = val@<p> Sets the diffusion constant of diffusion rule with identifier string diff in tetrahedral element with index idx to dcst (in m^2/s). Specify direc to set the constant only towards a given tetrahedron direction.</p>"}, "Reaction": {"Active": "sim.TET(tet).reac['fwd'].Active = val</br>sim.TET(tet).reac['bkw'].Active = val</br>sim.TETS(tetLst).reac['fwd'].Active = val</br>sim.TETS(tetLst).reac['bkw'].Active = val@<p> Activate (active = True) or deactivate (active = False) a reaction with identifier string reac in tetrahedral element with index idx. If it's not active this means that the reaction will never occur regardless of whether reactants are present in sufficient numbers or not.</p>", "K": "sim.TET(tet).reac['fwd'].K = val</br>sim.TET(tet).reac['bkw'].K = val</br>sim.TETS(tetLst).reac['fwd'].K = val</br>sim.TETS(tetLst).reac['bkw'].K = val@<p> Sets the macroscopic reaction constant of reaction with identifier string reac in tetrahedral element with index idx to kf. The units of the reaction constant depends on the order of the reaction.</p>"}, "V": "sim.TET(tet).V = val</br>sim.TETS(tetLst).V = val@<p> Set the potential (in volts) of tetrahedral element with index idx.</p>", "VClamped": "sim.TET(tet).VClamped = val</br>sim.TETS(tetLst).VClamped = val@<p> Sets whether the potential of tetrahedral element with index idx is clamped (clamped = True) or not (clamped = False).</p>"}, "Triangle": {"Species": {"Amount": "sim.TRI(tri).spec.Amount = val</br>sim.TRIS(triLst).spec.Amount = val@<p> Sets the amount (in mols) of species with identifier string spec in triangular element with index idx to a. This continuous value must be converted internally to a discrete number of molecules by multiplication with Avogadro's number.</p>", "Clamped": "sim.TRI(tri).spec.Clamped = val</br>sim.TRIS(triLst).spec.Clamped = val@<p> Sets whether the concentration of species spec in triangular element with index idx is clamped (clamped = True) or not (clamped = False). If a species is clamped the concentration stays the same regardless of reactions that consume or produce molecules of the species.</p>", "Count": "sim.TRI(tri).spec.Count = val</br>sim.TRIS(triLst).spec.Count = val@<p> Sets the number of molecules of species with identifier string spec in triangular element with index idx to n.</p>"}, "Capac": "sim.TRI(tri).Capac = val</br>sim.TRIS(triLst).Capac = val@<p> Sets the specific membrane capacitance (in farad / m^2) of tri with index tidx.</p>", "IClamp": "sim.TRI(tri).IClamp = val</br>sim.TRIS(triLst).IClamp = val@<p> Set current clamp to triangle element with index idx to current i (amps). NOTE: Convention is maintained that a positive current clamp is depolarizing, a negative current clamp is hyperpolarizing.</p>", "Diffusion": {"D": "sim.TRI(tri).sdiff.D = val</br>sim.TRI(tri).sdiff(direc=tri2).D = val</br>sim.TRIS(triLst).sdiff.D = val@<p> Sets the diffusion constant of diffusion rule with identifier string diff in triangle element with index idx to dcst. Specify direc to set the constant only towards a given triangle direction.</p>"}, "Reaction": {"Active": "sim.TRI(tri).reac['fwd'].Active = val</br>sim.TRI(tri).reac['bkw'].Active = val</br>sim.TRIS(triLst).reac['fwd'].Active = val</br>sim.TRIS(triLst).reac['bkw'].Active = val@<p> Activate (active = True) or deactivate (active = False) a voltage-dependent surface reaction with identifier string vsreac in triangular element with index idx. If it's not active this means that the voltage-dependent surface reaction will never occur regardless of whether reactants are present in sufficient numbers or not.</p>", "K": "sim.TRI(tri).reac['fwd'].K = val</br>sim.TRI(tri).reac['bkw'].K = val</br>sim.TRIS(triLst).reac['fwd'].K = val</br>sim.TRIS(triLst).reac['bkw'].K = val@<p> Sets the macroscopic reaction constant of surface reaction with identifier string sreac in triangular element with index idx to kf. The units of the reaction constant depends on the order of the reaction.</p>"}, "V": "sim.TRI(tri).V = val</br>sim.TRIS(triLst).V = val@<p> Set the potential (in volts) of triangle element with index idx.</p>", "VClamped": "sim.TRI(tri).VClamped = val</br>sim.TRIS(triLst).VClamped = val@<p> Sets whether the potential of triangle element with index idx is clamped (clamped = True) or not (clamped = False).</p>"}, "Vertex": {"IClamp": "sim.VERT(vert).IClamp = val</br>sim.VERTS(vertLst).IClamp = val@<p> Set current clamp to vertex element with index idx to current i (Amps). NOTE: Convention is maintained that a positive current clamp is depolarizing, a negative current clamp is hyperpolarizing.</p>", "V": "sim.VERT(vert).V = val</br>sim.VERTS(vertLst).V = val@<p> Set the potential (in volts) of vertex element with index idx.</p>", "VClamped": "sim.VERT(vert).VClamped = val</br>sim.VERTS(vertLst).VClamped = val@<p> Sets whether the potential of vertex element with index idx is clamped (clamped = True) or not (clamped = False).</p>"}}, "TetOpSplit": {"Tetrahedron": {"Species": {"Conc": "sim.TET(tet).spec.Conc = val</br>sim.TETS(tetLst).spec.Conc = val@<p> Sets the concentration (in Molar units) of species with identifier string spec in a tetrahedral element with index idx to conc.This continuous value must be converted internally to a discrete number of molecules.</p><p>Due to the small volumes of tetrahedral elements the difference between 'rounding up' and 'rounding down' can be a large difference in concentration.</p>", "Amount": "sim.TET(tet).spec.Amount = val</br>sim.TETS(tetLst).spec.Amount = val@<p> Sets the amount (in mols) of species with identifier string spec in tetrahedral element with index idx to a. This continuous value must be converted internally to a discrete number of molecules by multiplication with Avogadro's number.</p><p>Due to the small volumes of tetrahedral elements the difference between 'rounding up' and 'rounding down' can be a significant difference in concentration.</p>", "Clamped": "sim.TET(tet).spec.Clamped = val</br>sim.TETS(tetLst).spec.Clamped = val@<p> Sets whether the concentration of species spec in tetrahedral element with index idx is clamped (clamped = True) or not (clamped = False). If a species is clamped the concentration stays the same regardless of reactions that consume or produce molecules of the species or diffusion of the species into or out of the tetrahedral element.</p>", "Count": "sim.TET(tet).spec.Count = val</br>sim.TETS(tetLst).spec.Count = val@<p> Sets the number of molecules of species with identifier string spec in tetrahedral element with index idx to n.</p>"}, "Diffusion": {"Active": "sim.TET(tet).diff.Active = val</br>sim.TETS(tetLst).diff.Active = val@<p> Activate (active = True) or deactivate (active = False) diffusion rule with identifier string diff in tetrahedral element with index idx. If diffusion of a species is inactive this means the molecules will never diffuse out of the tetrahedron and has the same effect as a diffusion constant of zero.</p>", "D": "sim.TET(tet).diff.D = val</br>sim.TET(tet).diff(direc=tet2).D = val</br>sim.TETS(tetLst).diff.D = val@<p> Sets the diffusion constant of diffusion rule with identifier string diff in tetrahedral element with index idx to dcst (in m^2/s). Specify direc to set the constant only towards a given tetrahedron direction.</p>"}, "Reaction": {"Active": "sim.TET(tet).reac['fwd'].Active = val</br>sim.TET(tet).reac['bkw'].Active = val</br>sim.TETS(tetLst).reac['fwd'].Active = val</br>sim.TETS(tetLst).reac['bkw'].Active = val@<p> Activate (active = True) or deactivate (active = False) a reaction with identifier string reac in tetrahedral element with index idx. If it's not active this means that the reaction will never occur regardless of whether reactants are present in sufficient numbers or not.</p>", "K": "sim.TET(tet).reac['fwd'].K = val</br>sim.TET(tet).reac['bkw'].K = val</br>sim.TETS(tetLst).reac['fwd'].K = val</br>sim.TETS(tetLst).reac['bkw'].K = val@<p> Sets the macroscopic reaction constant of reaction with identifier string reac in tetrahedral element with index idx to kf. The units of the reaction constant depends on the order of the reaction.</p>"}, "V": "sim.TET(tet).V = val</br>sim.TETS(tetLst).V = val@<p> Set the potential (in volts) of tetrahedral element with index idx.</p>", "VClamped": "sim.TET(tet).VClamped = val</br>sim.TETS(tetLst).VClamped = val@<p> Sets whether the potential of tetrahedral element with index idx is clamped (clamped = True) or not (clamped = False).</p>"}, "Compartment": {"Species": {"Amount": "sim.comp.spec.Amount = val@<p> Set the amount (in mols) of species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined amount from all tetrahedral elements in the compartment.</p>", "Clamped": "sim.comp.spec.Clamped = val@<p> Sets whether the concentration of species with identifier string spec in compartment with identifier string comp is clamped (clamped = True) or not (clamped = False). If a species is clamped the concentration stays the same regardless of reactions that consume or produce molecules of the species.</p><p>Note: in a mesh-based simulation this will set the species to be clamped or not in all tetrahedral elements of the compartment.</p>", "Conc": "sim.comp.spec.Conc = val@<p> Sets the concentration (in Molar units) of species with identifier string spec in compartment with identifier string comp to conc. In a discrete solver the continuous concentration is converted to a discrete number of molecules.</p><p>Note: in a mesh-based simulation the molecules are divided as equally as possible over all tetrahedral elements in the compartment (i.e. a uniform distribution).</p>", "Count": "sim.comp.spec.Count = val@<p> Set the number of molecules of a species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined count from all tetrahedral elements in the compartment.</p>"}, "Diffusion": {"Active": "sim.comp.diff.Active = val@<p> Activate (active = True) or deactivate (active = False) a diffusion rule with identifier string diff in compartment with identifier string comp. If diffusion of a species is inactive this means the molecules will remain in place and is effectively the same as setting the diffusion constant to zero</p>", "D": "sim.comp.diff.D = val@<p> Sets the diffusion constant of diffusion rule with identifier string diff in compartment with identifier string comp to dcst (in m^2/s).</p><p>Note: This method will set the diffusion constant in all tetrahedral elements in the compartment.</p><p>Note: The default value still comes from the steps.model description, so calling reset() will return the diffusion constants to that value.</p>"}, "Reaction": {"Active": "sim.comp.reac['fwd'].Active = val</br>sim.comp.reac['bkw'].Active = val@<p> Activate (active = True) or deactivate (active = False) a reaction with identifier string reac in compartment with identifier string comp. If a reaction is not active this means that a reaction will never occur regardless of whether the reactants are present in sufficient numbers or not.</p><p>Note: In a mesh-based simulation this will activate/deactivate the reaction in all tetrahedral elements in the compartment.</p>", "K": "sim.comp.reac['fwd'].K = val</br>sim.comp.reac['bkw'].K = val@<p> Sets the macroscopic reaction constant of reaction with identifier string reac in compartment with identifier string comp to kf. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based simulation this method sets the reaction constant in all tetrahedral elements of the compartment to kf</p><p>Note: The default value still comes from the steps.model description, so calling reset() will return the reaction constant to that value.</p>"}, "Vol": "sim.comp.Vol = val@<p> Set the volume of compartment with identifier string comp (in m^3).</p>"}, "Diff. Boundary": {"Species": {"Dcst": "sim.diffb.spec.Dcst = val</br>sim.diffb(direc=comp2).spec.Dcst = val@<p> Set the diffusion constant of tetrahedrons across a diffusion boundary. If direc is provided, only set dcsts of diffusion towards it (Directional dcsts of diffusions in tetrahedrons in the other compartment of the diffusion boundary towards tetrahedons in the direction compartment).</p>", "DiffusionActive": "sim.diffb.spec.DiffusionActive = val@<p> Activates or inactivates diffusion across a diffusion boundary for a species.</p>"}}, "Membrane": {"Capac": "sim.memb.Capac = val@<p> Sets the specific membrane capacitance (in farad / m^2) of membrane with string identifier memb.</p>", "Potential": "sim.memb.Potential = val@<p> Sets the potential (in volts) of membrane with string identifier memb. NOTE: This method will set the potential of all nodes in the volume conductor to the same value.</p>", "Res": "sim.memb.Res = val@<p> Sets the  electrical resistivity (in ohm/m^2) of the membrane with string identifier memb. Reversal potential vrev is required in Volts.</p>", "VolRes": "sim.memb.VolRes = val@<p> Sets the bulk electrical resistivity (in ohm.m) of the volume conductor assocaited with membrane with string identifier memb.</p>"}, "Patch": {"Species": {"Amount": "sim.patch.spec.Amount = val@<p> Sets the amount (in mols) of species with identifier string spec in patch with identifier string pat to a. In a discrete solver, such as Wmdirect and Tetexact, this continuous value is converted internally into a discrete number of molecules by multiplication with Avogadro's number.</p><p>Note: in a mesh-based simulation the molecules are divided as equally as possible over all triangular elements in the patch (i.e. a uniform distribution).</p>", "Clamped": "sim.patch.spec.Clamped = val@<p> Sets whether the species with identifier string spec in patch with identifier string pat is clamped (clamped = True) or not (clamped = False). If a species is clamped the number of molecules stays the same regardless of surface reactions that consume or produce molecules of the species.</p><p>Note: in a mesh-based simulation this will set the species to be clamped in all triangular elements of the patch.</p>", "Count": "sim.patch.spec.Count = val@<p> Sets the number of molecules of species with identifier string spec in patch with identifier string pat to n. Note: in a mesh-based simulation the molecules are divided as equally as possible over all triangular elements in the patch (i.e. a uniform distribution).</p>"}, "Area": "sim.patch.Area = val@<p> Sets the area of patch with identifier string pat to area a (in m^2).</p>", "Reaction": {"Active": "sim.patch.reac['fwd'].Active = val</br>sim.patch.reac['bkw'].Active = val@<p> Activate (active = True) or deactivate (active = False) a voltage-dependent surface reaction with identifier string vsreac in patch with identifier string pat. If a voltage-dependent surface reaction is not active this means that a reaction will never occur regardless of whether the reactants are present in sufficient numbers or not.</p><p>Note: In a mesh-based simulation this will activate/ deactivate the reaction in all triangular elements in the patch.</p>", "K": "sim.patch.reac['fwd'].K = val</br>sim.patch.reac['bkw'].K = val@<p> Sets the macroscopic reaction constant of surface reaction with identifier string sreac in patch with identifier string pat to kf. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based simulation this method sets the surface reaction constant in all triangular elements of the patch to kf.</p><p>Note: The default value still comes from the steps.model description, so calling reset() will return the surface reaction constant to that value.</p>"}}, "Region of Interest": {"Species": {"Amount": "sim.roi.spec.Amount = val@<p> Set the amount of a species in a ROI.</p>", "Clamped": "sim.roi.spec.Clamped = val@<p> Set a species in a ROI to be clamped or not. The count of species s in the ROI is clamped if b is True, not clamped if b is False.</p>", "Conc": "sim.roi.spec.Conc = val@<p> Set the concentration of a species in a ROI.</p>", "Count": "sim.roi.spec.Count = val@<p> Set the count of a species in a ROI.</p>"}, "Diffusion": {"Active": "sim.roi.diff.Active = val@<p> Set diffusion d in a ROI to be active or not.</p>", "D": "sim.roi.diff.D = val</br>sim.roi.diff(direc=tet2).D = val@<p> Sets the macroscopic diffusion constant of diffusion with identifier string d in a ROI with identifier string ROI_id to dk.</p><p>Note: The default value still comes from the steps.model description, so calling reset() will return the diffusion constant to that value.</p>"}, "Reaction": {"Active": "sim.roi.reac['fwd'].Active = val</br>sim.roi.reac['bkw'].Active = val@<p> Set voltage dependent surface reaction vsr in a ROI to be active or not.</p>", "K": "sim.roi.reac['fwd'].K = val</br>sim.roi.reac['bkw'].K = val@<p> Sets the macroscopic reaction constant of surface reaction with identifier string sr in a ROI with identifier string ROI_id to kf. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: The default value still comes from the steps.model description, so calling reset() will return the reaction constant to that value.</p>"}}, "Surf. Diff. Boundary": {"Species": {"Dcst": "sim.sdiffb.spec.Dcst = val</br>sim.diffb(direc=patch2).spec.Dcst = val@<p> Set the diffusion constant of triangles across a surface diffusion boundary. If direc is provided, only set dcsts of diffusion towards it (Directional dcsts of diffusions in triangles in the other patches of the diffusion boundary towards triangles in the direction patch).</p>", "DiffusionActive": "sim.sdiffb.spec.DiffusionActive = val@<p> Activates or inactivates diffusion across a surface diffusion boundary for a species.</p>"}}, "Triangle": {"Species": {"Amount": "sim.TRI(tri).spec.Amount = val</br>sim.TRIS(triLst).spec.Amount = val@<p> Sets the amount (in mols) of species with identifier string spec in triangular element with index idx to a. This continuous value must be converted internally to a discrete number of molecules by multiplication with Avogadro's number.</p>", "Clamped": "sim.TRI(tri).spec.Clamped = val</br>sim.TRIS(triLst).spec.Clamped = val@<p> Sets whether the concentration of species spec in triangular element with index idx is clamped (clamped = True) or not (clamped = False). If a species is clamped the concentration stays the same regardless of reactions that consume or produce molecules of the species.</p>", "Count": "sim.TRI(tri).spec.Count = val</br>sim.TRIS(triLst).spec.Count = val@<p> Sets the number of molecules of species with identifier string spec in triangular element with index idx to n.</p>"}, "Capac": "sim.TRI(tri).Capac = val</br>sim.TRIS(triLst).Capac = val@<p> Sets the specific membrane capacitance (in farad / m^2) of tri with index tidx.</p>", "IClamp": "sim.TRI(tri).IClamp = val</br>sim.TRIS(triLst).IClamp = val@<p> Set current clamp to triangle element with index idx to current i (amps). NOTE: Convention is maintained that a positive current clamp is depolarizing, a negative current clamp is hyperpolarizing.</p>", "Diffusion": {"D": "sim.TRI(tri).sdiff.D = val</br>sim.TRI(tri).sdiff(direc=tri2).D = val</br>sim.TRIS(triLst).sdiff.D = val@<p> Sets the diffusion constant of diffusion rule with identifier string diff in triangle element with index idx to dcst. Specify direc to set the constant only towards a given triangle direction.</p>"}, "Reaction": {"Active": "sim.TRI(tri).reac['fwd'].Active = val</br>sim.TRI(tri).reac['bkw'].Active = val</br>sim.TRIS(triLst).reac['fwd'].Active = val</br>sim.TRIS(triLst).reac['bkw'].Active = val@<p> Activate (active = True) or deactivate (active = False) a voltage-dependent surface reaction with identifier string vsreac in triangular element with index idx. If it's not active this means that the voltage-dependent surface reaction will never occur regardless of whether reactants are present in sufficient numbers or not.</p>", "K": "sim.TRI(tri).reac['fwd'].K = val</br>sim.TRI(tri).reac['bkw'].K = val</br>sim.TRIS(triLst).reac['fwd'].K = val</br>sim.TRIS(triLst).reac['bkw'].K = val@<p> Sets the macroscopic reaction constant of surface reaction with identifier string sreac in triangular element with index idx to kf. The units of the reaction constant depends on the order of the reaction.</p>"}, "V": "sim.TRI(tri).V = val</br>sim.TRIS(triLst).V = val@<p> Set the potential (in volts) of triangle element with index idx.</p>", "VClamped": "sim.TRI(tri).VClamped = val</br>sim.TRIS(triLst).VClamped = val@<p> Sets whether the potential of triangle element with index idx is clamped (clamped = True) or not (clamped = False).</p>"}, "Vertex": {"IClamp": "sim.VERT(vert).IClamp = val</br>sim.VERTS(vertLst).IClamp = val@<p> Set current clamp to vertex element with index idx to current i (Amps). NOTE: Convention is maintained that a positive current clamp is depolarizing, a negative current clamp is hyperpolarizing.</p>", "V": "sim.VERT(vert).V = val</br>sim.VERTS(vertLst).V = val@<p> Set the potential (in volts) of vertex element with index idx.</p>", "VClamped": "sim.VERT(vert).VClamped = val</br>sim.VERTS(vertLst).VClamped = val@<p> Sets whether the potential of vertex element with index idx is clamped (clamped = True) or not (clamped = False).</p>"}}, "DistTetOpSplit": {"Tetrahedron": {"Species": {"Conc": "sim.TET(tet).spec.Conc = val</br>sim.TETS(tetLst).spec.Conc = val@<p> Sets the concentration (in Molar units) of species with identifier string spec in a tetrahedral element with index idx to conc.This continuous value must be converted internally to a discrete number of molecules.</p><p>Due to the small volumes of tetrahedral elements the difference between 'rounding up' and 'rounding down' can be a large difference in concentration.</p>", "Count": "sim.TET(tet).spec.Count = val</br>sim.TETS(tetLst).spec.Count = val@<p> Sets the number of molecules of species with identifier string spec in tetrahedral element with index idx to n.</p>"}}, "Triangle": {"Species": {"Count": "sim.TRI(tri).spec.Count = val</br>sim.TRIS(triLst).spec.Count = val@<p> Sets the number of molecules of species with identifier string spec in triangular element with index idx to n.</p>"}}, "Compartment": {"Species": {"Conc": "sim.comp.spec.Conc = val@<p> Sets the concentration (in Molar units) of species with identifier string spec in compartment with identifier string comp to conc. In a discrete solver the continuous concentration is converted to a discrete number of molecules.</p><p>In a mesh-based simulation this is the combined count from all tetrahedral elements in the compartment.</p><p>The distributing is weighted with the volume fraction V_tet/V_tot: bigger elements get a higher amount of molecules.</p><p>distribution=UNIFORM the distribution is deterministic (apart from roundings) and the number of molecules per element is n*V_tet/V_tot.</p><p>distribution=MULTINOMIAL the distribution is multinomial and the probability of putting an element in a tet is V_tet/V_tot</p>", "Count": "sim.comp.spec.Count = val@<p> Set the number of molecules of a species with identifier string spec in compartment with identifier string comp.</p><p>In a mesh-based simulation this is the combined count from all tetrahedral elements in the compartment.</p><p>The distributing is weighted with the volume fraction V_tet/V_tot: bigger elements get a higher amount of molecules.</p><p>distribution=UNIFORM the distribution is deterministic (apart from roundings) and the number of molecules per element is n*V_tet/V_tot.</p><p>distribution=MULTINOMIAL the distribution is multinomial and the probability of putting an element in a tet is V_tet/V_tot</p>"}}, "Diff. Boundary": {"Species": {"DiffusionActive": "sim.diffb.spec.DiffusionActive = val@<p> Activates or inactivates diffusion across a diffusion boundary for a species.</p>"}}, "Membrane": {"IClamp": "sim.memb.IClamp = val@<p> Set a current clamp on a membrane</p>", "Potential": "sim.memb.Potential = val@<p> Sets the potential (in volts) of membrane with string identifier memb. NOTE: This method will set the potential of all nodes in the volume conductor to the same value.</p>"}, "Patch": {"Species": {"Count": "sim.patch.spec.Count = val@<p> Sets the number of molecules of species with identifier string spec in patch with identifier string pat to n.</p><p> Note: In case of a mesh-based simulation the molecules, molecules are divided among triangles.</p><p>distribution=UNIFORM the distribution is deterministic (apart from roundings) and the number of molecules per element is n*V_tet/V_tot.</p><p>distribution=DIST_MULTINOMIAL the distribution is multinomial and the probability of putting an element in a tet is V_tet/V_tot</p>"}, "Reaction": {"K": "sim.patch.reac['fwd'].K = val</br>sim.patch.reac['bkw'].K = val@<p> Sets the macroscopic reaction constant of surface reaction with identifier string sreac in patch with identifier string pat to kf. The unit of the reaction constant depends on the order of the reaction.</p><p>Note: In a mesh-based simulation this method sets the surface reaction constant in all triangular elements of the patch to kf.</p><p>Note: The default value still comes from the steps.model description, so calling reset() will return the surface reaction constant to that value.</p>"}}, "Vertex": {"IClamp": "sim.VERT(vert).IClamp = val</br>sim.VERTS(vertLst).IClamp = val@<p> Set the current clamp on the vertex with index vidx, in ampere. NOTE: Convention is maintained that a positive current clamp is depolarizing, a negative current clamp is hyperpolarizing.</p>"}}}}